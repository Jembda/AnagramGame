"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.speechstate = void 0;
const xstate_1 = require("xstate");
const tts_1 = require("./tts");
const asr_1 = require("./asr");
const speechstate = (0, xstate_1.createMachine)({
    types: {},
    context: ({ input }) => ({
        settings: input,
    }),
    id: "speechstate",
    type: "parallel",
    states: {
        AsrTtsSpawner: {
            initial: "Idle",
            states: {
                Idle: { on: { PREPARE: "CreateAudioContext" } },
                CreateAudioContext: {
                    invoke: {
                        id: "createAudioContext",
                        src: "audioContext",
                        onDone: {
                            target: "Spawn",
                            actions: (0, xstate_1.assign)({ audioContext: ({ event }) => event.output }),
                        },
                    },
                },
                Spawn: {
                    entry: [
                        (0, xstate_1.assign)({
                            ttsRef: ({ context, spawn }) => {
                                return spawn(tts_1.ttsMachine, {
                                    input: {
                                        ttsDefaultVoice: context.settings.ttsDefaultVoice,
                                        audioContext: context.audioContext,
                                        azureCredentials: context.settings.azureCredentials,
                                    },
                                });
                            },
                        }),
                        (0, xstate_1.assign)({
                            asrRef: ({ context, spawn }) => {
                                return spawn(asr_1.asrMachine, {
                                    input: {
                                        asrDefaultCompleteTimeout: context.settings.asrDefaultCompleteTimeout,
                                        asrDefaultNoInputTimeout: context.settings.asrDefaultNoInputTimeout,
                                        locale: context.settings.locale,
                                        audioContext: context.audioContext,
                                        azureCredentials: context.settings.azureCredentials,
                                    },
                                });
                            },
                        }),
                    ],
                    after: {
                        300000: {
                            target: "Spawn",
                        },
                    },
                },
            },
        },
        AsrTtsManager: {
            initial: "Initialize",
            on: {
                TTS_READY: {
                    actions: () => console.debug("[TTS→SpSt] TTS_READY"),
                    target: ".PreReady",
                },
                ASR_READY: {
                    actions: () => console.debug("[ASR→SpSt] ASR_READY"),
                    target: ".PreReady",
                },
                // ASR_ERROR not implemented
                TTS_ERROR: {
                    actions: () => console.error("[TTS→SpSt] TTS_ERROR"),
                    target: ".Fail",
                },
                ASR_NOINPUT: {
                    actions: [
                        () => console.debug("[ASR→SpSt] NOINPUT"),
                        (0, xstate_1.sendParent)({ type: "ASR_NOINPUT" }),
                    ],
                    target: ".Ready",
                },
            },
            states: {
                Initialize: {},
                PreReady: {
                    on: {
                        TTS_READY: {
                            actions: () => console.debug("[TTS→SpSt] TTS_READY"),
                            target: "Ready",
                        },
                        ASR_READY: {
                            actions: () => console.debug("[ASR→SpSt] ASR_READY"),
                            target: "Ready",
                        },
                    },
                },
                Ready: {
                    initial: "Idle",
                    entry: [
                        () => console.debug("[SpSt] All ready"),
                        (0, xstate_1.sendParent)({ type: "ASRTTS_READY" }),
                    ],
                    states: {
                        Idle: {
                            on: {
                                LISTEN: { target: "WaitForRecogniser" },
                                SPEAK: [
                                    {
                                        target: "Speaking",
                                    },
                                ],
                            },
                        },
                        Speaking: {
                            entry: [
                                ({ event }) => console.debug("[SpSt→TTS] SPEAK", event.value),
                                ({ context, event }) => context.ttsRef.send({
                                    type: "SPEAK",
                                    value: event.value,
                                }),
                            ],
                            on: {
                                CONTROL: {
                                    actions: [
                                        () => console.debug("[SpSt→TTS] CONTROL"),
                                        ({ context }) => context.ttsRef.send({
                                            type: "CONTROL",
                                        }),
                                    ],
                                },
                                STOP: {
                                    actions: [
                                        () => console.debug("[SpSt→TTS] STOP"),
                                        ({ context }) => context.ttsRef.send({
                                            type: "STOP",
                                        }),
                                    ],
                                },
                                TTS_STARTED: {
                                    actions: [
                                        () => console.debug("[TTS→SpSt] TTS_STARTED"),
                                        (0, xstate_1.sendParent)({ type: "TTS_STARTED" }),
                                    ],
                                },
                                SPEAK_COMPLETE: {
                                    target: "Idle",
                                    actions: [
                                        () => console.debug("[TTS→SpSt] SPEAK_COMPLETE"),
                                        (0, xstate_1.sendParent)({ type: "SPEAK_COMPLETE" }),
                                    ],
                                },
                            },
                        },
                        WaitForRecogniser: {
                            entry: [
                                ({ event }) => console.debug("[SpSt→ASR] START", event.value),
                                ({ context, event }) => context.asrRef.send({
                                    type: "START",
                                    value: event.value,
                                }),
                            ],
                            on: {
                                ASR_STARTED: {
                                    target: "Recognising",
                                    actions: [
                                        () => console.debug("[ASR→SpSt] ASR_STARTED"),
                                        (0, xstate_1.sendParent)({ type: "ASR_STARTED" }),
                                    ],
                                },
                            },
                        },
                        Recognising: {
                            on: {
                                CONTROL: {
                                    actions: [
                                        () => console.debug("[SpSt→ASR] CONTROL"),
                                        ({ context }) => context.asrRef.send({
                                            type: "CONTROL",
                                        }),
                                    ],
                                },
                                RECOGNISED: {
                                    actions: [
                                        ({ event }) => console.debug("[ASR→SpSt] RECOGNISED", event.value),
                                        (0, xstate_1.sendParent)(({ event }) => ({
                                            type: "RECOGNISED",
                                            value: event.value,
                                        })),
                                    ],
                                    target: "Idle",
                                },
                            },
                        },
                    },
                },
                Fail: {},
            },
        },
    },
}, {
    actors: {
        audioContext: (0, xstate_1.fromPromise)(() => {
            const audioContext = new (window.AudioContext ||
                window.webkitAudioContext)();
            navigator.mediaDevices
                .getUserMedia({ audio: true })
                .then(function (stream) {
                audioContext.createMediaStreamSource(stream);
            });
            return audioContext;
        }),
    },
    actions: {
    //   logRecResult: ({ event }) => {
    //     console.log("U>", (event as any).value[0]["utterance"], {
    //       confidence: (event as any).value[0]["confidence"],
    //     });
    //   },
    //   logAgenda: ({ context, event }) => {
    //     console.log("S>", (event as any).value, {
    //       passivity: `${context.tdmPassivity ?? "∞"} ms`,
    //       speechCompleteTimeout: `${
    //         context.tdmSpeechCompleteTimeout ||
    //         context.settings.completeTimeout
    //       } ms`,
    //     });
    //   },
    },
});
exports.speechstate = speechstate;
