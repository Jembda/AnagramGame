{"version":3,"file":"xstate.umd.min.js","sources":["../src/Mailbox.ts","../src/constants.ts","../src/dev/index.ts","../src/eventUtils.ts","../src/reportUnhandledError.ts","../src/symbolObservable.ts","../src/system.ts","../src/utils.ts","../src/createActor.ts","../src/actions/cancel.ts","../src/actions/spawnChild.ts","../src/actions/stopChild.ts","../src/guards.ts","../src/stateUtils.ts","../src/State.ts","../src/spawn.ts","../src/actions/assign.ts","../src/actions/raise.ts","../src/types.ts","../src/actions/send.ts","../src/actions/enqueueActions.ts","../src/actions/log.ts","../src/actors/transition.ts","../src/actors/callback.ts","../src/actors/observable.ts","../src/actors/promise.ts","../src/actors/index.ts","../src/memo.ts","../src/StateNode.ts","../src/StateMachine.ts","../src/waitFor.ts","../src/createMachine.ts","../src/SimulatedClock.ts","../src/assert.ts","../src/getNextSnapshot.ts","../src/setup.ts","../src/toPromise.ts"],"sourcesContent":["interface MailboxItem<T> {\n  value: T;\n  next: MailboxItem<T> | null;\n}\n\nexport class Mailbox<T> {\n  private _active: boolean = false;\n  private _current: MailboxItem<T> | null = null;\n  private _last: MailboxItem<T> | null = null;\n\n  constructor(private _process: (ev: T) => void) {}\n\n  public start() {\n    this._active = true;\n    this.flush();\n  }\n\n  public clear(): void {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n\n  public enqueue(event: T): void {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n\n    if (this._current) {\n      this._last!.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n\n    this._current = enqueued;\n    this._last = enqueued;\n\n    if (this._active) {\n      this.flush();\n    }\n  }\n\n  private flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n","export const STATE_DELIMITER = '.';\nexport const TARGETLESS_KEY = '';\nexport const NULL_EVENT = '';\nexport const STATE_IDENTIFIER = '#';\nexport const WILDCARD = '*';\nexport const XSTATE_INIT = 'xstate.init';\nexport const XSTATE_ERROR = 'xstate.error';\nexport const XSTATE_STOP = 'xstate.stop';\n","import isDevelopment from '#is-development';\nimport { AnyActor, DevToolsAdapter } from '../types.ts';\n\ninterface DevInterface {\n  services: Set<AnyActor>;\n  register(service: AnyActor): void;\n  onRegister(listener: ServiceListener): void;\n}\ntype ServiceListener = (service: AnyActor) => void;\n\nexport interface XStateDevInterface {\n  register: (service: AnyActor) => void;\n  unregister: (service: AnyActor) => void;\n  onRegister: (listener: ServiceListener) => {\n    unsubscribe: () => void;\n  };\n  services: Set<AnyActor>;\n}\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nexport function getGlobal(): typeof globalThis | undefined {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  if (isDevelopment) {\n    console.warn(\n      'XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues'\n    );\n  }\n}\n\nfunction getDevTools(): DevInterface | undefined {\n  const w = getGlobal();\n  if (!!(w as any).__xstate__) {\n    return (w as any).__xstate__;\n  }\n\n  return undefined;\n}\n\nexport function registerService(service: AnyActor) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  const devTools = getDevTools();\n\n  if (devTools) {\n    devTools.register(service);\n  }\n}\n\nexport const devToolsAdapter: DevToolsAdapter = (service) => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  const devTools = getDevTools();\n\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n","import { XSTATE_INIT } from './constants.ts';\nimport { DoneActorEvent, DoneStateEvent, ErrorActorEvent } from './types.ts';\n\n/**\n * Returns an event that represents an implicit event that\n * is sent after the specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nexport function createAfterEvent(delayRef: number | string, id: string) {\n  return { type: `xstate.after.${delayRef}.${id}` } as const;\n}\n\n/**\n * Returns an event that represents that a final state node\n * has been reached in the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nexport function createDoneStateEvent(\n  id: string,\n  output?: unknown\n): DoneStateEvent {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state node,\n * but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nexport function createDoneActorEvent(\n  invokeId: string,\n  output?: unknown\n): DoneActorEvent {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output\n  };\n}\n\nexport function createErrorActorEvent(\n  id: string,\n  error?: unknown\n): ErrorActorEvent {\n  return { type: `xstate.error.actor.${id}`, error };\n}\n\nexport function createInitEvent(input: unknown) {\n  return { type: XSTATE_INIT, input } as const;\n}\n","/**\n * This function makes sure that unhandled errors are thrown in a separate macrotask.\n * It allows those errors to be detected by global error handlers and reported to bug tracking services\n * without interrupting our own stack of execution.\n *\n * @param err error to be thrown\n */\nexport function reportUnhandledError(err: unknown) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n","export const symbolObservable: typeof Symbol.observable = (() =>\n  (typeof Symbol === 'function' && Symbol.observable) ||\n  '@@observable')() as any;\n","import {\n  AnyEventObject,\n  ActorSystemInfo,\n  AnyActorRef,\n  Observer,\n  Snapshot,\n  HomomorphicOmit,\n  EventObject\n} from './types.ts';\n\nexport interface ScheduledEvent {\n  id: string;\n  event: EventObject;\n  startedAt: number; // timestamp\n  delay: number;\n  source: AnyActorRef;\n  target: AnyActorRef;\n}\n\nexport interface Clock {\n  setTimeout(fn: (...args: any[]) => void, timeout: number): any;\n  clearTimeout(id: any): void;\n}\n\nexport interface Scheduler {\n  schedule(\n    source: AnyActorRef,\n    target: AnyActorRef,\n    event: EventObject,\n    delay: number,\n    id: string | undefined\n  ): void;\n  cancel(source: AnyActorRef, id: string): void;\n  cancelAll(actorRef: AnyActorRef): void;\n}\n\ntype ScheduledEventId = string & { __scheduledEventId: never };\n\nfunction createScheduledEventId(\n  actorRef: AnyActorRef,\n  id: string\n): ScheduledEventId {\n  return `${actorRef.sessionId}.${id}` as ScheduledEventId;\n}\n\nexport interface ActorSystem<T extends ActorSystemInfo> {\n  /**\n   * @internal\n   */\n  _bookId: () => string;\n  /**\n   * @internal\n   */\n  _register: (sessionId: string, actorRef: AnyActorRef) => string;\n  /**\n   * @internal\n   */\n  _unregister: (actorRef: AnyActorRef) => void;\n  /**\n   * @internal\n   */\n  _set: <K extends keyof T['actors']>(key: K, actorRef: T['actors'][K]) => void;\n  get: <K extends keyof T['actors']>(key: K) => T['actors'][K] | undefined;\n  inspect: (observer: Observer<InspectionEvent>) => void;\n  /**\n   * @internal\n   */\n  _sendInspectionEvent: (\n    event: HomomorphicOmit<InspectionEvent, 'rootId'>\n  ) => void;\n  /**\n   * @internal\n   */\n  _relay: (\n    source: AnyActorRef | undefined,\n    target: AnyActorRef,\n    event: AnyEventObject\n  ) => void;\n  scheduler: Scheduler;\n  getSnapshot: () => {\n    _scheduledEvents: Record<string, ScheduledEvent>;\n  };\n  /**\n   * @internal\n   */\n  _snapshot: {\n    _scheduledEvents: Record<ScheduledEventId, ScheduledEvent>;\n  };\n  start: () => void;\n}\n\nexport type AnyActorSystem = ActorSystem<any>;\n\nlet idCounter = 0;\nexport function createSystem<T extends ActorSystemInfo>(\n  rootActor: AnyActorRef,\n  options: {\n    clock: Clock;\n    snapshot?: unknown;\n  }\n): ActorSystem<T> {\n  const children = new Map<string, AnyActorRef>();\n  const keyedActors = new Map<keyof T['actors'], AnyActorRef | undefined>();\n  const reverseKeyedActors = new WeakMap<AnyActorRef, keyof T['actors']>();\n  const observers = new Set<Observer<InspectionEvent>>();\n  const timerMap: { [id: ScheduledEventId]: number } = {};\n  const clock = options.clock;\n\n  const scheduler: Scheduler = {\n    schedule: (\n      source,\n      target,\n      event,\n      delay,\n      id = Math.random().toString(36).slice(2)\n    ) => {\n      const scheduledEvent: ScheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n\n        system._relay(source, target, event);\n      }, delay);\n\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id: string) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n\n      clock.clearTimeout(timeout);\n    },\n    cancelAll: (actorRef) => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent =\n          system._snapshot._scheduledEvents[\n            scheduledEventId as ScheduledEventId\n          ];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n\n  const system: ActorSystem<T> = {\n    _snapshot: {\n      _scheduledEvents:\n        (options?.snapshot && (options.snapshot as any).scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: (actorRef) => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: (systemId) => {\n      return keyedActors.get(systemId) as T['actors'][any];\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(\n          `Actor with system ID '${systemId as string}' already exists.`\n        );\n      }\n\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: (observer) => {\n      observers.add(observer);\n    },\n    _sendInspectionEvent: (event) => {\n      const resolvedInspectionEvent: InspectionEvent = {\n        ...event,\n        rootId: rootActor.sessionId\n      };\n      observers.forEach((observer) => observer.next?.(resolvedInspectionEvent));\n    },\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: { ...system._snapshot._scheduledEvents }\n      };\n    },\n    start: () => {\n      const scheduledEvets = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvets) {\n        const { source, target, event, delay, id } =\n          scheduledEvets[scheduledId as ScheduledEventId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    }\n  };\n\n  return system;\n}\nexport interface BaseInspectionEventProperties {\n  rootId: string; // the session ID of the root\n  /**\n   * The relevant actorRef for the inspection event.\n   * - For snapshot events, this is the `actorRef` of the snapshot.\n   * - For event events, this is the target `actorRef` (recipient of event).\n   * - For actor events, this is the `actorRef` of the registered actor.\n   */\n  actorRef: AnyActorRef;\n}\n\nexport interface InspectedSnapshotEvent extends BaseInspectionEventProperties {\n  type: '@xstate.snapshot';\n  event: AnyEventObject; // { type: string, ... }\n  snapshot: Snapshot<unknown>;\n}\n\nexport interface InspectedEventEvent extends BaseInspectionEventProperties {\n  type: '@xstate.event';\n  // The source might not exist, e.g. when:\n  // - root init events\n  // - events sent from external (non-actor) sources\n  sourceRef: AnyActorRef | undefined;\n  event: AnyEventObject; // { type: string, ... }\n}\n\nexport interface InspectedActorEvent extends BaseInspectionEventProperties {\n  type: '@xstate.actor';\n}\n\nexport type InspectionEvent =\n  | InspectedSnapshotEvent\n  | InspectedEventEvent\n  | InspectedActorEvent;\n","import isDevelopment from '#is-development';\nimport { isMachineSnapshot } from './State.ts';\nimport type { StateNode } from './StateNode.ts';\nimport { TARGETLESS_KEY } from './constants.ts';\nimport type {\n  ActorLogic,\n  AnyActorRef,\n  AnyEventObject,\n  AnyMachineSnapshot,\n  AnyStateMachine,\n  AnyTransitionConfig,\n  ErrorActorEvent,\n  EventObject,\n  InvokeConfig,\n  MachineContext,\n  Mapper,\n  NonReducibleUnknown,\n  Observer,\n  SingleOrArray,\n  StateLike,\n  StateValue,\n  TransitionConfigTarget\n} from './types.ts';\n\nexport function matchesState(\n  parentStateId: StateValue,\n  childStateId: StateValue\n): boolean {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n\n  return Object.keys(parentStateValue).every((key) => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n\n    return matchesState(parentStateValue[key]!, childStateValue[key]!);\n  });\n}\n\nexport function toStatePath(stateId: string | string[]): string[] {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n\n  let result: string[] = [];\n  let segment = '';\n\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n\n  result.push(segment);\n\n  return result;\n}\n\nexport function toStateValue(\n  stateValue: StateLike<any> | StateValue\n): StateValue {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n\n  if (typeof stateValue !== 'string') {\n    return stateValue as StateValue;\n  }\n\n  const statePath = toStatePath(stateValue);\n\n  return pathToStateValue(statePath);\n}\n\nexport function pathToStateValue(statePath: string[]): StateValue {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n\n  const value: StateValue = {};\n  let marker = value;\n\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n\n  return value;\n}\n\nexport function mapValues<P, O extends Record<string, unknown>>(\n  collection: O,\n  iteratee: (item: O[keyof O], key: keyof O, collection: O, i: number) => P\n): { [key in keyof O]: P };\nexport function mapValues(\n  collection: Record<string, unknown>,\n  iteratee: (\n    item: unknown,\n    key: string,\n    collection: Record<string, unknown>,\n    i: number\n  ) => unknown\n) {\n  const result: Record<string, unknown> = {};\n\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n\n  return result;\n}\n\nexport function toArrayStrict<T>(value: readonly T[] | T): readonly T[] {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\nexport function toArray<T>(value: readonly T[] | T | undefined): readonly T[] {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\n\nexport function resolveOutput<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject\n>(\n  mapper:\n    | Mapper<TContext, TExpressionEvent, unknown, EventObject>\n    | NonReducibleUnknown,\n  context: TContext,\n  event: TExpressionEvent,\n  self: AnyActorRef\n): unknown {\n  if (typeof mapper === 'function') {\n    return mapper({ context, event, self });\n  }\n\n  if (\n    isDevelopment &&\n    !!mapper &&\n    typeof mapper === 'object' &&\n    Object.values(mapper).some((val) => typeof val === 'function')\n  ) {\n    console.warn(\n      `Dynamically mapping values to individual properties is deprecated. Use a single function that returns the mapped object instead.\\nFound object containing properties whose values are possibly mapping functions: ${Object.entries(\n        mapper\n      )\n        .filter(([key, value]) => typeof value === 'function')\n        .map(\n          ([key, value]) =>\n            `\\n - ${key}: ${(value as () => any)\n              .toString()\n              .replace(/\\n\\s*/g, '')}`\n        )\n        .join('')}`\n    );\n  }\n\n  return mapper;\n}\n\nexport function isActorLogic(value: any): value is ActorLogic<any, any> {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'transition' in value &&\n    typeof value.transition === 'function'\n  );\n}\n\nexport function isArray(value: any): value is readonly any[] {\n  return Array.isArray(value);\n}\n\nexport function isErrorActorEvent(\n  event: AnyEventObject\n): event is ErrorActorEvent {\n  return event.type.startsWith('xstate.error.actor');\n}\n\nexport function toTransitionConfigArray<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  configLike: SingleOrArray<AnyTransitionConfig | TransitionConfigTarget>\n): Array<AnyTransitionConfig> {\n  return toArrayStrict(configLike).map((transitionLike) => {\n    if (\n      typeof transitionLike === 'undefined' ||\n      typeof transitionLike === 'string'\n    ) {\n      return { target: transitionLike };\n    }\n\n    return transitionLike;\n  });\n}\n\nexport function normalizeTarget<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  target: SingleOrArray<string | StateNode<TContext, TEvent>> | undefined\n): ReadonlyArray<string | StateNode<TContext, TEvent>> | undefined {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\n\nexport function toObserver<T>(\n  nextHandler?: Observer<T> | ((value: T) => void),\n  errorHandler?: (error: any) => void,\n  completionHandler?: () => void\n): Observer<T> {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(\n      self\n    )\n  };\n}\n\nexport function createInvokeId(stateNodeId: string, index: number): string {\n  return `${index}.${stateNodeId}`;\n}\n\nexport function resolveReferencedActor(machine: AnyStateMachine, src: string) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/)!;\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke!;\n  return (\n    Array.isArray(invokeConfig)\n      ? invokeConfig[indexStr as any]\n      : (invokeConfig as InvokeConfig<any, any, any, any, any, any>)\n  ).src;\n}\n\nexport function getAllOwnEventDescriptors(snapshot: AnyMachineSnapshot) {\n  return [...new Set([...snapshot._nodes.flatMap((sn) => sn.ownEvents)])];\n}\n","import isDevelopment from '#is-development';\nimport { Mailbox } from './Mailbox.ts';\nimport { XSTATE_STOP } from './constants.ts';\nimport { devToolsAdapter } from './dev/index.ts';\nimport {\n  createDoneActorEvent,\n  createErrorActorEvent,\n  createInitEvent\n} from './eventUtils.ts';\nimport { reportUnhandledError } from './reportUnhandledError.ts';\nimport { symbolObservable } from './symbolObservable.ts';\nimport { AnyActorSystem, Clock, createSystem } from './system.ts';\n\nimport type {\n  ActorScope,\n  AnyActorLogic,\n  ConditionalRequired,\n  DoneActorEvent,\n  EventFromLogic,\n  InputFrom,\n  IsNotNever,\n  Snapshot,\n  SnapshotFrom\n} from './types.ts';\nimport {\n  ActorOptions,\n  ActorRef,\n  EventObject,\n  InteropSubscribable,\n  Observer,\n  Subscription\n} from './types.ts';\nimport { toObserver } from './utils.ts';\n\nexport const $$ACTOR_TYPE = 1;\n\nexport type SnapshotListener<TLogic extends AnyActorLogic> = (\n  snapshot: SnapshotFrom<TLogic>\n) => void;\n\nexport type EventListener<TEvent extends EventObject = EventObject> = (\n  event: TEvent\n) => void;\n\nexport type Listener = () => void;\nexport type ErrorListener = (error: any) => void;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nexport enum ProcessingStatus {\n  NotStarted = 0,\n  Running = 1,\n  Stopped = 2\n}\n\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: (id) => {\n      return clearTimeout(id);\n    }\n  } as Clock,\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change its behavior based on the events it receives, which can cause effects outside of the actor. When you run a state machine, it becomes an actor.\n */\nexport class Actor<TLogic extends AnyActorLogic>\n  implements ActorRef<SnapshotFrom<TLogic>, EventFromLogic<TLogic>>\n{\n  /**\n   * The current internal state of the actor.\n   */\n  private _snapshot!: SnapshotFrom<TLogic>;\n  /**\n   * The clock that is responsible for setting and clearing timeouts, such as delayed events and transitions.\n   */\n  public clock: Clock;\n  public options: Readonly<ActorOptions<TLogic>>;\n\n  /**\n   * The unique identifier for this actor relative to its parent.\n   */\n  public id: string;\n\n  private mailbox: Mailbox<EventFromLogic<TLogic>> = new Mailbox(\n    this._process.bind(this)\n  );\n\n  private observers: Set<Observer<SnapshotFrom<TLogic>>> = new Set();\n  private logger: (...args: any[]) => void;\n\n  /** @internal */\n  public _processingStatus: ProcessingStatus = ProcessingStatus.NotStarted;\n\n  // Actor Ref\n  public _parent?: ActorRef<any, any>;\n  /** @internal */\n  public _syncSnapshot?: boolean;\n  public ref: ActorRef<SnapshotFrom<TLogic>, EventFromLogic<TLogic>>;\n  // TODO: add typings for system\n  private _actorScope: ActorScope<\n    SnapshotFrom<TLogic>,\n    EventFromLogic<TLogic>,\n    any\n  >;\n\n  private _systemId: string | undefined;\n\n  /**\n   * The globally unique process ID for this invocation.\n   */\n  public sessionId: string;\n\n  /**\n   * The system to which this actor belongs.\n   */\n  public system: AnyActorSystem;\n  private _doneEvent?: DoneActorEvent;\n\n  public src: string | AnyActorLogic;\n\n  /**\n   * Creates a new actor instance for the given logic with the provided options, if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(\n    public logic: TLogic,\n    options?: ActorOptions<TLogic>\n  ) {\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n\n    const { clock, logger, parent, syncSnapshot, id, systemId, inspect } =\n      resolvedOptions;\n\n    this.system = parent\n      ? parent.system\n      : createSystem(this, {\n          clock\n        });\n\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = logger;\n    this.clock = clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions as ActorOptions<TLogic> &\n      typeof defaultOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: (fn) => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: (child) => {\n        if (child._parent !== this) {\n          throw new Error(\n            `Cannot stop child actor ${child.id} of ${this.id} because it is not a child`\n          );\n        }\n        (child as any)._stop();\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n\n    this._initState(options?.snapshot ?? options?.state);\n\n    if (systemId && (this._snapshot as any).status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n\n  private _initState(persistedState?: Snapshot<unknown>) {\n    try {\n      this._snapshot = persistedState\n        ? this.logic.restoreSnapshot\n          ? this.logic.restoreSnapshot(persistedState, this._actorScope)\n          : persistedState\n        : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      } as any;\n    }\n  }\n\n  // array of functions to defer\n  private _deferred: Array<() => void> = [];\n\n  private update(snapshot: SnapshotFrom<TLogic>, event: EventObject): void {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn: (typeof this._deferred)[number] | undefined;\n\n    while ((deferredFn = this._deferred.shift())) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...(snapshot as any),\n          status: 'error',\n          error: err\n        };\n      }\n    }\n\n    switch ((this._snapshot as any).status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(\n          this.id,\n          (this._snapshot as any).output\n        );\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n\n        break;\n      case 'error':\n        this._error((this._snapshot as any).error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor’s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor’s snapshot value when it is emitted. The observer can be:\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest snapshot\n   *\n   * @example\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   },\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object that has an `.unsubscribe()` method. You can call `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest snapshot, or an observer object whose `.next(snapshot)` method receives the latest snapshot\n   */\n  public subscribe(observer: Observer<SnapshotFrom<TLogic>>): Subscription;\n  public subscribe(\n    nextListener?: (snapshot: SnapshotFrom<TLogic>) => void,\n    errorListener?: (error: any) => void,\n    completeListener?: () => void\n  ): Subscription;\n  public subscribe(\n    nextListenerOrObserver?:\n      | ((snapshot: SnapshotFrom<TLogic>) => void)\n      | Observer<SnapshotFrom<TLogic>>,\n    errorListener?: (error: any) => void,\n    completeListener?: () => void\n  ): Subscription {\n    const observer = toObserver(\n      nextListenerOrObserver,\n      errorListener,\n      completeListener\n    );\n\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch ((this._snapshot as any).status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error': {\n          const err = (this._snapshot as any).error;\n          if (!observer.error) {\n            reportUnhandledError(err);\n          } else {\n            try {\n              observer.error(err);\n            } catch (err) {\n              reportUnhandledError(err);\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n\n  /**\n   * Starts the Actor from the initial state\n   */\n  public start(): this {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: (snapshot: Snapshot<unknown>) => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent!, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n\n    const status = (this._snapshot as any).status;\n\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(\n          this._snapshot,\n          initEvent as unknown as EventFromLogic<TLogic>\n        );\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error((this._snapshot as any).error);\n        return this;\n    }\n\n    if (!this._parent) {\n      this.system.start();\n    }\n\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...(this._snapshot as any),\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent as unknown as EventFromLogic<TLogic>);\n\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n\n    this.mailbox.start();\n\n    return this;\n  }\n\n  private _process(event: EventFromLogic<TLogic>) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(\n        this._snapshot,\n        event,\n        this._actorScope\n      );\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = { err };\n    }\n\n    if (caughtError) {\n      const { err } = caughtError;\n\n      this._snapshot = {\n        ...(this._snapshot as any),\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n\n  private _stop(): this {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({ type: XSTATE_STOP } as any);\n\n    return this;\n  }\n\n  /**\n   * Stops the Actor and unsubscribe all listeners.\n   */\n  public stop(): this {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  private _complete(): void {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  private _reportError(err: unknown): void {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  private _error(err: unknown): void {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(\n        this,\n        this._parent,\n        createErrorActorEvent(this.id, err)\n      );\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  private _stopProcedure(): this {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public _send(event: EventFromLogic<TLogic>) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      // do nothing\n      if (isDevelopment) {\n        const eventString = JSON.stringify(event);\n\n        console.warn(\n          `Event \"${event.type}\" was sent to stopped actor \"${this.id} (${this.sessionId})\". This actor has already reached its final state, and will not transition.\\nEvent: ${eventString}`\n        );\n      }\n      return;\n    }\n\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  public send(event: EventFromLogic<TLogic>) {\n    if (isDevelopment && typeof event === 'string') {\n      throw new Error(\n        `Only event objects may be sent to actors; use .send({ type: \"${event}\" }) instead`\n      );\n    }\n    this.system._relay(undefined, this, event);\n  }\n\n  private attachDevTools(): void {\n    const { devTools } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter =\n        typeof devTools === 'function' ? devTools : devToolsAdapter;\n\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  public toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from {@link Actor.getSnapshot}. Persisted state represents the internal state of the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   *\n   * @see https://stately.ai/docs/persistence\n   */\n  public getPersistedSnapshot(): Snapshot<unknown>;\n  public getPersistedSnapshot(options?: unknown): Snapshot<unknown> {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n\n  public [symbolObservable](): InteropSubscribable<SnapshotFrom<TLogic>> {\n    return this;\n  }\n\n  /**\n   * Read an actor’s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change.\n   * An actor may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with `fromCallback`, will not emit snapshots.\n   *\n   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  public getSnapshot(): SnapshotFrom<TLogic> {\n    if (isDevelopment && !this._snapshot) {\n      throw new Error(\n        `Snapshot can't be read while the actor initializes itself`\n      );\n    }\n    return this._snapshot;\n  }\n}\n\ntype RequiredOptions<TLogic extends AnyActorLogic> =\n  undefined extends InputFrom<TLogic> ? never : 'input';\n\n/**\n * Creates a new actor instance for the given actor logic with the provided options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that actor system.\n *\n * @example\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine actor logic creator, see {@link createMachine}. Other actor logic creators include {@link fromCallback}, {@link fromEventObservable}, {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nexport function createActor<TLogic extends AnyActorLogic>(\n  logic: TLogic,\n  ...[options]: ConditionalRequired<\n    [\n      options?: ActorOptions<TLogic> & {\n        [K in RequiredOptions<TLogic>]: unknown;\n      }\n    ],\n    IsNotNever<RequiredOptions<TLogic>>\n  >\n): Actor<TLogic> {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\n *\n * @deprecated Use `createActor` instead\n */\nexport const interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n */\nexport type Interpreter = typeof Actor;\n","import isDevelopment from '#is-development';\nimport {\n  AnyActorScope,\n  AnyActor,\n  AnyMachineSnapshot,\n  EventObject,\n  MachineContext,\n  ActionArgs,\n  ParameterizedObject\n} from '../types.ts';\n\ntype ResolvableSendId<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> =\n  | string\n  | ((\n      args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n      params: TParams\n    ) => string);\n\nfunction resolveCancel(\n  _: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  actionArgs: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  { sendId }: { sendId: ResolvableSendId<any, any, any, any> }\n) {\n  const resolvedSendId =\n    typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, resolvedSendId];\n}\n\nfunction executeCancel(actorScope: AnyActorScope, resolvedSendId: string) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, resolvedSendId);\n  });\n}\n\nexport interface CancelAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The canceled `sendTo(...)` action\n * will not send its event or execute, unless the `delay` has already elapsed before `cancel(...)` is called.\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n * \n * @example\n  ```ts\n  import { createMachine, sendTo, cancel } from 'xstate';\n\n  const machine = createMachine({\n    // ...\n    on: {\n      sendEvent: {\n        actions: sendTo('some-actor', { type: 'someEvent' }, {\n          id: 'some-id',\n          delay: 1000\n        })\n      },\n      cancelEvent: {\n        actions: cancel('some-id')\n      }\n    }\n  });\n  ```\n */\nexport function cancel<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n>(\n  sendId: ResolvableSendId<TContext, TExpressionEvent, TParams, TEvent>\n): CancelAction<TContext, TExpressionEvent, TParams, TEvent> {\n  function cancel(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n\n  return cancel;\n}\n","import isDevelopment from '#is-development';\nimport { cloneMachineSnapshot } from '../State.ts';\nimport { createErrorActorEvent } from '../eventUtils.ts';\nimport { ProcessingStatus, createActor } from '../createActor.ts';\nimport {\n  ActionArgs,\n  AnyActorScope,\n  AnyActorRef,\n  AnyActor,\n  AnyMachineSnapshot,\n  EventObject,\n  MachineContext,\n  ParameterizedObject,\n  AnyActorLogic,\n  ProvidedActor,\n  IsLiteralString,\n  InputFrom,\n  UnifiedArg,\n  Mapper,\n  RequiredActorOptions,\n  ConditionalRequired,\n  IsNotNever\n} from '../types.ts';\nimport { resolveReferencedActor } from '../utils.ts';\n\ntype ResolvableActorId<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TId extends string | undefined\n> = TId | ((args: UnifiedArg<TContext, TExpressionEvent, TEvent>) => TId);\n\nfunction resolveSpawn(\n  actorScope: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  actionArgs: ActionArgs<any, any, any>,\n  _actionParams: ParameterizedObject['params'] | undefined,\n  {\n    id,\n    systemId,\n    src,\n    input,\n    syncSnapshot\n  }: {\n    id: ResolvableActorId<MachineContext, EventObject, EventObject, string>;\n    systemId: string | undefined;\n    src: AnyActorLogic | string;\n    input?: unknown;\n    syncSnapshot: boolean;\n  }\n) {\n  const logic =\n    typeof src === 'string'\n      ? resolveReferencedActor(snapshot.machine, src)\n      : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n\n  let actorRef: AnyActorRef | undefined;\n\n  if (logic) {\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input:\n        typeof input === 'function'\n          ? input({\n              context: snapshot.context,\n              event: actionArgs.event,\n              self: actorScope.self\n            })\n          : input\n    });\n  }\n\n  if (isDevelopment && !actorRef) {\n    console.warn(\n      `Actor type '${src}' not found in machine '${actorScope.id}'.`\n    );\n  }\n  return [\n    cloneMachineSnapshot(snapshot, {\n      children: {\n        ...snapshot.children,\n        [resolvedId]: actorRef!\n      }\n    }),\n    {\n      id,\n      actorRef\n    }\n  ];\n}\n\nfunction executeSpawn(\n  actorScope: AnyActorScope,\n  { id, actorRef }: { id: string; actorRef: AnyActorRef }\n) {\n  if (!actorRef) {\n    return;\n  }\n\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\n\nexport interface SpawnAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n  _out_TActor?: TActor;\n}\n\ninterface SpawnActionOptions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> {\n  id?: ResolvableActorId<TContext, TExpressionEvent, TEvent, TActor['id']>;\n  systemId?: string;\n  input?:\n    | Mapper<TContext, TEvent, InputFrom<TActor['logic']>, TEvent>\n    | InputFrom<TActor['logic']>;\n  syncSnapshot?: boolean;\n}\n\ntype DistributeActors<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> = TActor extends any\n  ? ConditionalRequired<\n      [\n        src: TActor['src'],\n        options?: SpawnActionOptions<\n          TContext,\n          TExpressionEvent,\n          TEvent,\n          TActor\n        > & {\n          [K in RequiredActorOptions<TActor>]: unknown;\n        }\n      ],\n      IsNotNever<RequiredActorOptions<TActor>>\n    >\n  : never;\n\ntype SpawnArguments<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> = IsLiteralString<TActor['src']> extends true\n  ? DistributeActors<TContext, TExpressionEvent, TEvent, TActor>\n  : [\n      src: string | AnyActorLogic,\n      options?: {\n        id?: ResolvableActorId<TContext, TExpressionEvent, TEvent, string>;\n        systemId?: string;\n        input?: unknown;\n        syncSnapshot?: boolean;\n      }\n    ];\n\nexport function spawnChild<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n>(\n  ...[\n    src,\n    { id, systemId, input, syncSnapshot = false } = {} as any\n  ]: SpawnArguments<TContext, TExpressionEvent, TEvent, TActor>\n): SpawnAction<TContext, TExpressionEvent, TParams, TEvent, TActor> {\n  function spawnChild(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  spawnChild.type = 'snapshot.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n\n  return spawnChild;\n}\n","import isDevelopment from '#is-development';\nimport { cloneMachineSnapshot } from '../State.ts';\nimport { ProcessingStatus } from '../createActor.ts';\nimport {\n  ActionArgs,\n  ActorRef,\n  AnyActorScope,\n  AnyMachineSnapshot,\n  EventObject,\n  MachineContext,\n  ParameterizedObject\n} from '../types.ts';\n\ntype ResolvableActorRef<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> =\n  | string\n  | ActorRef<any, any>\n  | ((\n      args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n      params: TParams\n    ) => ActorRef<any, any> | string);\n\nfunction resolveStop(\n  _: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  args: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  { actorRef }: { actorRef: ResolvableActorRef<any, any, any, any> }\n) {\n  const actorRefOrString =\n    typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef: ActorRef<any, any> | undefined =\n    typeof actorRefOrString === 'string'\n      ? snapshot.children[actorRefOrString]\n      : actorRefOrString;\n\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = { ...children };\n    delete children[resolvedActorRef.id];\n  }\n  return [\n    cloneMachineSnapshot(snapshot, {\n      children\n    }),\n    resolvedActorRef\n  ];\n}\nfunction executeStop(\n  actorScope: AnyActorScope,\n  actorRef: ActorRef<any, any> | undefined\n) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n\nexport interface StopAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nexport function stopChild<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n>(\n  actorRef: ResolvableActorRef<TContext, TExpressionEvent, TParams, TEvent>\n): StopAction<TContext, TExpressionEvent, TParams, TEvent> {\n  function stop(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n */\nexport const stop = stopChild;\n","import isDevelopment from '#is-development';\nimport type {\n  EventObject,\n  StateValue,\n  MachineContext,\n  ParameterizedObject,\n  AnyMachineSnapshot,\n  NoRequiredParams,\n  NoInfer,\n  WithDynamicParams,\n  Identity,\n  Elements\n} from './types.ts';\nimport { isStateId } from './stateUtils.ts';\n\ntype SingleGuardArg<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TGuardArg\n> = [TGuardArg] extends [{ type: string }]\n  ? Identity<TGuardArg>\n  : [TGuardArg] extends [string]\n    ? TGuardArg\n    : GuardPredicate<TContext, TExpressionEvent, TParams, ParameterizedObject>;\n\ntype NormalizeGuardArg<TGuardArg> = TGuardArg extends { type: string }\n  ? Identity<TGuardArg> & { params: unknown }\n  : TGuardArg extends string\n    ? { type: TGuardArg; params: undefined }\n    : '_out_TGuard' extends keyof TGuardArg\n      ? TGuardArg['_out_TGuard'] & ParameterizedObject\n      : never;\n\ntype NormalizeGuardArgArray<TArg extends unknown[]> = Elements<{\n  [K in keyof TArg]: NormalizeGuardArg<TArg[K]>;\n}>;\n\nexport type GuardPredicate<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TGuard extends ParameterizedObject\n> = {\n  (args: GuardArgs<TContext, TExpressionEvent>, params: TParams): boolean;\n  _out_TGuard?: TGuard;\n};\n\nexport interface GuardArgs<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject\n> {\n  context: TContext;\n  event: TExpressionEvent;\n}\n\nexport type Guard<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TGuard extends ParameterizedObject\n> =\n  | NoRequiredParams<TGuard>\n  | WithDynamicParams<TContext, TExpressionEvent, TGuard>\n  | GuardPredicate<TContext, TExpressionEvent, TParams, TGuard>;\n\nexport type UnknownGuard = UnknownReferencedGuard | UnknownInlineGuard;\n\ntype UnknownReferencedGuard = Guard<\n  MachineContext,\n  EventObject,\n  ParameterizedObject['params'],\n  ParameterizedObject\n>;\n\ntype UnknownInlineGuard = Guard<\n  MachineContext,\n  EventObject,\n  undefined,\n  ParameterizedObject\n>;\n\ninterface BuiltinGuard {\n  (): boolean;\n  check: (\n    snapshot: AnyMachineSnapshot,\n    guardArgs: GuardArgs<any, any>,\n    params: unknown\n  ) => boolean;\n}\n\nfunction checkStateIn(\n  snapshot: AnyMachineSnapshot,\n  _: GuardArgs<any, any>,\n  { stateValue }: { stateValue: StateValue }\n) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some((sn) => sn === target);\n  }\n\n  return snapshot.matches(stateValue);\n}\n\nexport function stateIn<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined\n>(\n  stateValue: StateValue\n): GuardPredicate<\n  TContext,\n  TExpressionEvent,\n  TParams,\n  any // TODO: recheck if we could replace this with something better here\n> {\n  function stateIn(\n    args: GuardArgs<TContext, TExpressionEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n    return false;\n  }\n\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n\n  return stateIn;\n}\n\nfunction checkNot(\n  snapshot: AnyMachineSnapshot,\n  { context, event }: GuardArgs<any, any>,\n  { guards }: { guards: readonly UnknownGuard[] }\n) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it evaluates to `false`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, not } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => false\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: not('someNamedGuard'),\n        actions: () => {\n          // will be executed if guard in `not(...)`\n          // evaluates to `false`\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard \n */\nexport function not<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TArg\n>(\n  guard: SingleGuardArg<TContext, TExpressionEvent, unknown, TArg>\n): GuardPredicate<\n  TContext,\n  TExpressionEvent,\n  unknown,\n  NormalizeGuardArg<NoInfer<TArg>>\n> {\n  function not(args: GuardArgs<TContext, TExpressionEvent>, params: unknown) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n    return false;\n  }\n\n  not.check = checkNot;\n  not.guards = [guard];\n\n  return not;\n}\n\nfunction checkAnd(\n  snapshot: AnyMachineSnapshot,\n  { context, event }: GuardArgs<any, any>,\n  { guards }: { guards: readonly UnknownGuard[] }\n) {\n  return guards.every((guard) =>\n    evaluateGuard(guard, context, event, snapshot)\n  );\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, and } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => true\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: and([\n          ({ context }) => context.value > 0,\n          'someNamedGuard'\n        ]),\n        actions: () => {\n          // will be executed if all guards in `and(...)`\n          // evaluate to true\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard action object\n */\nexport function and<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TArg extends unknown[]\n>(\n  guards: readonly [\n    ...{\n      [K in keyof TArg]: SingleGuardArg<\n        TContext,\n        TExpressionEvent,\n        unknown,\n        TArg[K]\n      >;\n    }\n  ]\n): GuardPredicate<\n  TContext,\n  TExpressionEvent,\n  unknown,\n  NormalizeGuardArgArray<NoInfer<TArg>>\n> {\n  function and(args: GuardArgs<TContext, TExpressionEvent>, params: unknown) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n    return false;\n  }\n\n  and.check = checkAnd;\n  and.guards = guards;\n\n  return and;\n}\n\nfunction checkOr(\n  snapshot: AnyMachineSnapshot,\n  { context, event }: GuardArgs<any, any>,\n  { guards }: { guards: readonly UnknownGuard[] }\n) {\n  return guards.some((guard) => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, or } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => true\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: or([\n          ({ context }) => context.value > 0,\n          'someNamedGuard'\n        ]),\n        actions: () => {\n          // will be executed if any of the guards in `or(...)`\n          // evaluate to true\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard action object\n */\nexport function or<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TArg extends unknown[]\n>(\n  guards: readonly [\n    ...{\n      [K in keyof TArg]: SingleGuardArg<\n        TContext,\n        TExpressionEvent,\n        unknown,\n        TArg[K]\n      >;\n    }\n  ]\n): GuardPredicate<\n  TContext,\n  TExpressionEvent,\n  unknown,\n  NormalizeGuardArgArray<NoInfer<TArg>>\n> {\n  function or(args: GuardArgs<TContext, TExpressionEvent>, params: unknown) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n    return false;\n  }\n\n  or.check = checkOr;\n  or.guards = guards;\n\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nexport function evaluateGuard<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject\n>(\n  guard: UnknownGuard | UnknownInlineGuard,\n  context: TContext,\n  event: TExpressionEvent,\n  snapshot: AnyMachineSnapshot\n): boolean {\n  const { machine } = snapshot;\n  const isInline = typeof guard === 'function';\n\n  const resolved = isInline\n    ? guard\n    : machine.implementations.guards[\n        typeof guard === 'string' ? guard : guard.type\n      ];\n\n  if (!isInline && !resolved) {\n    throw new Error(\n      `Guard '${\n        typeof guard === 'string' ? guard : guard.type\n      }' is not implemented.'.`\n    );\n  }\n\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved!, context, event, snapshot);\n  }\n\n  const guardArgs = {\n    context,\n    event\n  };\n\n  const guardParams =\n    isInline || typeof guard === 'string'\n      ? undefined\n      : 'params' in guard\n        ? typeof guard.params === 'function'\n          ? guard.params({ context, event })\n          : guard.params\n        : undefined;\n\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams as never);\n  }\n\n  const builtinGuard = resolved as unknown as BuiltinGuard;\n\n  return builtinGuard.check(\n    snapshot,\n    guardArgs,\n    resolved // this holds all params\n  );\n}\n","import isDevelopment from '#is-development';\nimport { MachineSnapshot, cloneMachineSnapshot } from './State.ts';\nimport type { StateNode } from './StateNode.ts';\nimport { raise } from './actions.ts';\nimport { createAfterEvent, createDoneStateEvent } from './eventUtils.ts';\nimport { cancel } from './actions/cancel.ts';\nimport { spawnChild } from './actions/spawnChild.ts';\nimport { stopChild } from './actions/stopChild.ts';\nimport {\n  XSTATE_INIT,\n  NULL_EVENT,\n  STATE_DELIMITER,\n  STATE_IDENTIFIER,\n  XSTATE_STOP,\n  WILDCARD\n} from './constants.ts';\nimport { evaluateGuard } from './guards.ts';\nimport {\n  ActionArgs,\n  AnyEventObject,\n  AnyHistoryValue,\n  AnyMachineSnapshot,\n  AnyStateNode,\n  AnyTransitionDefinition,\n  DelayExpr,\n  DelayedTransitionDefinition,\n  EventObject,\n  HistoryValue,\n  InitialTransitionConfig,\n  InitialTransitionDefinition,\n  MachineContext,\n  StateValue,\n  StateValueMap,\n  TransitionDefinition,\n  TODO,\n  UnknownAction,\n  ParameterizedObject,\n  ActionFunction,\n  AnyTransitionConfig,\n  ProvidedActor,\n  AnyActorScope\n} from './types.ts';\nimport {\n  resolveOutput,\n  normalizeTarget,\n  toArray,\n  toStatePath,\n  toTransitionConfigArray,\n  isErrorActorEvent\n} from './utils.ts';\nimport { ProcessingStatus } from './createActor.ts';\n\ntype StateNodeIterable<\n  TContext extends MachineContext,\n  TE extends EventObject\n> = Iterable<StateNode<TContext, TE>>;\ntype AnyStateNodeIterable = StateNodeIterable<any, any>;\n\ntype AdjList = Map<AnyStateNode, Array<AnyStateNode>>;\n\nexport const isAtomicStateNode = (stateNode: StateNode<any, any>) =>\n  stateNode.type === 'atomic' || stateNode.type === 'final';\n\nfunction getChildren<TContext extends MachineContext, TE extends EventObject>(\n  stateNode: StateNode<TContext, TE>\n): Array<StateNode<TContext, TE>> {\n  return Object.values(stateNode.states).filter((sn) => sn.type !== 'history');\n}\n\nfunction getProperAncestors(\n  stateNode: AnyStateNode,\n  toStateNode: AnyStateNode | undefined\n): Array<typeof stateNode> {\n  const ancestors: Array<typeof stateNode> = [];\n\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n\n  return ancestors;\n}\n\nexport function getAllStateNodes(\n  stateNodes: Iterable<AnyStateNode>\n): Set<AnyStateNode> {\n  const nodeSet = new Set(stateNodes);\n\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s)!.length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach((sn) =>\n        nodeSet.add(sn)\n      );\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n\n  return nodeSet;\n}\n\nfunction getValueFromAdj(baseNode: AnyStateNode, adjList: AdjList): StateValue {\n  const childStateNodes = adjList.get(baseNode);\n\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n\n  const stateValue: StateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n\n  return stateValue;\n}\n\nexport function getAdjList<\n  TContext extends MachineContext,\n  TE extends EventObject\n>(stateNodes: StateNodeIterable<TContext, TE>): AdjList {\n  const adjList: AdjList = new Map();\n\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n\n      adjList.get(s.parent)!.push(s);\n    }\n  }\n\n  return adjList;\n}\n\nexport function getStateValue(\n  rootNode: AnyStateNode,\n  stateNodes: AnyStateNodeIterable\n): StateValue {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\n\nexport function isInFinalState(\n  stateNodeSet: Set<AnyStateNode>,\n  stateNode: AnyStateNode\n): boolean {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(\n      (s) => s.type === 'final' && stateNodeSet.has(s)\n    );\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every((sn) =>\n      isInFinalState(stateNodeSet, sn)\n    );\n  }\n\n  return stateNode.type === 'final';\n}\n\nexport const isStateId = (str: string) => str[0] === STATE_IDENTIFIER;\n\nexport function getCandidates<TEvent extends EventObject>(\n  stateNode: StateNode<any, TEvent>,\n  receivedEventType: TEvent['type']\n): Array<TransitionDefinition<any, TEvent>> {\n  const candidates =\n    stateNode.transitions.get(receivedEventType) ||\n    [...stateNode.transitions.keys()]\n      .filter((eventDescriptor) => {\n        // check if transition is a wildcard transition,\n        // which matches any non-transient events\n        if (eventDescriptor === WILDCARD) {\n          return true;\n        }\n\n        if (!eventDescriptor.endsWith('.*')) {\n          return false;\n        }\n\n        if (isDevelopment && /.*\\*.+/.test(eventDescriptor)) {\n          console.warn(\n            `Wildcards can only be the last token of an event descriptor (e.g., \"event.*\") or the entire event descriptor (\"*\"). Check the \"${eventDescriptor}\" event.`\n          );\n        }\n\n        const partialEventTokens = eventDescriptor.split('.');\n        const eventTokens = receivedEventType.split('.');\n\n        for (\n          let tokenIndex = 0;\n          tokenIndex < partialEventTokens.length;\n          tokenIndex++\n        ) {\n          const partialEventToken = partialEventTokens[tokenIndex];\n          const eventToken = eventTokens[tokenIndex];\n\n          if (partialEventToken === '*') {\n            const isLastToken = tokenIndex === partialEventTokens.length - 1;\n\n            if (isDevelopment && !isLastToken) {\n              console.warn(\n                `Infix wildcards in transition events are not allowed. Check the \"${eventDescriptor}\" transition.`\n              );\n            }\n\n            return isLastToken;\n          }\n\n          if (partialEventToken !== eventToken) {\n            return false;\n          }\n        }\n\n        return true;\n      })\n      .sort((a, b) => b.length - a.length)\n      .flatMap((key) => stateNode.transitions.get(key)!);\n\n  return candidates;\n}\n\n/**\n * All delayed transitions from the config.\n */\nexport function getDelayedTransitions(\n  stateNode: AnyStateNode\n): Array<DelayedTransitionDefinition<MachineContext, EventObject>> {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n\n  const mutateEntryExit = (delay: string | number, i: number) => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, { id: eventType, delay }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n\n  const delayedTransitions = Object.keys(afterConfig).flatMap((delay, i) => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition =\n      typeof configTransition === 'string'\n        ? { target: configTransition }\n        : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay, i);\n    return toArray(resolvedTransition).map((transition) => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map((delayedTransition) => {\n    const { delay } = delayedTransition;\n    return {\n      ...formatTransition(\n        stateNode,\n        delayedTransition.event,\n        delayedTransition\n      ),\n      delay\n    };\n  });\n}\n\nexport function formatTransition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  descriptor: string,\n  transitionConfig: AnyTransitionConfig\n): AnyTransitionDefinition {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n\n  // TODO: should this be part of a lint rule instead?\n  if (isDevelopment && (transitionConfig as any).cond) {\n    throw new Error(\n      `State \"${stateNode.id}\" has declared \\`cond\\` for one of its transitions. This property has been renamed to \\`guard\\`. Please update your code.`\n    );\n  }\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard as never,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map((t) => `#${t.id}`) : undefined\n    })\n  };\n\n  return transition;\n}\n\nexport function formatTransitions<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode\n): Map<string, TransitionDefinition<TContext, TEvent>[]> {\n  const transitions = new Map<\n    string,\n    TransitionDefinition<TContext, AnyEventObject>[]\n  >();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error(\n          'Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.'\n        );\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(\n        descriptor,\n        toTransitionConfigArray(transitionsConfig).map((t) =>\n          formatTransition(stateNode, descriptor, t)\n        )\n      );\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(\n      descriptor,\n      toTransitionConfigArray(stateNode.config.onDone).map((t) =>\n        formatTransition(stateNode, descriptor, t)\n      )\n    );\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(\n        descriptor,\n        toTransitionConfigArray(invokeDef.onDone).map((t) =>\n          formatTransition(stateNode, descriptor, t)\n        )\n      );\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(\n        descriptor,\n        toTransitionConfigArray(invokeDef.onError).map((t) =>\n          formatTransition(stateNode, descriptor, t)\n        )\n      );\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(\n        descriptor,\n        toTransitionConfigArray(invokeDef.onSnapshot).map((t) =>\n          formatTransition(stateNode, descriptor, t)\n        )\n      );\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions as Map<string, TransitionDefinition<TContext, any>[]>;\n}\n\nexport function formatInitialTransition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  _target:\n    | string\n    | undefined\n    | InitialTransitionConfig<TContext, TEvent, TODO, TODO, TODO, TODO>\n): InitialTransitionDefinition<TContext, TEvent> {\n  const resolvedTarget =\n    typeof _target === 'string'\n      ? stateNode.states[_target]\n      : _target\n        ? stateNode.states[_target.target]\n        : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(\n      `Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`\n    );\n  }\n  const transition: InitialTransitionDefinition<TContext, TEvent> = {\n    source: stateNode,\n    actions:\n      !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null as any,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n\n  return transition;\n}\n\nexport function resolveTarget(\n  stateNode: AnyStateNode,\n  targets: ReadonlyArray<string | AnyStateNode> | undefined\n): ReadonlyArray<AnyStateNode> | undefined {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map((target) => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(\n          stateNode.parent,\n          resolvedTarget\n        );\n        return targetStateNode;\n      } catch (err: any) {\n        throw new Error(\n          `Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`\n      );\n    }\n  });\n}\n\nfunction resolveHistoryDefaultTransition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(stateNode: AnyStateNode & { type: 'history' }) {\n  const normalizedTarget = normalizeTarget<TContext, TEvent>(\n    stateNode.config.target\n  );\n  if (!normalizedTarget) {\n    return stateNode.parent!.initial;\n  }\n  return {\n    target: normalizedTarget.map((t) =>\n      typeof t === 'string' ? getStateNodeByPath(stateNode.parent!, t) : t\n    )\n  };\n}\n\nfunction isHistoryNode(\n  stateNode: AnyStateNode\n): stateNode is AnyStateNode & { type: 'history' } {\n  return stateNode.type === 'history';\n}\n\nexport function getInitialStateNodesWithTheirAncestors(\n  stateNode: AnyStateNode\n) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\n\nexport function getInitialStateNodes(stateNode: AnyStateNode) {\n  const set = new Set<AnyStateNode>();\n\n  function iter(descStateNode: AnyStateNode): void {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n\n  iter(stateNode);\n\n  return set;\n}\n/**\n * Returns the child state node from its relative `stateKey`, or throws.\n */\nexport function getStateNode(\n  stateNode: AnyStateNode,\n  stateKey: string\n): AnyStateNode {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(\n      `Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`\n    );\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(\n      `Child state '${stateKey}' does not exist on '${stateNode.id}'`\n    );\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nexport function getStateNodeByPath(\n  stateNode: AnyStateNode,\n  statePath: string | string[]\n): AnyStateNode {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch (e) {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode: AnyStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift()!;\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nexport function getStateNodes<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(stateNode: AnyStateNode, stateValue: StateValue): Array<AnyStateNode> {\n  if (typeof stateValue === 'string') {\n    return [stateNode, stateNode.states[stateValue]];\n  }\n\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes: Array<AnyStateNode> = childStateKeys\n    .map((subStateKey) => getStateNode(stateNode, subStateKey))\n    .filter(Boolean);\n\n  return [stateNode.machine.root, stateNode].concat(\n    childStateNodes,\n    childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n      const subStateNode = getStateNode(stateNode, subStateKey);\n      if (!subStateNode) {\n        return allSubStateNodes;\n      }\n      const subStateNodes = getStateNodes(\n        subStateNode,\n        stateValue[subStateKey]!\n      );\n\n      return allSubStateNodes.concat(subStateNodes);\n    }, [] as Array<AnyStateNode>)\n  );\n}\n\nexport function transitionAtomicNode<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  stateValue: string,\n  snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any>,\n  event: TEvent\n): Array<TransitionDefinition<TContext, TEvent>> | undefined {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n\n  return next;\n}\n\nexport function transitionCompoundNode<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  stateValue: StateValueMap,\n  snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any>,\n  event: TEvent\n): Array<TransitionDefinition<TContext, TEvent>> | undefined {\n  const subStateKeys = Object.keys(stateValue);\n\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(\n    childStateNode,\n    stateValue[subStateKeys[0]]!,\n    snapshot,\n    event\n  );\n\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n\n  return next;\n}\n\nexport function transitionParallelNode<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  stateValue: StateValueMap,\n  snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any>,\n  event: TEvent\n): Array<TransitionDefinition<TContext, TEvent>> | undefined {\n  const allInnerTransitions: Array<TransitionDefinition<TContext, TEvent>> = [];\n\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n\n    if (!subStateValue) {\n      continue;\n    }\n\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(\n      subStateNode,\n      subStateValue,\n      snapshot,\n      event\n    );\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n\n  return allInnerTransitions;\n}\n\nexport function transitionNode<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  stateValue: StateValue,\n  snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any, any>,\n  event: TEvent\n): Array<TransitionDefinition<TContext, TEvent>> | undefined {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\n\nfunction getHistoryNodes(stateNode: AnyStateNode): Array<AnyStateNode> {\n  return Object.keys(stateNode.states)\n    .map((key) => stateNode.states[key])\n    .filter((sn) => sn.type === 'history');\n}\n\nfunction isDescendant(\n  childStateNode: AnyStateNode,\n  parentStateNode: AnyStateNode\n): boolean {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n\n  return marker.parent === parentStateNode;\n}\n\nfunction getPathFromRootToNode(stateNode: AnyStateNode): Array<AnyStateNode> {\n  const path: Array<AnyStateNode> = [];\n  let marker = stateNode.parent;\n\n  while (marker) {\n    path.unshift(marker);\n    marker = marker.parent;\n  }\n\n  return path;\n}\n\nfunction hasIntersection<T>(s1: Iterable<T>, s2: Iterable<T>): boolean {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function removeConflictingTransitions(\n  enabledTransitions: Array<AnyTransitionDefinition>,\n  stateNodeSet: Set<AnyStateNode>,\n  historyValue: AnyHistoryValue\n): Array<AnyTransitionDefinition> {\n  const filteredTransitions = new Set<AnyTransitionDefinition>();\n\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set<AnyTransitionDefinition>();\n    for (const t2 of filteredTransitions) {\n      if (\n        hasIntersection(\n          computeExitSet([t1], stateNodeSet, historyValue),\n          computeExitSet([t2], stateNodeSet, historyValue)\n        )\n      ) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n\n  return Array.from(filteredTransitions);\n}\n\nfunction findLeastCommonAncestor(\n  stateNodes: Array<AnyStateNode>\n): AnyStateNode | undefined {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every((sn) => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\n\nfunction getEffectiveTargetStates(\n  transition: Pick<AnyTransitionDefinition, 'target'>,\n  historyValue: AnyHistoryValue\n): Array<AnyStateNode> {\n  if (!transition.target) {\n    return [];\n  }\n\n  const targets = new Set<AnyStateNode>();\n\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(\n          resolveHistoryDefaultTransition(targetNode),\n          historyValue\n        )) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n\n  return [...targets];\n}\n\nfunction getTransitionDomain(\n  transition: AnyTransitionDefinition,\n  historyValue: AnyHistoryValue\n): AnyStateNode | undefined {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n\n  if (!targetStates) {\n    return;\n  }\n\n  if (\n    !transition.reenter &&\n    targetStates.every(\n      (target) =>\n        target === transition.source || isDescendant(target, transition.source)\n    )\n  ) {\n    return transition.source;\n  }\n\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n\n  return transition.source.machine.root;\n}\n\nfunction computeExitSet(\n  transitions: AnyTransitionDefinition[],\n  stateNodeSet: Set<AnyStateNode>,\n  historyValue: AnyHistoryValue\n): Array<AnyStateNode> {\n  const statesToExit = new Set<AnyStateNode>();\n\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain!)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n\n  return [...statesToExit];\n}\n\nfunction areStateNodeCollectionsEqual(\n  prevStateNodes: StateNode<any, any>[],\n  nextStateNodeSet: Set<StateNode<any, any>>\n) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * https://www.w3.org/TR/scxml/#microstepProcedure\n */\nexport function microstep<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  transitions: Array<AnyTransitionDefinition>,\n  currentSnapshot: AnyMachineSnapshot,\n  actorScope: AnyActorScope,\n  event: AnyEventObject,\n  isInitial: boolean,\n  internalQueue: Array<AnyEventObject>\n): AnyMachineSnapshot {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n\n  const filteredTransitions = removeConflictingTransitions(\n    transitions,\n    mutStateNodeSet,\n    historyValue\n  );\n\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(\n      nextState,\n      event,\n      actorScope,\n      filteredTransitions,\n      mutStateNodeSet,\n      historyValue,\n      internalQueue\n    );\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(\n    nextState,\n    event,\n    actorScope,\n    filteredTransitions.flatMap((t) => t.actions),\n    internalQueue\n  );\n\n  // Enter states\n  nextState = enterStates(\n    nextState,\n    event,\n    actorScope,\n    filteredTransitions,\n    mutStateNodeSet,\n    internalQueue,\n    historyValue,\n    isInitial\n  );\n\n  const nextStateNodes = [...mutStateNodeSet];\n\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(\n      nextState,\n      event,\n      actorScope,\n      nextStateNodes\n        .sort((a, b) => b.order - a.order)\n        .flatMap((state) => state.exit),\n      internalQueue\n    );\n  }\n\n  try {\n    if (\n      historyValue === currentSnapshot.historyValue &&\n      areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)\n    ) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\n\nfunction getMachineOutput(\n  snapshot: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope,\n  rootNode: AnyStateNode,\n  rootCompletionNode: AnyStateNode\n) {\n  if (!rootNode.output) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(\n    rootCompletionNode.id,\n    rootCompletionNode.output && rootCompletionNode.parent\n      ? resolveOutput(\n          rootCompletionNode.output,\n          snapshot.context,\n          event,\n          actorScope.self\n        )\n      : undefined\n  );\n  return resolveOutput(\n    rootNode.output,\n    snapshot.context,\n    doneStateEvent,\n    actorScope.self\n  );\n}\n\nfunction enterStates(\n  currentSnapshot: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope,\n  filteredTransitions: AnyTransitionDefinition[],\n  mutStateNodeSet: Set<AnyStateNode>,\n  internalQueue: AnyEventObject[],\n  historyValue: HistoryValue<any, any>,\n  isInitial: boolean\n) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set<AnyStateNode>();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set<AnyStateNode>();\n  computeEntrySet(\n    filteredTransitions,\n    historyValue,\n    statesForDefaultEntry,\n    statesToEnter\n  );\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n\n  const completedNodes = new Set();\n\n  for (const stateNodeToEnter of [...statesToEnter].sort(\n    (a, b) => a.order - b.order\n  )) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions: UnknownAction[] = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(\n        spawnChild(invokeDef.src, {\n          ...invokeDef,\n          syncSnapshot: !!invokeDef.onSnapshot\n        })\n      );\n    }\n\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial!.actions;\n      actions.push(...initialActions);\n    }\n\n    nextSnapshot = resolveActionsAndContext(\n      nextSnapshot,\n      event,\n      actorScope,\n      actions,\n      internalQueue,\n      stateNodeToEnter.invoke.map((invokeDef) => invokeDef.id)\n    );\n\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n\n      let ancestorMarker =\n        parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n\n      if (parent?.type === 'compound') {\n        internalQueue.push(\n          createDoneStateEvent(\n            parent!.id,\n            stateNodeToEnter.output\n              ? resolveOutput(\n                  stateNodeToEnter.output,\n                  nextSnapshot.context,\n                  event,\n                  actorScope.self\n                )\n              : undefined\n          )\n        );\n      }\n      while (\n        ancestorMarker?.type === 'parallel' &&\n        !completedNodes.has(ancestorMarker) &&\n        isInFinalState(mutStateNodeSet, ancestorMarker)\n      ) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(\n          nextSnapshot,\n          event,\n          actorScope,\n          nextSnapshot.machine.root,\n          rootCompletionNode\n        )\n      });\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction computeEntrySet(\n  transitions: Array<AnyTransitionDefinition>,\n  historyValue: HistoryValue<any, any>,\n  statesForDefaultEntry: Set<AnyStateNode>,\n  statesToEnter: Set<AnyStateNode>\n) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n\n    for (const s of t.target || []) {\n      if (\n        !isHistoryNode(s) &&\n        // if the target is different than the source then it will *definitely* be entered\n        (t.source !== s ||\n          // we know that the domain can't lie within the source\n          // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n          t.source !== domain ||\n          // reentering transitions always enter the target, even if it's the source itself\n          t.reenter)\n      ) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(\n        s,\n        historyValue,\n        statesForDefaultEntry,\n        statesToEnter\n      );\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain!);\n      }\n      addAncestorStatesToEnter(\n        statesToEnter,\n        historyValue,\n        statesForDefaultEntry,\n        ancestors,\n        !t.source.parent && t.reenter ? undefined : domain\n      );\n    }\n  }\n}\n\nfunction addDescendantStatesToEnter<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(\n  stateNode: AnyStateNode,\n  historyValue: HistoryValue<any, any>,\n  statesForDefaultEntry: Set<AnyStateNode>,\n  statesToEnter: Set<AnyStateNode>\n) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n\n        addDescendantStatesToEnter(\n          s,\n          historyValue,\n          statesForDefaultEntry,\n          statesToEnter\n        );\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(\n          s,\n          stateNode.parent!,\n          statesToEnter,\n          historyValue,\n          statesForDefaultEntry\n        );\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition<\n        TContext,\n        TEvent\n      >(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n\n        addDescendantStatesToEnter(\n          s,\n          historyValue,\n          statesForDefaultEntry,\n          statesToEnter\n        );\n      }\n\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(\n          s,\n          stateNode.parent!,\n          statesToEnter,\n          historyValue,\n          statesForDefaultEntry\n        );\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(\n        initialState,\n        historyValue,\n        statesForDefaultEntry,\n        statesToEnter\n      );\n\n      addProperAncestorStatesToEnter(\n        initialState,\n        stateNode,\n        statesToEnter,\n        historyValue,\n        statesForDefaultEntry\n      );\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(\n          (sn) => !isHistoryNode(sn)\n        )) {\n          if (![...statesToEnter].some((s) => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(\n              child,\n              historyValue,\n              statesForDefaultEntry,\n              statesToEnter\n            );\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction addAncestorStatesToEnter(\n  statesToEnter: Set<AnyStateNode>,\n  historyValue: HistoryValue<any, any>,\n  statesForDefaultEntry: Set<AnyStateNode>,\n  ancestors: AnyStateNode[],\n  reentrancyDomain?: AnyStateNode\n) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter((sn) => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some((s) => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(\n            child,\n            historyValue,\n            statesForDefaultEntry,\n            statesToEnter\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction addProperAncestorStatesToEnter(\n  stateNode: AnyStateNode,\n  toStateNode: AnyStateNode | undefined,\n  statesToEnter: Set<AnyStateNode>,\n  historyValue: HistoryValue<any, any>,\n  statesForDefaultEntry: Set<AnyStateNode>\n) {\n  addAncestorStatesToEnter(\n    statesToEnter,\n    historyValue,\n    statesForDefaultEntry,\n    getProperAncestors(stateNode, toStateNode)\n  );\n}\n\nfunction exitStates(\n  currentSnapshot: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope,\n  transitions: AnyTransitionDefinition[],\n  mutStateNodeSet: Set<AnyStateNode>,\n  historyValue: HistoryValue<any, any>,\n  internalQueue: AnyEventObject[]\n) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(\n    transitions,\n    mutStateNodeSet,\n    historyValue\n  );\n\n  statesToExit.sort((a, b) => b.order - a.order);\n\n  let changedHistory: typeof historyValue | undefined;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate: (sn: AnyStateNode) => boolean;\n      if (historyNode.history === 'deep') {\n        predicate = (sn) =>\n          isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = (sn) => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= { ...historyValue };\n      changedHistory[historyNode.id] =\n        Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(\n      nextSnapshot,\n      event,\n      actorScope,\n      [...s.exit, ...s.invoke.map((def) => stopChild(def.id))],\n      internalQueue\n    );\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue] as const;\n}\n\ninterface BuiltinAction {\n  (): void;\n  resolve: (\n    actorScope: AnyActorScope,\n    snapshot: AnyMachineSnapshot,\n    actionArgs: ActionArgs<any, any, any>,\n    actionParams: ParameterizedObject['params'] | undefined,\n    action: unknown,\n    extra: unknown\n  ) => [\n    newState: AnyMachineSnapshot,\n    params: unknown,\n    actions?: UnknownAction[]\n  ];\n  retryResolve: (\n    actorScope: AnyActorScope,\n    snapshot: AnyMachineSnapshot,\n    params: unknown\n  ) => void;\n  execute: (actorScope: AnyActorScope, params: unknown) => void;\n}\n\nfunction resolveActionsAndContextWorker(\n  currentSnapshot: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope,\n  actions: UnknownAction[],\n  extra: {\n    internalQueue: AnyEventObject[];\n    deferredActorIds: string[] | undefined;\n  },\n  retries: (readonly [BuiltinAction, unknown])[] | undefined\n): AnyMachineSnapshot {\n  const { machine } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline\n      ? action\n      : // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n        // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n        // our logic below makes sure that we call those 2 \"variants\" correctly\n        (\n          machine.implementations.actions as Record<\n            string,\n            ActionFunction<\n              MachineContext,\n              EventObject,\n              EventObject,\n              ParameterizedObject['params'] | undefined,\n              ProvidedActor,\n              ParameterizedObject,\n              ParameterizedObject,\n              string\n            >\n          >\n        )[typeof action === 'string' ? action : action.type];\n\n    if (!resolvedAction) {\n      continue;\n    }\n\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n\n    const actionParams =\n      isInline || typeof action === 'string'\n        ? undefined\n        : 'params' in action\n          ? typeof action.params === 'function'\n            ? action.params({ context: intermediateSnapshot.context, event })\n            : action.params\n          : undefined;\n\n    if (!('resolve' in resolvedAction)) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        resolvedAction(actionArgs, actionParams);\n      } else {\n        actorScope.defer(() => {\n          resolvedAction(actionArgs, actionParams);\n        });\n      }\n      continue;\n    }\n\n    const builtinAction = resolvedAction as BuiltinAction;\n\n    const [nextState, params, actions] = builtinAction.resolve(\n      actorScope,\n      intermediateSnapshot,\n      actionArgs,\n      actionParams,\n      resolvedAction, // this holds all params\n      extra\n    );\n    intermediateSnapshot = nextState;\n\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n\n    if ('execute' in builtinAction) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        builtinAction.execute(actorScope, params);\n      } else {\n        actorScope.defer(builtinAction.execute.bind(null, actorScope, params));\n      }\n    }\n\n    if (actions) {\n      intermediateSnapshot = resolveActionsAndContextWorker(\n        intermediateSnapshot,\n        event,\n        actorScope,\n        actions,\n        extra,\n        retries\n      );\n    }\n  }\n\n  return intermediateSnapshot;\n}\n\nexport function resolveActionsAndContext(\n  currentSnapshot: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope,\n  actions: UnknownAction[],\n  internalQueue: AnyEventObject[],\n  deferredActorIds?: string[]\n): AnyMachineSnapshot {\n  const retries: (readonly [BuiltinAction, unknown])[] | undefined =\n    deferredActorIds ? [] : undefined;\n  const nextState = resolveActionsAndContextWorker(\n    currentSnapshot,\n    event,\n    actorScope,\n    actions,\n    { internalQueue, deferredActorIds },\n    retries\n  );\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\n\nexport function macrostep(\n  snapshot: AnyMachineSnapshot,\n  event: EventObject,\n  actorScope: AnyActorScope,\n  internalQueue: AnyEventObject[] = []\n): {\n  snapshot: typeof snapshot;\n  microstates: Array<typeof snapshot>;\n} {\n  if (isDevelopment && event.type === WILDCARD) {\n    throw new Error(`An event cannot have the wildcard type ('${WILDCARD}')`);\n  }\n\n  let nextSnapshot = snapshot;\n  const states: AnyMachineSnapshot[] = [];\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(\n      stopChildren(nextSnapshot, event, actorScope),\n      {\n        status: 'stopped'\n      }\n    );\n    states.push(nextSnapshot);\n\n    return {\n      snapshot: nextSnapshot,\n      microstates: states\n    };\n  }\n\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot<typeof snapshot>(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      states.push(nextSnapshot);\n      return {\n        snapshot: nextSnapshot,\n        microstates: states\n      };\n    }\n    nextSnapshot = microstep(\n      transitions,\n      snapshot,\n      actorScope,\n      nextEvent,\n      false, // isInitial\n      internalQueue\n    );\n    states.push(nextSnapshot);\n  }\n\n  let shouldSelectEventlessTransitions = true;\n\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions: AnyTransitionDefinition[] =\n      shouldSelectEventlessTransitions\n        ? selectEventlessTransitions(nextSnapshot, nextEvent)\n        : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift()!;\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n\n    nextSnapshot = microstep(\n      enabledTransitions,\n      nextSnapshot,\n      actorScope,\n      nextEvent,\n      false,\n      internalQueue\n    );\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    states.push(nextSnapshot);\n  }\n\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n\n  return {\n    snapshot: nextSnapshot,\n    microstates: states\n  };\n}\n\nfunction stopChildren(\n  nextState: AnyMachineSnapshot,\n  event: AnyEventObject,\n  actorScope: AnyActorScope\n) {\n  return resolveActionsAndContext(\n    nextState,\n    event,\n    actorScope,\n    Object.values(nextState.children).map((child: any) => stopChild(child)),\n    []\n  );\n}\n\nfunction selectTransitions(\n  event: AnyEventObject,\n  nextState: AnyMachineSnapshot\n): AnyTransitionDefinition[] {\n  return nextState.machine.getTransitionData(nextState as any, event);\n}\n\nfunction selectEventlessTransitions(\n  nextState: AnyMachineSnapshot,\n  event: AnyEventObject\n): AnyTransitionDefinition[] {\n  const enabledTransitionSet: Set<AnyTransitionDefinition> = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(\n      getProperAncestors(stateNode, undefined)\n    )) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (\n          transition.guard === undefined ||\n          evaluateGuard(transition.guard, nextState.context, event, nextState)\n        ) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n\n  return removeConflictingTransitions(\n    Array.from(enabledTransitionSet),\n    new Set(nextState._nodes),\n    nextState.historyValue\n  );\n}\n\n/**\n * Resolves a partial state value with its full representation in the state node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nexport function resolveStateValue(\n  rootNode: AnyStateNode,\n  stateValue: StateValue\n): StateValue {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nexport function stateValuesEqual(\n  a: StateValue | undefined,\n  b: StateValue | undefined\n): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (typeof a === 'string' || typeof b === 'string') {\n    return a === b;\n  }\n\n  const aKeys = Object.keys(a as StateValueMap);\n  const bKeys = Object.keys(b as StateValueMap);\n\n  return (\n    aKeys.length === bKeys.length &&\n    aKeys.every((key) => stateValuesEqual(a[key], b[key]))\n  );\n}\n","import isDevelopment from '#is-development';\nimport { $$ACTOR_TYPE } from './createActor.ts';\nimport type { StateNode } from './StateNode.ts';\nimport type { StateMachine } from './StateMachine.ts';\nimport { getStateValue } from './stateUtils.ts';\nimport { TypegenDisabled } from './typegenTypes.ts';\nimport type {\n  ProvidedActor,\n  AnyMachineSnapshot,\n  AnyStateMachine,\n  EventObject,\n  HistoryValue,\n  MachineContext,\n  StateConfig,\n  StateValue,\n  AnyActorRef,\n  Snapshot,\n  ParameterizedObject,\n  IsNever\n} from './types.ts';\nimport { matchesState } from './utils.ts';\n\ntype ToTestStateValue<TStateValue extends StateValue> =\n  TStateValue extends string\n    ? TStateValue\n    : IsNever<keyof TStateValue> extends true\n      ? never\n      :\n          | keyof TStateValue\n          | {\n              [K in keyof TStateValue]?: ToTestStateValue<\n                NonNullable<TStateValue[K]>\n              >;\n            };\n\nexport function isMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n>(value: unknown): value is AnyMachineSnapshot {\n  return (\n    !!value &&\n    typeof value === 'object' &&\n    'machine' in value &&\n    'value' in value\n  );\n}\n\ninterface MachineSnapshotBase<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput,\n  _TUnusedButLeftForCompatReasons = never\n> {\n  /**\n   * The state machine that produced this state snapshot.\n   */\n  machine: StateMachine<\n    TContext,\n    TEvent,\n    TChildren,\n    ProvidedActor,\n    ParameterizedObject,\n    ParameterizedObject,\n    string,\n    TStateValue,\n    TTag,\n    unknown,\n    TOutput\n  >;\n  /**\n   * The tags of the active state nodes that represent the current state value.\n   */\n  tags: Set<string>;\n  /**\n   * The current state value.\n   *\n   * This represents the active state nodes in the state machine.\n   * - For atomic state nodes, it is a string. \n   * - For compound parent state nodes, it is an object where:\n   *   - The key is the parent state node's key\n   *   - The value is the current state value of the active child state node(s)\n   * \n   * @example\n  ```ts\n  // single-level state node\n  snapshot.value; // => 'yellow'\n\n  // nested state nodes\n  snapshot.value; // => { red: 'wait' }\n  ```\n   */\n  value: TStateValue;\n  /**\n   * The current status of this snapshot.\n   */\n  status: 'active' | 'done' | 'error' | 'stopped';\n  error: unknown;\n  context: TContext;\n\n  historyValue: Readonly<HistoryValue<TContext, TEvent>>;\n  /**\n   * The enabled state nodes representative of the state value.\n   */\n  _nodes: Array<StateNode<TContext, TEvent>>;\n  /**\n   * An object mapping actor names to spawned/invoked actors.\n   */\n  children: TChildren;\n\n  /**\n   * Whether the current state value is a subset of the given partial state value.\n   * @param partialStateValue\n   */\n  matches: (\n    this: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    partialStateValue: ToTestStateValue<TStateValue>\n  ) => boolean;\n\n  /**\n   * Whether the current state nodes has a state node with the specified `tag`.\n   * @param tag\n   */\n  hasTag: (\n    this: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    tag: TTag\n  ) => boolean;\n\n  /**\n   * Determines whether sending the `event` will cause a non-forbidden transition\n   * to be selected, even if the transitions have no actions nor\n   * change the state value.\n   *\n   * @param event The event to test\n   * @returns Whether the event will cause a transition\n   */\n  can: (\n    this: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    event: TEvent\n  ) => boolean;\n\n  getMeta: (\n    this: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >\n  ) => Record<string, any>;\n\n  toJSON: (\n    this: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >\n  ) => unknown;\n}\n\ninterface ActiveMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput\n> extends MachineSnapshotBase<\n    TContext,\n    TEvent,\n    TChildren,\n    TStateValue,\n    TTag,\n    TOutput\n  > {\n  status: 'active';\n  output: undefined;\n  error: undefined;\n}\n\ninterface DoneMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput\n> extends MachineSnapshotBase<\n    TContext,\n    TEvent,\n    TChildren,\n    TStateValue,\n    TTag,\n    TOutput\n  > {\n  status: 'done';\n  output: TOutput;\n  error: undefined;\n}\n\ninterface ErrorMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput\n> extends MachineSnapshotBase<\n    TContext,\n    TEvent,\n    TChildren,\n    TStateValue,\n    TTag,\n    TOutput\n  > {\n  status: 'error';\n  output: undefined;\n  error: unknown;\n}\n\ninterface StoppedMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput\n> extends MachineSnapshotBase<\n    TContext,\n    TEvent,\n    TChildren,\n    TStateValue,\n    TTag,\n    TOutput\n  > {\n  status: 'stopped';\n  output: undefined;\n  error: undefined;\n}\n\nexport type MachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput,\n  _TUnusedButLeftForCompatReasons = never\n> =\n  | ActiveMachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >\n  | DoneMachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput>\n  | ErrorMachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >\n  | StoppedMachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >;\n\nconst machineSnapshotMatches = function matches(\n  this: AnyMachineSnapshot,\n  testValue: StateValue\n) {\n  return matchesState(testValue, this.value);\n};\n\nconst machineSnapshotHasTag = function hasTag(\n  this: AnyMachineSnapshot,\n  tag: string\n) {\n  return this.tags.has(tag);\n};\n\nconst machineSnapshotCan = function can(\n  this: AnyMachineSnapshot,\n  event: EventObject\n) {\n  if (isDevelopment && !this.machine) {\n    console.warn(\n      `state.can(...) used outside of a machine-created State object; this will always return false.`\n    );\n  }\n\n  const transitionData = this.machine.getTransitionData(this, event);\n\n  return (\n    !!transitionData?.length &&\n    // Check that at least one transition is not forbidden\n    transitionData.some((t) => t.target !== undefined || t.actions.length)\n  );\n};\n\nconst machineSnapshotToJSON = function toJSON(this: AnyMachineSnapshot) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return { ...jsonValues, tags: Array.from(tags) };\n};\n\nconst machineSnapshotGetMeta = function getMeta(this: AnyMachineSnapshot) {\n  return this._nodes.reduce(\n    (acc, stateNode) => {\n      if (stateNode.meta !== undefined) {\n        acc[stateNode.id] = stateNode.meta;\n      }\n      return acc;\n    },\n    {} as Record<string, any>\n  );\n};\n\nexport function createMachineSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string\n>(\n  config: StateConfig<TContext, TEvent>,\n  machine: AnyStateMachine\n): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, undefined> {\n  return {\n    status: config.status as never,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes) as never,\n    tags: new Set(config._nodes.flatMap((sn) => sn.tags)),\n    children: config.children as any,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches as never,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\n\nexport function cloneMachineSnapshot<TState extends AnyMachineSnapshot>(\n  snapshot: TState,\n  config: Partial<StateConfig<any, any>> = {}\n): TState {\n  return createMachineSnapshot(\n    { ...snapshot, ...config } as StateConfig<any, any>,\n    snapshot.machine\n  ) as TState;\n}\n\nexport function getPersistedSnapshot<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TOutput\n>(\n  snapshot: MachineSnapshot<\n    TContext,\n    TEvent,\n    TChildren,\n    TStateValue,\n    TTag,\n    TOutput\n  >,\n  options?: unknown\n): Snapshot<unknown> {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n\n  const childrenJson: Record<string, unknown> = {};\n\n  for (const id in children) {\n    const child = children[id] as any;\n    if (\n      isDevelopment &&\n      typeof child.src !== 'string' &&\n      (!options || !('__unsafeAllowInlineActors' in (options as object)))\n    ) {\n      throw new Error('An inline child actor cannot be persisted.');\n    }\n    childrenJson[id as keyof typeof childrenJson] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context) as any,\n    children: childrenJson\n  };\n\n  return persisted;\n}\n\nfunction persistContext(contextPart: Record<string, unknown>) {\n  let copy: typeof contextPart | undefined;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart)\n          ? (contextPart.slice() as typeof contextPart)\n          : { ...contextPart };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: (value as any as AnyActorRef).id\n        };\n      } else {\n        const result = persistContext(value as typeof contextPart);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart)\n            ? (contextPart.slice() as typeof contextPart)\n            : { ...contextPart };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n","import { ProcessingStatus, createActor } from './createActor.ts';\nimport {\n  ActorRefFrom,\n  AnyActorLogic,\n  AnyActorRef,\n  AnyActorScope,\n  AnyEventObject,\n  AnyMachineSnapshot,\n  ConditionalRequired,\n  InputFrom,\n  IsLiteralString,\n  IsNotNever,\n  ProvidedActor,\n  RequiredActorOptions,\n  TODO\n} from './types.ts';\nimport { resolveReferencedActor } from './utils.ts';\n\ntype SpawnOptions<\n  TActor extends ProvidedActor,\n  TSrc extends TActor['src']\n> = TActor extends {\n  src: TSrc;\n}\n  ? ConditionalRequired<\n      [\n        options?: {\n          id?: TActor['id'];\n          systemId?: string;\n          input?: InputFrom<TActor['logic']>;\n          syncSnapshot?: boolean;\n        } & { [K in RequiredActorOptions<TActor>]: unknown }\n      ],\n      IsNotNever<RequiredActorOptions<TActor>>\n    >\n  : never;\n\n// it's likely-ish that `(TActor & { src: TSrc })['logic']` would be faster\n// but it's only possible to do it since https://github.com/microsoft/TypeScript/pull/53098 (TS 5.1)\n// and we strive to support TS 5.0 whenever possible\ntype GetConcreteLogic<\n  TActor extends ProvidedActor,\n  TSrc extends TActor['src']\n> = Extract<TActor, { src: TSrc }>['logic'];\n\nexport type Spawner<TActor extends ProvidedActor> = IsLiteralString<\n  TActor['src']\n> extends true\n  ? <TSrc extends TActor['src']>(\n      logic: TSrc,\n      ...[options]: SpawnOptions<TActor, TSrc>\n    ) => ActorRefFrom<GetConcreteLogic<TActor, TSrc>>\n  : <TLogic extends AnyActorLogic | string>(\n      src: TLogic,\n      options?: {\n        id?: string;\n        systemId?: string;\n        input?: TLogic extends string ? unknown : InputFrom<TLogic>;\n        syncSnapshot?: boolean;\n      }\n    ) => TLogic extends string ? AnyActorRef : ActorRefFrom<TLogic>;\n\nexport function createSpawner(\n  actorScope: AnyActorScope,\n  { machine, context }: AnyMachineSnapshot,\n  event: AnyEventObject,\n  spawnedChildren: Record<string, AnyActorRef>\n): Spawner<any> {\n  const spawn: Spawner<any> = (src, options = {}) => {\n    const { systemId, input } = options;\n    if (typeof src === 'string') {\n      const logic = resolveReferencedActor(machine, src);\n\n      if (!logic) {\n        throw new Error(\n          `Actor logic '${src}' not implemented in machine '${machine.id}'`\n        );\n      }\n\n      const actorRef = createActor(logic, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input:\n          typeof input === 'function'\n            ? input({\n                context,\n                event,\n                self: actorScope.self\n              })\n            : input,\n        src,\n        systemId\n      }) as any;\n\n      spawnedChildren[actorRef.id] = actorRef;\n\n      return actorRef;\n    } else {\n      const actorRef = createActor(src, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input: options.input,\n        src,\n        systemId\n      });\n\n      return actorRef;\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options) as TODO; // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorScope.defer(() => {\n      if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n        return;\n      }\n      actorRef.start();\n    });\n    return actorRef;\n  };\n}\n","import isDevelopment from '#is-development';\nimport { cloneMachineSnapshot } from '../State.ts';\nimport { Spawner, createSpawner } from '../spawn.ts';\nimport type {\n  ActionArgs,\n  AnyActorScope,\n  AnyActorRef,\n  AnyEventObject,\n  AnyMachineSnapshot,\n  Assigner,\n  EventObject,\n  LowInfer,\n  MachineContext,\n  ParameterizedObject,\n  PropertyAssigner,\n  ProvidedActor\n} from '../types.ts';\n\nexport interface AssignArgs<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> extends ActionArgs<TContext, TExpressionEvent, TEvent> {\n  spawn: Spawner<TActor>;\n}\n\nfunction resolveAssign(\n  actorScope: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  actionArgs: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  {\n    assignment\n  }: {\n    assignment:\n      | Assigner<any, any, any, any, any>\n      | PropertyAssigner<any, any, any, any, any>;\n  }\n) {\n  if (!snapshot.context) {\n    throw new Error(\n      'Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.'\n    );\n  }\n  const spawnedChildren: Record<string, AnyActorRef> = {};\n\n  const assignArgs: AssignArgs<any, any, any, any> = {\n    context: snapshot.context,\n    event: actionArgs.event,\n    spawn: createSpawner(\n      actorScope,\n      snapshot,\n      actionArgs.event,\n      spawnedChildren\n    ),\n    self: actorScope.self,\n    system: actorScope.system\n  };\n  let partialUpdate: Record<string, unknown> = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs, actionParams);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] =\n        typeof propAssignment === 'function'\n          ? propAssignment(assignArgs, actionParams)\n          : propAssignment;\n    }\n  }\n\n  const updatedContext = Object.assign({}, snapshot.context, partialUpdate);\n\n  return [\n    cloneMachineSnapshot(snapshot, {\n      context: updatedContext,\n      children: Object.keys(spawnedChildren).length\n        ? {\n            ...snapshot.children,\n            ...spawnedChildren\n          }\n        : snapshot.children\n    })\n  ];\n}\n\nexport interface AssignAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n  _out_TActor?: TActor;\n}\n\n/**\n * Updates the current context of the machine.\n *\n * @param assignment An object that represents the partial context to update, or a\n * function that returns an object that represents the partial context to update.\n * \n * @example\n  ```ts\n  import { createMachine, assign } from 'xstate';\n\n  const countMachine = createMachine({\n    context: {\n      count: 0,\n      message: ''\n    },\n    on: {\n      inc: {\n        actions: assign({\n          count: ({ context }) => context.count + 1\n        })\n      },\n      updateMessage: {\n        actions: assign(({ context, event }) => {\n          return {\n            message: event.message.trim()\n          }\n        })\n      }\n    }\n  });\n  ```\n */\nexport function assign<\n  TContext extends MachineContext,\n  TExpressionEvent extends AnyEventObject = AnyEventObject, // TODO: consider using a stricter `EventObject` here\n  TParams extends ParameterizedObject['params'] | undefined =\n    | ParameterizedObject['params']\n    | undefined,\n  TEvent extends EventObject = EventObject,\n  TActor extends ProvidedActor = ProvidedActor\n>(\n  assignment:\n    | Assigner<LowInfer<TContext>, TExpressionEvent, TParams, TEvent, TActor>\n    | PropertyAssigner<\n        LowInfer<TContext>,\n        TExpressionEvent,\n        TParams,\n        TEvent,\n        TActor\n      >\n): AssignAction<TContext, TExpressionEvent, TParams, TEvent, TActor> {\n  function assign(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n\n  assign.resolve = resolveAssign;\n\n  return assign;\n}\n","import isDevelopment from '#is-development';\nimport {\n  ActionArgs,\n  AnyActorScope,\n  AnyActor,\n  AnyMachineSnapshot,\n  DelayExpr,\n  EventObject,\n  MachineContext,\n  NoInfer,\n  RaiseActionOptions,\n  SendExpr,\n  ParameterizedObject,\n  AnyEventObject\n} from '../types.ts';\n\nfunction resolveRaise(\n  _: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  args: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  {\n    event: eventOrExpr,\n    id,\n    delay\n  }: {\n    event:\n      | EventObject\n      | SendExpr<\n          MachineContext,\n          EventObject,\n          ParameterizedObject['params'] | undefined,\n          EventObject,\n          EventObject\n        >;\n    id: string | undefined;\n    delay:\n      | string\n      | number\n      | DelayExpr<\n          MachineContext,\n          EventObject,\n          ParameterizedObject['params'] | undefined,\n          EventObject\n        >\n      | undefined;\n  },\n  { internalQueue }: { internalQueue: AnyEventObject[] }\n) {\n  const delaysMap = snapshot.machine.implementations.delays;\n\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n      `Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`\n    );\n  }\n  const resolvedEvent =\n    typeof eventOrExpr === 'function'\n      ? eventOrExpr(args, actionParams)\n      : eventOrExpr;\n\n  let resolvedDelay: number | undefined;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay =\n      typeof configDelay === 'function'\n        ? configDelay(args, actionParams)\n        : configDelay;\n  } else {\n    resolvedDelay =\n      typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, { event: resolvedEvent, id, delay: resolvedDelay }];\n}\n\nfunction executeRaise(\n  actorScope: AnyActorScope,\n  params: {\n    event: EventObject;\n    id: string | undefined;\n    delay: number | undefined;\n  }\n) {\n  const { event, delay, id } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n\nexport interface RaiseAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n  _out_TEvent?: TEvent;\n  _out_TDelay?: TDelay;\n}\n\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nexport function raise<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject = TExpressionEvent,\n  TParams extends ParameterizedObject['params'] | undefined =\n    | ParameterizedObject['params']\n    | undefined,\n  TDelay extends string = string\n>(\n  eventOrExpr:\n    | NoInfer<TEvent>\n    | SendExpr<TContext, TExpressionEvent, TParams, NoInfer<TEvent>, TEvent>,\n  options?: RaiseActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    NoInfer<TEvent>,\n    NoInfer<TDelay>\n  >\n): RaiseAction<TContext, TExpressionEvent, TParams, TEvent, TDelay> {\n  function raise(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n\n  return raise;\n}\n","import type { MachineSnapshot } from './State.ts';\nimport type { StateMachine } from './StateMachine.ts';\nimport type { StateNode } from './StateNode.ts';\nimport { AssignArgs } from './actions/assign.ts';\nimport { PromiseActorLogic } from './actors/promise.ts';\nimport { Guard, GuardPredicate, UnknownGuard } from './guards.ts';\nimport type { Actor, ProcessingStatus } from './createActor.ts';\nimport { Spawner } from './spawn.ts';\nimport { AnyActorSystem, InspectionEvent, Clock } from './system.js';\nimport {\n  ResolveTypegenMeta,\n  TypegenConstraint,\n  TypegenDisabled\n} from './typegenTypes.ts';\n\nexport type Identity<T> = { [K in keyof T]: T[K] };\n\nexport type HomomorphicPick<T, K extends keyof any> = {\n  [P in keyof T as P & K]: T[P];\n};\nexport type HomomorphicOmit<T, K extends keyof any> = {\n  [P in keyof T as Exclude<P, K>]: T[P];\n};\n\nexport type Invert<T extends Record<PropertyKey, PropertyKey>> = {\n  [K in keyof T as T[K]]: K;\n};\n\nexport type GetParameterizedParams<T extends ParameterizedObject | undefined> =\n  T extends any ? ('params' extends keyof T ? T['params'] : undefined) : never;\n\n/**\n *\n * @remarks\n *\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes to contextual typing.\n * It especially is a problem when the union has a function member, like here:\n *\n * ```ts\n * declare function test(cbOrVal: ((arg: number) => unknown) | unknown): void;\n * test((arg) => {}) // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same value space as `unknown`.\n */\nexport type NonReducibleUnknown = {} | null | undefined;\nexport type AnyFunction = (...args: any[]) => any;\n\ntype ReturnTypeOrValue<T> = T extends AnyFunction ? ReturnType<T> : T;\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\nexport type IsNever<T> = [T] extends [never] ? true : false;\nexport type IsNotNever<T> = [T] extends [never] ? false : true;\n\nexport type Compute<A extends any> = { [K in keyof A]: A[K] } & unknown;\nexport type Prop<T, K> = K extends keyof T ? T[K] : never;\nexport type Values<T> = T[keyof T];\nexport type Elements<T> = T[keyof T & `${number}`];\nexport type Merge<M, N> = Omit<M, keyof N> & N;\nexport type IndexByProp<T extends Record<P, string>, P extends keyof T> = {\n  [E in T as E[P]]: E;\n};\n\nexport type IndexByType<T extends { type: string }> = IndexByProp<T, 'type'>;\n\nexport type Equals<A1 extends any, A2 extends any> = (<A>() => A extends A2\n  ? true\n  : false) extends <A>() => A extends A1 ? true : false\n  ? true\n  : false;\nexport type IsAny<T> = Equals<T, any>;\nexport type Cast<A, B> = A extends B ? A : B;\nexport type NoInfer<T> = [T][T extends any ? 0 : any];\nexport type LowInfer<T> = T & {};\n\nexport type MetaObject = Record<string, any>;\n\nexport type Lazy<T> = () => T;\nexport type MaybeLazy<T> = T | Lazy<T>;\n\n/**\n * The full definition of an event, with a string `type`.\n */\nexport type EventObject = {\n  /**\n   * The type of event that is sent.\n   */\n  type: string;\n};\n\nexport interface AnyEventObject extends EventObject {\n  [key: string]: any;\n}\n\nexport interface ParameterizedObject {\n  type: string;\n  params?: NonReducibleUnknown;\n}\n\nexport interface UnifiedArg<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject\n> {\n  context: TContext;\n  event: TExpressionEvent;\n  self: ActorRef<\n    MachineSnapshot<\n      TContext,\n      TEvent,\n      Record<string, AnyActorRef | undefined>, // TODO: this should be replaced with `TChildren`\n      StateValue,\n      string,\n      unknown\n    >,\n    TEvent\n  >;\n  system: AnyActorSystem;\n}\n\nexport type MachineContext = Record<string, any>;\n\nexport interface ActionArgs<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject\n> extends UnifiedArg<TContext, TExpressionEvent, TEvent> {}\n\nexport type InputFrom<T> = T extends StateMachine<\n  infer _TContext,\n  infer _TEvent,\n  infer _TChildren,\n  infer _TActor,\n  infer _TAction,\n  infer _TGuard,\n  infer _TDelay,\n  infer _TStateValue,\n  infer _TTag,\n  infer TInput,\n  infer _TOutput,\n  infer _TResolvedTypesMeta\n>\n  ? TInput\n  : T extends ActorLogic<\n        infer _TSnapshot,\n        infer _TEvent,\n        infer TInput,\n        infer _TSystem\n      >\n    ? TInput\n    : never;\n\nexport type OutputFrom<T> = T extends ActorLogic<\n  infer TSnapshot,\n  infer _TEvent,\n  infer _TInput,\n  infer _TSystem\n>\n  ? (TSnapshot & { status: 'done' })['output']\n  : T extends ActorRef<infer TSnapshot, infer _TEvent>\n    ? (TSnapshot & { status: 'done' })['output']\n    : never;\n\nexport type ActionFunction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n  _out_TEvent?: TEvent; // TODO: it feels like we should be able to remove this since now `TEvent` is \"observable\" by `self`\n  _out_TActor?: TActor;\n  _out_TAction?: TAction;\n  _out_TGuard?: TGuard;\n  _out_TDelay?: TDelay;\n};\n\nexport interface ChooseBranch<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject = TExpressionEvent,\n  TActor extends ProvidedActor = ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject,\n  TDelay extends string = string\n> {\n  guard?: Guard<TContext, TExpressionEvent, undefined, TGuard>;\n  actions: Actions<\n    TContext,\n    TExpressionEvent,\n    TEvent,\n    undefined,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n}\n\nexport type NoRequiredParams<T extends ParameterizedObject> = T extends any\n  ? undefined extends T['params']\n    ? T['type']\n    : never\n  : never;\n\nexport type ConditionalRequired<\n  T,\n  Condition extends boolean\n> = Condition extends true ? Required<T> : T;\n\nexport type WithDynamicParams<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  T extends ParameterizedObject\n> = T extends any\n  ? ConditionalRequired<\n      {\n        type: T['type'];\n        params?:\n          | T['params']\n          | (({\n              context,\n              event\n            }: {\n              context: TContext;\n              event: TExpressionEvent;\n            }) => T['params']);\n      },\n      undefined extends T['params'] ? false : true\n    >\n  : never;\n\nexport type Action<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> =\n  // TODO: consider merging `NoRequiredParams` and `WithDynamicParams` into one\n  // this way we could iterate over `TAction` (and `TGuard` in the `Guard` type) once and not twice\n  | NoRequiredParams<TAction>\n  | WithDynamicParams<TContext, TExpressionEvent, TAction>\n  | ActionFunction<\n      TContext,\n      TExpressionEvent,\n      TEvent,\n      TParams,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay\n    >;\n\nexport type UnknownAction = Action<\n  MachineContext,\n  EventObject,\n  EventObject,\n  ParameterizedObject['params'] | undefined,\n  ProvidedActor,\n  ParameterizedObject,\n  ParameterizedObject,\n  string\n>;\n\nexport type Actions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = SingleOrArray<\n  Action<\n    TContext,\n    TExpressionEvent,\n    TEvent,\n    TParams,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >\n>;\n\nexport type StateKey = string | AnyMachineSnapshot;\n\nexport interface StateValueMap {\n  [key: string]: StateValue | undefined;\n}\n\n/**\n * The string or object representing the state value relative to the parent state node.\n *\n * @remarks\n *\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n *\n * - For complex state nodes, this is an object, e.g., `{ success: \"someChildState\" }`.\n */\nexport type StateValue = string | StateValueMap;\n\nexport type TransitionTarget = SingleOrArray<string>;\n\nexport interface TransitionConfig<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> {\n  guard?: Guard<TContext, TExpressionEvent, undefined, TGuard>;\n  actions?: Actions<\n    TContext,\n    TExpressionEvent,\n    TEvent,\n    undefined,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n  reenter?: boolean;\n  target?: TransitionTarget | undefined;\n  meta?: Record<string, any>;\n  description?: string;\n}\n\nexport interface InitialTransitionConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> extends TransitionConfig<\n    TContext,\n    TEvent,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  > {\n  target: string;\n}\n\nexport type AnyTransitionConfig = TransitionConfig<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>;\n\nexport interface InvokeDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> {\n  id: string;\n\n  systemId: string | undefined;\n  /**\n   * The source of the actor logic to be invoked\n   */\n  src: AnyActorLogic | string;\n\n  input?:\n    | Mapper<TContext, TEvent, NonReducibleUnknown, TEvent>\n    | NonReducibleUnknown;\n  /**\n   * The transition to take upon the invoked child machine reaching its final top-level state.\n   */\n  onDone?:\n    | string\n    | SingleOrArray<\n        TransitionConfig<\n          TContext,\n          DoneActorEvent<unknown>,\n          TEvent,\n          TActor,\n          TAction,\n          TGuard,\n          TDelay\n        >\n      >;\n  /**\n   * The transition to take upon the invoked child machine sending an error event.\n   */\n  onError?:\n    | string\n    | SingleOrArray<\n        TransitionConfig<\n          TContext,\n          ErrorActorEvent,\n          TEvent,\n          TActor,\n          TAction,\n          TGuard,\n          TDelay\n        >\n      >;\n\n  onSnapshot?:\n    | string\n    | SingleOrArray<\n        TransitionConfig<\n          TContext,\n          SnapshotEvent,\n          TEvent,\n          TActor,\n          TAction,\n          TGuard,\n          TDelay\n        >\n      >;\n\n  toJSON: () => Omit<\n    InvokeDefinition<TContext, TEvent, TActor, TAction, TGuard, TDelay>,\n    'onDone' | 'onError' | 'toJSON'\n  >;\n}\n\ntype Delay<TDelay extends string> = TDelay | number;\n\nexport type DelayedTransitions<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = {\n  [K in Delay<TDelay>]?:\n    | string\n    | SingleOrArray<\n        TransitionConfig<\n          TContext,\n          TEvent,\n          TEvent,\n          TActor,\n          TAction,\n          TGuard,\n          TDelay\n        >\n      >;\n};\n\nexport type StateTypes =\n  | 'atomic'\n  | 'compound'\n  | 'parallel'\n  | 'final'\n  | 'history'\n  | string; // TODO: remove once TS fixes this type-widening issue\n\nexport type SingleOrArray<T> = readonly T[] | T;\n\nexport type StateNodesConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> = {\n  [K in string]: StateNode<TContext, TEvent>;\n};\n\nexport type StatesConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TTag extends string,\n  TOutput\n> = {\n  [K in string]: StateNodeConfig<\n    TContext,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay,\n    TTag,\n    TOutput\n  >;\n};\n\nexport type StatesDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> = {\n  [K in string]: StateNodeDefinition<TContext, TEvent>;\n};\n\nexport type TransitionConfigTarget = string | undefined;\n\nexport type TransitionConfigOrTarget<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = SingleOrArray<\n  | TransitionConfigTarget\n  | TransitionConfig<\n      TContext,\n      TExpressionEvent,\n      TEvent,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay\n    >\n>;\n\nexport type TransitionsConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = {\n  [K in EventDescriptor<TEvent>]?: TransitionConfigOrTarget<\n    TContext,\n    ExtractEvent<TEvent, K>,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n};\n\ntype PartialEventDescriptor<TEventType extends string> =\n  TEventType extends `${infer TLeading}.${infer TTail}`\n    ? `${TLeading}.*` | `${TLeading}.${PartialEventDescriptor<TTail>}`\n    : never;\n\nexport type EventDescriptor<TEvent extends EventObject> =\n  | TEvent['type']\n  | PartialEventDescriptor<TEvent['type']>\n  | '*';\n\ntype NormalizeDescriptor<TDescriptor extends string> = TDescriptor extends '*'\n  ? string\n  : TDescriptor extends `${infer TLeading}.*`\n    ? `${TLeading}.${string}`\n    : TDescriptor;\n\nexport type IsLiteralString<T extends string> = string extends T ? false : true;\n\ntype DistributeActors<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TSpecificActor extends ProvidedActor\n> = TSpecificActor extends { src: infer TSrc }\n  ? Compute<\n      {\n        systemId?: string;\n        /**\n         * The source of the machine to be invoked, or the machine itself.\n         */\n        src: TSrc;\n\n        /**\n         * The unique identifier for the invoked machine. If not specified, this\n         * will be the machine's own `id`, or the URL (from `src`).\n         */\n        id?: TSpecificActor['id'];\n\n        // TODO: currently we do not enforce required inputs here\n        // in a sense, we shouldn't - they could be provided within the `implementations` object\n        // how do we verify if the required input has been provided?\n        input?:\n          | Mapper<TContext, TEvent, InputFrom<TSpecificActor['logic']>, TEvent>\n          | InputFrom<TSpecificActor['logic']>;\n        /**\n         * The transition to take upon the invoked child machine reaching its final top-level state.\n         */\n        onDone?:\n          | string\n          | SingleOrArray<\n              TransitionConfigOrTarget<\n                TContext,\n                DoneActorEvent<OutputFrom<TSpecificActor['logic']>>,\n                TEvent,\n                TActor,\n                TAction,\n                TGuard,\n                TDelay\n              >\n            >;\n        /**\n         * The transition to take upon the invoked child machine sending an error event.\n         */\n        onError?:\n          | string\n          | SingleOrArray<\n              TransitionConfigOrTarget<\n                TContext,\n                ErrorActorEvent,\n                TEvent,\n                TActor,\n                TAction,\n                TGuard,\n                TDelay\n              >\n            >;\n\n        onSnapshot?:\n          | string\n          | SingleOrArray<\n              TransitionConfigOrTarget<\n                TContext,\n                SnapshotEvent<SnapshotFrom<TSpecificActor['logic']>>,\n                TEvent,\n                TActor,\n                TAction,\n                TGuard,\n                TDelay\n              >\n            >;\n      } & { [K in RequiredActorOptions<TSpecificActor>]: unknown }\n    >\n  : never;\n\nexport type InvokeConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = IsLiteralString<TActor['src']> extends true\n  ? DistributeActors<TContext, TEvent, TActor, TAction, TGuard, TDelay, TActor>\n  : {\n      /**\n       * The unique identifier for the invoked machine. If not specified, this\n       * will be the machine's own `id`, or the URL (from `src`).\n       */\n      id?: string;\n\n      systemId?: string;\n      /**\n       * The source of the machine to be invoked, or the machine itself.\n       */\n      src: AnyActorLogic | string; // TODO: fix types\n\n      input?:\n        | Mapper<TContext, TEvent, NonReducibleUnknown, TEvent>\n        | NonReducibleUnknown;\n      /**\n       * The transition to take upon the invoked child machine reaching its final top-level state.\n       */\n      onDone?:\n        | string\n        | SingleOrArray<\n            TransitionConfigOrTarget<\n              TContext,\n              DoneActorEvent<any>, // TODO: consider replacing with `unknown`\n              TEvent,\n              TActor,\n              TAction,\n              TGuard,\n              TDelay\n            >\n          >;\n      /**\n       * The transition to take upon the invoked child machine sending an error event.\n       */\n      onError?:\n        | string\n        | SingleOrArray<\n            TransitionConfigOrTarget<\n              TContext,\n              ErrorActorEvent,\n              TEvent,\n              TActor,\n              TAction,\n              TGuard,\n              TDelay\n            >\n          >;\n\n      onSnapshot?:\n        | string\n        | SingleOrArray<\n            TransitionConfigOrTarget<\n              TContext,\n              SnapshotEvent,\n              TEvent,\n              TActor,\n              TAction,\n              TGuard,\n              TDelay\n            >\n          >;\n    };\n\nexport type AnyInvokeConfig = InvokeConfig<any, any, any, any, any, any>;\n\nexport interface StateNodeConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TTag extends string,\n  TOutput\n> {\n  /**\n   * The initial state transition.\n   */\n  initial?:\n    | InitialTransitionConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay>\n    | string\n    | undefined;\n  /**\n   * The type of this state node:\n   *\n   *  - `'atomic'` - no child state nodes\n   *  - `'compound'` - nested child state nodes (XOR)\n   *  - `'parallel'` - orthogonal nested child state nodes (AND)\n   *  - `'history'` - history state node\n   *  - `'final'` - final state node\n   */\n  type?: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n  /**\n   * Indicates whether the state node is a history state node, and what\n   * type of history:\n   * shallow, deep, true (shallow), false (none), undefined (none)\n   */\n  history?: 'shallow' | 'deep' | boolean | undefined;\n  /**\n   * The mapping of state node keys to their state node configurations (recursive).\n   */\n  states?:\n    | StatesConfig<\n        TContext,\n        TEvent,\n        TActor,\n        TAction,\n        TGuard,\n        TDelay,\n        TTag,\n        NonReducibleUnknown\n      >\n    | undefined;\n  /**\n   * The services to invoke upon entering this state node. These services will be stopped upon exiting this state node.\n   */\n  invoke?: SingleOrArray<\n    InvokeConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay>\n  >;\n  /**\n   * The mapping of event types to their potential transition(s).\n   */\n  on?: TransitionsConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay>;\n  /**\n   * The action(s) to be executed upon entering the state node.\n   */\n  entry?: Actions<\n    TContext,\n    TEvent,\n    TEvent,\n    undefined,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n  /**\n   * The action(s) to be executed upon exiting the state node.\n   */\n  exit?: Actions<\n    TContext,\n    TEvent,\n    TEvent,\n    undefined,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n  /**\n   * The potential transition(s) to be taken upon reaching a final child state node.\n   *\n   * This is equivalent to defining a `[done(id)]` transition on this state node's `on` property.\n   */\n  onDone?:\n    | string\n    | SingleOrArray<\n        TransitionConfig<\n          TContext,\n          DoneStateEvent,\n          TEvent,\n          TActor,\n          TAction,\n          TGuard,\n          TDelay\n        >\n      >\n    | undefined;\n  /**\n   * The mapping (or array) of delays (in milliseconds) to their potential transition(s).\n   * The delayed transitions are taken after the specified delay in an interpreter.\n   */\n  after?: DelayedTransitions<TContext, TEvent, TActor, TAction, TGuard, TDelay>;\n\n  /**\n   * An eventless transition that is always taken when this state node is active.\n   */\n  always?: TransitionConfigOrTarget<\n    TContext,\n    TEvent,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n  parent?: StateNode<TContext, TEvent>;\n  /**\n   * The meta data associated with this state node, which will be returned in State instances.\n   */\n  meta?: any;\n  /**\n   * The output data sent with the \"xstate.done.state._id_\" event if this is a final state node.\n   *\n   * The output data will be evaluated with the current `context` and placed on the `.data` property\n   * of the event.\n   */\n  output?: Mapper<TContext, TEvent, unknown, TEvent> | NonReducibleUnknown;\n  /**\n   * The unique ID of the state node, which can be referenced as a transition target via the\n   * `#id` syntax.\n   */\n  id?: string | undefined;\n  /**\n   * The order this state node appears. Corresponds to the implicit document order.\n   */\n  order?: number;\n\n  /**\n   * The tags for this state node, which are accumulated into the `state.tags` property.\n   */\n  tags?: SingleOrArray<TTag>;\n  /**\n   * A text description of the state node\n   */\n  description?: string;\n\n  /**\n   * A default target for a history state\n   */\n  target?: string;\n}\n\nexport type AnyStateNodeConfig = StateNodeConfig<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>;\n\nexport interface StateNodeDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> {\n  id: string;\n  version?: string | undefined;\n  key: string;\n  type: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n  initial: InitialTransitionDefinition<TContext, TEvent> | undefined;\n  history: boolean | 'shallow' | 'deep' | undefined;\n  states: StatesDefinition<TContext, TEvent>;\n  on: TransitionDefinitionMap<TContext, TEvent>;\n  transitions: Array<TransitionDefinition<TContext, TEvent>>;\n  // TODO: establish what a definition really is\n  entry: UnknownAction[];\n  exit: UnknownAction[];\n  meta: any;\n  order: number;\n  output?: StateNodeConfig<\n    TContext,\n    TEvent,\n    ProvidedActor,\n    ParameterizedObject,\n    ParameterizedObject,\n    string,\n    string,\n    unknown\n  >['output'];\n  invoke: Array<InvokeDefinition<TContext, TEvent, TODO, TODO, TODO, TODO>>;\n  description?: string;\n  tags: string[];\n}\n\nexport interface StateMachineDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends StateNodeDefinition<TContext, TEvent> {}\n\nexport type AnyStateNode = StateNode<any, any>;\n\nexport type AnyStateNodeDefinition = StateNodeDefinition<any, any>;\n\nexport type AnyMachineSnapshot = MachineSnapshot<\n  any,\n  any,\n  any,\n  any,\n  any,\n  any,\n  any\n>;\n\n/** @deprecated use `AnyMachineSnapshot` instead */\nexport type AnyState = AnyMachineSnapshot;\n\nexport type AnyStateMachine = StateMachine<\n  any, // context\n  any, // event\n  any, // children\n  any, // actor\n  any, // action\n  any, // guard\n  any, // delay\n  any, // state value\n  any, // tag\n  any, // input\n  any, // output\n  any // typegen\n>;\n\nexport type AnyStateConfig = StateConfig<any, AnyEventObject>;\n\nexport interface AtomicStateNodeConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends StateNodeConfig<\n    TContext,\n    TEvent,\n    TODO,\n    TODO,\n    TODO,\n    TODO,\n    TODO,\n    TODO\n  > {\n  initial?: undefined;\n  parallel?: false | undefined;\n  states?: undefined;\n  onDone?: undefined;\n}\n\nexport interface HistoryStateNodeConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends AtomicStateNodeConfig<TContext, TEvent> {\n  history: 'shallow' | 'deep' | true;\n  target: string | undefined;\n}\n\nexport type SimpleOrStateNodeConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> =\n  | AtomicStateNodeConfig<TContext, TEvent>\n  | StateNodeConfig<TContext, TEvent, TODO, TODO, TODO, TODO, TODO, TODO>;\n\nexport type ActionFunctionMap<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject,\n  TDelay extends string = string\n> = {\n  [K in TAction['type']]?: ActionFunction<\n    TContext,\n    TEvent,\n    TEvent,\n    GetParameterizedParams<TAction extends { type: K } ? TAction : never>,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n};\n\ntype GuardMap<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TGuard extends ParameterizedObject\n> = {\n  [K in TGuard['type']]?: GuardPredicate<\n    TContext,\n    TEvent,\n    GetParameterizedParams<TGuard extends { type: K } ? TGuard : never>,\n    TGuard\n  >;\n};\n\nexport type DelayFunctionMap<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TAction extends ParameterizedObject\n> = Record<string, DelayConfig<TContext, TEvent, TAction['params'], TEvent>>;\n\nexport type DelayConfig<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> = number | DelayExpr<TContext, TExpressionEvent, TParams, TEvent>;\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n/**\n * @internal\n */\nexport interface MachineImplementationsSimplified<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor = ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject\n> {\n  guards: GuardMap<TContext, TEvent, TGuard>;\n  actions: ActionFunctionMap<TContext, TEvent, TActor, TAction>;\n  actors: Record<\n    string,\n    | AnyActorLogic\n    | {\n        src: AnyActorLogic;\n        input: Mapper<TContext, TEvent, unknown, TEvent> | NonReducibleUnknown;\n      }\n  >;\n  delays: DelayFunctionMap<TContext, TEvent, TAction>;\n}\n\ntype MaybeNarrowedEvent<TIndexedEvents, TCausingLookup, K> = Cast<\n  Prop<\n    TIndexedEvents,\n    K extends keyof TCausingLookup\n      ? TCausingLookup[K]\n      : TIndexedEvents[keyof TIndexedEvents]\n  >,\n  EventObject\n>;\n\ntype MachineImplementationsActions<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TEventsCausingActions = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'eventsCausingActions'\n  >,\n  TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>,\n  TIndexedActors = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActors'>,\n  TIndexedActions = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'indexedActions'\n  >,\n  TIndexedGuards = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedGuards'>,\n  TIndexedDelays = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedDelays'>\n> = {\n  [K in keyof TIndexedActions]?: ActionFunction<\n    TContext,\n    MaybeNarrowedEvent<TIndexedEvents, TEventsCausingActions, K>,\n    Cast<Prop<TIndexedEvents, keyof TIndexedEvents>, EventObject>,\n    GetParameterizedParams<Cast<TIndexedActions[K], ParameterizedObject>>,\n    Cast<Prop<TIndexedActors, keyof TIndexedActors>, ProvidedActor>,\n    Cast<Prop<TIndexedActions, keyof TIndexedActions>, ParameterizedObject>,\n    Cast<Prop<TIndexedGuards, keyof TIndexedGuards>, ParameterizedObject>,\n    Cast<\n      Prop<TIndexedDelays, keyof TIndexedDelays>,\n      ParameterizedObject\n    >['type']\n  >;\n};\n\ntype MachineImplementationsActors<\n  _TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TIndexedActors = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActors'>,\n  _TInvokeSrcNameMap = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'invokeSrcNameMap'\n  >\n> = {\n  [K in keyof TIndexedActors]?: Cast<\n    Prop<TIndexedActors[K], 'logic'>,\n    AnyActorLogic\n  >;\n};\n\ntype MachineImplementationsDelays<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TEventsCausingDelays = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'eventsCausingDelays'\n  >,\n  TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>,\n  TIndexedActions = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'indexedActions'\n  >,\n  TIndexedDelays = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedDelays'>\n> = {\n  [K in keyof TIndexedDelays]?: DelayConfig<\n    TContext,\n    MaybeNarrowedEvent<TIndexedEvents, TEventsCausingDelays, K>,\n    // delays in referenced send actions might use specific `TAction`\n    // delays executed by auto-generated send actions related to after transitions won't have that\n    // since they are effectively implicit inline actions\n    | Cast<\n        Prop<Prop<TIndexedActions, keyof TIndexedActions>, 'params'>,\n        ParameterizedObject['params'] | undefined\n      >\n    | undefined,\n    Cast<Prop<TIndexedEvents, keyof TIndexedEvents>, EventObject>\n  >;\n};\n\ntype MachineImplementationsGuards<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TEventsCausingGuards = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'eventsCausingGuards'\n  >,\n  TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>,\n  TIndexedGuards = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedGuards'>\n> = {\n  [K in keyof TIndexedGuards]?: Guard<\n    TContext,\n    MaybeNarrowedEvent<TIndexedEvents, TEventsCausingGuards, K>,\n    GetParameterizedParams<\n      Cast<TIndexedGuards[K], ParameterizedObject | undefined>\n    >,\n    Cast<Prop<TIndexedGuards, keyof TIndexedGuards>, ParameterizedObject>\n  >;\n};\n\ntype MakeKeysRequired<T extends string> = { [K in T]: unknown };\n\ntype MaybeMakeMissingImplementationsRequired<\n  TImplementationType,\n  TMissingImplementationsForType,\n  TRequireMissingImplementations\n> = TRequireMissingImplementations extends true\n  ? IsNever<TMissingImplementationsForType> extends true\n    ? {}\n    : {\n        [K in Cast<TImplementationType, string>]: MakeKeysRequired<\n          Cast<TMissingImplementationsForType, string>\n        >;\n      }\n  : {};\n\ntype GenerateActionsImplementationsPart<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TRequireMissingImplementations,\n  TMissingImplementations\n> = Compute<\n  MaybeMakeMissingImplementationsRequired<\n    'actions',\n    Prop<TMissingImplementations, 'actions'>,\n    TRequireMissingImplementations\n  > & {\n    actions?: MachineImplementationsActions<TContext, TResolvedTypesMeta>;\n  }\n>;\n\ntype GenerateActorsImplementationsPart<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TRequireMissingImplementations,\n  TMissingImplementations\n> = Compute<\n  MaybeMakeMissingImplementationsRequired<\n    'actors',\n    Prop<TMissingImplementations, 'actors'>,\n    TRequireMissingImplementations\n  > & {\n    actors?: MachineImplementationsActors<TContext, TResolvedTypesMeta>;\n  }\n>;\n\ntype GenerateDelaysImplementationsPart<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TRequireMissingImplementations,\n  TMissingImplementations\n> = Compute<\n  MaybeMakeMissingImplementationsRequired<\n    'delays',\n    Prop<TMissingImplementations, 'delays'>,\n    TRequireMissingImplementations\n  > & {\n    delays?: MachineImplementationsDelays<TContext, TResolvedTypesMeta>;\n  }\n>;\n\ntype GenerateGuardsImplementationsPart<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TRequireMissingImplementations,\n  TMissingImplementations\n> = Compute<\n  MaybeMakeMissingImplementationsRequired<\n    'guards',\n    Prop<TMissingImplementations, 'guards'>,\n    TRequireMissingImplementations\n  > & {\n    guards?: MachineImplementationsGuards<TContext, TResolvedTypesMeta>;\n  }\n>;\n\nexport type InternalMachineImplementations<\n  TContext extends MachineContext,\n  TResolvedTypesMeta,\n  TRequireMissingImplementations extends boolean = false,\n  TMissingImplementations = Prop<\n    Prop<TResolvedTypesMeta, 'resolved'>,\n    'missingImplementations'\n  >\n> =\n  // TODO: remove per-Generate* Computes\n  Compute<\n    GenerateActionsImplementationsPart<\n      TContext,\n      TResolvedTypesMeta,\n      TRequireMissingImplementations,\n      TMissingImplementations\n    > &\n      GenerateActorsImplementationsPart<\n        TContext,\n        TResolvedTypesMeta,\n        TRequireMissingImplementations,\n        TMissingImplementations\n      > &\n      GenerateDelaysImplementationsPart<\n        TContext,\n        TResolvedTypesMeta,\n        TRequireMissingImplementations,\n        TMissingImplementations\n      > &\n      GenerateGuardsImplementationsPart<\n        TContext,\n        TResolvedTypesMeta,\n        TRequireMissingImplementations,\n        TMissingImplementations\n      >\n  >;\n\nexport type MachineImplementations<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor = ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject,\n  TDelay extends string = string,\n  TTag extends string = string,\n  TTypesMeta extends TypegenConstraint = TypegenDisabled\n> = InternalMachineImplementations<\n  TContext,\n  ResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag>\n>;\n\ntype InitialContext<\n  TContext extends MachineContext,\n  TActor extends ProvidedActor,\n  TInput,\n  TEvent extends EventObject\n> = TContext | ContextFactory<TContext, TActor, TInput, TEvent>;\n\nexport type ContextFactory<\n  TContext extends MachineContext,\n  TActor extends ProvidedActor,\n  TInput,\n  TEvent extends EventObject = EventObject\n> = ({\n  spawn,\n  input,\n  self\n}: {\n  spawn: Spawner<TActor>;\n  input: TInput;\n  self: ActorRef<\n    MachineSnapshot<\n      TContext,\n      TEvent,\n      Record<string, AnyActorRef | undefined>, // TODO: this should be replaced with `TChildren`\n      StateValue,\n      string,\n      unknown\n    >,\n    TEvent\n  >;\n}) => TContext;\n\nexport type MachineConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor = ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject,\n  TDelay extends string = string,\n  TTag extends string = string,\n  TInput = any,\n  TOutput = unknown,\n  TTypesMeta = TypegenDisabled\n> = (Omit<\n  StateNodeConfig<\n    NoInfer<TContext>,\n    NoInfer<TEvent>,\n    NoInfer<TActor>,\n    NoInfer<TAction>,\n    NoInfer<TGuard>,\n    NoInfer<TDelay>,\n    NoInfer<TTag>,\n    NoInfer<TOutput>\n  >,\n  'output'\n> & {\n  /**\n   * The initial context (extended state)\n   */\n  /**\n   * The machine's own version.\n   */\n  version?: string;\n  // TODO: make it conditionally required\n  output?: Mapper<TContext, DoneStateEvent, TOutput, TEvent> | TOutput;\n}) &\n  (MachineContext extends TContext\n    ? { context?: InitialContext<LowInfer<TContext>, TActor, TInput, TEvent> }\n    : { context: InitialContext<LowInfer<TContext>, TActor, TInput, TEvent> });\n\nexport interface ProvidedActor {\n  src: string;\n  logic: UnknownActorLogic;\n  id?: string;\n}\n\nexport interface SetupTypes<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildrenMap extends Record<string, string>,\n  TTag extends string,\n  TInput,\n  TOutput\n> {\n  context?: TContext;\n  events?: TEvent;\n  children?: TChildrenMap;\n  tags?: TTag;\n  input?: TInput;\n  output?: TOutput;\n}\n\nexport interface MachineTypes<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TTag extends string,\n  TInput,\n  TOutput,\n  TTypesMeta = TypegenDisabled\n> extends SetupTypes<\n    TContext,\n    TEvent,\n    // in machine types we currently don't support `TChildren`\n    // and IDs can still be configured through `TActor['id']`\n    never,\n    TTag,\n    TInput,\n    TOutput\n  > {\n  actors?: TActor;\n  actions?: TAction;\n  guards?: TGuard;\n  delays?: TDelay;\n  typegen?: TTypesMeta;\n}\n\nexport interface HistoryStateNode<TContext extends MachineContext>\n  extends StateNode<TContext> {\n  history: 'shallow' | 'deep';\n  target: string | undefined;\n}\n\nexport type HistoryValue<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> = Record<string, Array<StateNode<TContext, TEvent>>>;\n\nexport type AnyHistoryValue = HistoryValue<any, any>;\n\nexport type StateFrom<\n  T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine)\n> = T extends AnyStateMachine\n  ? ReturnType<T['transition']>\n  : T extends (...args: any[]) => AnyStateMachine\n    ? ReturnType<ReturnType<T>['transition']>\n    : never;\n\nexport type Transitions<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> = Array<TransitionDefinition<TContext, TEvent>>;\n\nexport interface DoneActorEvent<TOutput = unknown> {\n  type: `xstate.done.actor.${string}`;\n  output: TOutput;\n}\n\nexport interface ErrorActorEvent<TErrorData = unknown> extends EventObject {\n  type: `xstate.error.actor.${string}`;\n  error: TErrorData;\n}\n\nexport interface SnapshotEvent<\n  TSnapshot extends Snapshot<unknown> = Snapshot<unknown>\n> extends EventObject {\n  type: `xstate.snapshot.${string}`;\n  snapshot: TSnapshot;\n}\n\nexport interface DoneStateEvent<TOutput = unknown> extends EventObject {\n  type: `xstate.done.state.${string}`;\n  output: TOutput;\n}\n\nexport type DelayExpr<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> = (\n  args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n  params: TParams\n) => number;\n\nexport type LogExpr<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> = (\n  args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n  params: TParams\n) => unknown;\n\nexport type SendExpr<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TSentEvent extends EventObject,\n  TEvent extends EventObject\n> = (\n  args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n  params: TParams\n) => TSentEvent;\n\nexport enum SpecialTargets {\n  Parent = '#_parent',\n  Internal = '#_internal'\n}\n\nexport interface SendToActionOptions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n> extends RaiseActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    TEvent,\n    TDelay\n  > {}\n\nexport interface RaiseActionOptions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n> {\n  id?: string;\n  delay?:\n    | Delay<TDelay>\n    | DelayExpr<TContext, TExpressionEvent, TParams, TEvent>;\n}\n\nexport interface RaiseActionParams<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n> extends RaiseActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    TEvent,\n    TDelay\n  > {\n  event: TEvent | SendExpr<TContext, TExpressionEvent, TParams, TEvent, TEvent>;\n}\n\nexport interface SendToActionParams<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TSentEvent extends EventObject,\n  TEvent extends EventObject,\n  TDelay extends string\n> extends SendToActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    TEvent,\n    TDelay\n  > {\n  event:\n    | TSentEvent\n    | SendExpr<TContext, TExpressionEvent, TParams, TSentEvent, TEvent>;\n}\n\nexport type Assigner<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> = (\n  args: AssignArgs<TContext, TExpressionEvent, TEvent, TActor>,\n  params: TParams\n) => Partial<TContext>;\n\nexport type PartialAssigner<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TKey extends keyof TContext\n> = (\n  args: AssignArgs<TContext, TExpressionEvent, TEvent, TActor>,\n  params: TParams\n) => TContext[TKey];\n\nexport type PropertyAssigner<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor\n> = {\n  [K in keyof TContext]?:\n    | PartialAssigner<TContext, TExpressionEvent, TParams, TEvent, TActor, K>\n    | TContext[K];\n};\n\nexport type Mapper<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TResult,\n  TEvent extends EventObject\n> = (args: {\n  context: TContext;\n  event: TExpressionEvent;\n  self: ActorRef<\n    MachineSnapshot<\n      TContext,\n      TEvent,\n      Record<string, AnyActorRef>, // TODO: this should be replaced with `TChildren`\n      StateValue,\n      string,\n      unknown\n    >,\n    TEvent\n  >;\n}) => TResult;\n\nexport interface TransitionDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends Omit<\n    TransitionConfig<TContext, TEvent, TEvent, TODO, TODO, TODO, TODO>,\n    | 'target'\n    // `guard` is correctly rejected by `extends` here and `actions` should be too\n    // however, `any` passed to `TransitionConfig` as `TAction` collapses its `.actions` to `any` and it's accidentally allowed here\n    // it doesn't exactly have to be incorrect, we are overriding this here anyway but it looks like a lucky accident rather than smth done on purpose\n    | 'guard'\n  > {\n  target: ReadonlyArray<StateNode<TContext, TEvent>> | undefined;\n  source: StateNode<TContext, TEvent>;\n  actions: readonly UnknownAction[];\n  reenter: boolean;\n  guard?: UnknownGuard;\n  eventType: EventDescriptor<TEvent>;\n  toJSON: () => {\n    target: string[] | undefined;\n    source: string;\n    actions: readonly UnknownAction[];\n    guard?: UnknownGuard;\n    eventType: EventDescriptor<TEvent>;\n    meta?: Record<string, any>;\n  };\n}\n\nexport type AnyTransitionDefinition = TransitionDefinition<any, any>;\n\nexport interface InitialTransitionDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends TransitionDefinition<TContext, TEvent> {\n  target: ReadonlyArray<StateNode<TContext, TEvent>>;\n  guard?: never;\n}\n\nexport type TransitionDefinitionMap<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> = {\n  [K in EventDescriptor<TEvent>]: Array<\n    TransitionDefinition<TContext, ExtractEvent<TEvent, K>>\n  >;\n};\n\nexport interface DelayedTransitionDefinition<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> extends TransitionDefinition<TContext, TEvent> {\n  delay: number | string | DelayExpr<TContext, TEvent, undefined, TEvent>;\n}\n\nexport interface StateLike<TContext extends MachineContext> {\n  value: StateValue;\n  context: TContext;\n  event: EventObject;\n}\n\nexport interface StateConfig<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> {\n  context: TContext;\n  historyValue?: HistoryValue<TContext, TEvent>;\n  /**\n   * @internal\n   */\n  _nodes: Array<StateNode<TContext, TEvent>>;\n  children: Record<string, ActorRef<any, any>>;\n  status: 'active' | 'done' | 'error' | 'stopped';\n  output?: any;\n  error?: unknown;\n  machine?: StateMachine<\n    TContext,\n    TEvent,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  >;\n}\n\nexport interface ActorOptions<TLogic extends AnyActorLogic> {\n  /**\n   * The clock that is responsible for setting and clearing timeouts, such as delayed events and transitions.\n   *\n   * @remarks\n   * You can create your own “clock”. The clock interface is an object with two functions/methods:\n   *\n   * - `setTimeout` - same arguments as `window.setTimeout(fn, timeout)`\n   * - `clearTimeout` - same arguments as `window.clearTimeout(id)`\n   *\n   * By default, the native `setTimeout` and `clearTimeout` functions are used.\n   *\n   * For testing, XState provides `SimulatedClock`.\n   *\n   * @see {@link Clock}\n   * @see {@link SimulatedClock}\n   */\n  clock?: Clock;\n  /**\n   * Specifies the logger to be used for `log(...)` actions. Defaults to the native `console.log(...)` method.\n   */\n  logger?: (...args: any[]) => void;\n  parent?: ActorRef<any, any>;\n  /**\n   * @internal\n   */\n  syncSnapshot?: boolean;\n  /**\n   * The custom `id` for referencing this service.\n   */\n  id?: string;\n  /**\n   * @deprecated Use `inspect` instead.\n   */\n  devTools?: never;\n\n  /**\n   * The system ID to register this actor under.\n   */\n  systemId?: string;\n  /**\n   * The input data to pass to the actor.\n   */\n  input?: InputFrom<TLogic>;\n\n  /**\n   * Initializes actor logic from a specific persisted internal state.\n   *\n   * @remarks\n   *\n   * If the state is compatible with the actor logic, when the actor is started it will be at that persisted state.\n   * Actions from machine actors will not be re-executed, because they are assumed to have been already executed.\n   * However, invocations will be restarted, and spawned actors will be restored recursively.\n   *\n   * Can be generated with {@link Actor.getPersistedSnapshot}.\n   *\n   * @see https://stately.ai/docs/persistence\n   */\n  snapshot?: Snapshot<unknown>;\n\n  /**\n   * @deprecated Use `snapshot` instead.\n   */\n  state?: Snapshot<unknown>;\n\n  /**\n   * The source actor logic.\n   */\n  src?: string | AnyActorLogic;\n\n  /**\n   * A callback function or observer object which can be used to inspect actor system updates.\n   *\n   * @remarks\n   * If a callback function is provided, it can accept an inspection event argument. The types of inspection events that can be observed include:\n   *\n   * - `@xstate.actor` - An actor ref has been created in the system\n   * - `@xstate.event` - An event was sent from a source actor ref to a target actor ref in the system\n   * - `@xstate.snapshot` - An actor ref emitted a snapshot due to a received event\n   *\n   * @example\n   * ```ts\n   * import { createMachine } from 'xstate';\n   *\n   * const machine = createMachine({\n   *   // ...\n   * });\n   *\n   * const actor = createActor(machine, {\n   *   inspect: (inspectionEvent) => {\n   *     if (inspectionEvent.actorRef === actor) {\n   *       // This event is for the root actor\n   *     }\n   *\n   *     if (inspectionEvent.type === '@xstate.actor') {\n   *       console.log(inspectionEvent.actorRef);\n   *     }\n   *\n   *     if (inspectionEvent.type === '@xstate.event') {\n   *       console.log(inspectionEvent.sourceRef);\n   *       console.log(inspectionEvent.actorRef);\n   *       console.log(inspectionEvent.event);\n   *     }\n   *\n   *     if (inspectionEvent.type === '@xstate.snapshot') {\n   *       console.log(inspectionEvent.actorRef);\n   *       console.log(inspectionEvent.event);\n   *       console.log(inspectionEvent.snapshot);\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * Alternately, an observer object (`{ next?, error?, complete? }`) can be provided:\n   *\n   * @example\n   * ```ts\n   * const actor = createActor(machine, {\n   *   inspect: {\n   *     next: (inspectionEvent) => {\n   *       if (inspectionEvent.actorRef === actor) {\n   *         // This event is for the root actor\n   *       }\n   *\n   *       if (inspectionEvent.type === '@xstate.actor') {\n   *         console.log(inspectionEvent.actorRef);\n   *       }\n   *\n   *       if (inspectionEvent.type === '@xstate.event') {\n   *         console.log(inspectionEvent.sourceRef);\n   *         console.log(inspectionEvent.actorRef);\n   *         console.log(inspectionEvent.event);\n   *       }\n   *\n   *       if (inspectionEvent.type === '@xstate.snapshot') {\n   *         console.log(inspectionEvent.actorRef);\n   *         console.log(inspectionEvent.event);\n   *         console.log(inspectionEvent.snapshot);\n   *       }\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  inspect?:\n    | Observer<InspectionEvent>\n    | ((inspectionEvent: InspectionEvent) => void);\n}\n\nexport type AnyActor = Actor<any>;\n\n/**\n * @deprecated Use `AnyActor` instead.\n */\nexport type AnyInterpreter = AnyActor;\n\n// Based on RxJS types\nexport type Observer<T> = {\n  next?: (value: T) => void;\n  error?: (err: unknown) => void;\n  complete?: () => void;\n};\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\n/**\n * @internal\n */\nexport interface InteropObservable<T> {\n  [Symbol.observable]: () => InteropSubscribable<T>;\n}\n\n/**\n * @internal\n */\nexport interface InteropSubscribable<T> {\n  subscribe(observer: Observer<T>): Subscription;\n}\n\nexport interface Subscribable<T> extends InteropSubscribable<T> {\n  subscribe(observer: Observer<T>): Subscription;\n  subscribe(\n    next: (value: T) => void,\n    error?: (error: any) => void,\n    complete?: () => void\n  ): Subscription;\n}\n\ntype EventDescriptorMatches<\n  TEventType extends string,\n  TNormalizedDescriptor\n> = TEventType extends TNormalizedDescriptor ? true : false;\n\nexport type ExtractEvent<\n  TEvent extends EventObject,\n  TDescriptor extends EventDescriptor<TEvent>\n> = string extends TEvent['type']\n  ? TEvent\n  : NormalizeDescriptor<TDescriptor> extends infer TNormalizedDescriptor\n    ? TEvent extends any\n      ? // true is the check type here to match both true and boolean\n        true extends EventDescriptorMatches<\n          TEvent['type'],\n          TNormalizedDescriptor\n        >\n        ? TEvent\n        : never\n      : never\n    : never;\n\nexport interface BaseActorRef<TEvent extends EventObject> {\n  send: (event: TEvent) => void;\n}\n\nexport interface ActorLike<TCurrent, TEvent extends EventObject>\n  extends Subscribable<TCurrent> {\n  send: (event: TEvent) => void;\n}\n\nexport interface ActorRef<\n  TSnapshot extends Snapshot<unknown>,\n  TEvent extends EventObject\n> extends Subscribable<TSnapshot>,\n    InteropObservable<TSnapshot> {\n  /**\n   * The unique identifier for this actor relative to its parent.\n   */\n  id: string;\n  sessionId: string;\n  /** @internal */\n  _send: (event: TEvent) => void;\n  send: (event: TEvent) => void;\n  start: () => void;\n  getSnapshot: () => TSnapshot;\n  getPersistedSnapshot: () => Snapshot<unknown>;\n  stop: () => void;\n  toJSON?: () => any;\n  // TODO: figure out how to hide this externally as `sendTo(ctx => ctx.actorRef._parent._parent._parent._parent)` shouldn't be allowed\n  _parent?: ActorRef<any, any>;\n  system: AnyActorSystem;\n  /** @internal */\n  _processingStatus: ProcessingStatus;\n  src: string | AnyActorLogic;\n}\n\nexport type AnyActorRef = ActorRef<any, any>;\n\nexport type ActorLogicFrom<T> = ReturnTypeOrValue<T> extends infer R\n  ? R extends StateMachine<\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any\n    >\n    ? R\n    : R extends Promise<infer U>\n      ? PromiseActorLogic<U>\n      : never\n  : never;\n\nexport type ActorRefFrom<T> = ReturnTypeOrValue<T> extends infer R\n  ? R extends StateMachine<\n      infer TContext,\n      infer TEvent,\n      infer TChildren,\n      infer _TActor,\n      infer _TAction,\n      infer _TGuard,\n      infer _TDelay,\n      infer TStateValue,\n      infer TTag,\n      infer _TInput,\n      infer TOutput,\n      infer _TResolvedTypesMeta\n    >\n    ? ActorRef<\n        MachineSnapshot<\n          TContext,\n          TEvent,\n          TChildren,\n          TStateValue,\n          TTag,\n          TOutput\n        >,\n        TEvent\n      >\n    : R extends Promise<infer U>\n      ? ActorRefFrom<PromiseActorLogic<U>>\n      : R extends ActorLogic<\n            infer TSnapshot,\n            infer TEvent,\n            infer _TInput,\n            infer _TSystem\n          >\n        ? ActorRef<TSnapshot, TEvent>\n        : never\n  : never;\n\nexport type DevToolsAdapter = (service: AnyActor) => void;\n\n/**\n * @deprecated Use `Actor<T>` instead.\n */\nexport type InterpreterFrom<\n  T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine)\n> = ReturnTypeOrValue<T> extends StateMachine<\n  infer TContext,\n  infer TEvent,\n  infer TChildren,\n  infer _TActor,\n  infer _TAction,\n  infer _TGuard,\n  infer _TDelay,\n  infer TStateValue,\n  infer TTag,\n  infer TInput,\n  infer TOutput,\n  infer _TResolvedTypesMeta\n>\n  ? Actor<\n      ActorLogic<\n        MachineSnapshot<\n          TContext,\n          TEvent,\n          TChildren,\n          TStateValue,\n          TTag,\n          TOutput\n        >,\n        TEvent,\n        TInput,\n        AnyActorSystem\n      >\n    >\n  : never;\n\nexport type MachineImplementationsFrom<\n  T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine),\n  TRequireMissingImplementations extends boolean = false\n> = ReturnTypeOrValue<T> extends StateMachine<\n  infer TContext,\n  infer _TEvent,\n  infer _TChildren,\n  infer _TActor,\n  infer _TAction,\n  infer _TGuard,\n  infer _TDelay,\n  infer _TStateValue,\n  infer _TTag,\n  infer _TInput,\n  infer _TOutput,\n  infer TResolvedTypesMeta\n>\n  ? InternalMachineImplementations<\n      TContext,\n      TResolvedTypesMeta,\n      TRequireMissingImplementations\n    >\n  : never;\n\n// only meant to be used internally for debugging purposes\nexport type __ResolvedTypesMetaFrom<T> = T extends StateMachine<\n  any, // context\n  any, // event\n  any, // children\n  any, // actor\n  any, // action\n  any, // guard\n  any, // delay\n  any, // state value\n  any, // tag\n  any, // input\n  any, // output\n  infer TResolvedTypesMeta\n>\n  ? TResolvedTypesMeta\n  : never;\n\nexport interface ActorScope<\n  TSnapshot extends Snapshot<unknown>,\n  TEvent extends EventObject,\n  TSystem extends AnyActorSystem = AnyActorSystem\n> {\n  self: ActorRef<TSnapshot, TEvent>;\n  id: string;\n  sessionId: string;\n  logger: (...args: any[]) => void;\n  defer: (fn: () => void) => void;\n  system: TSystem;\n  stopChild: (child: AnyActorRef) => void;\n}\n\nexport type AnyActorScope = ActorScope<any, any, AnyActorSystem>;\n\nexport type Snapshot<TOutput> =\n  | {\n      status: 'active';\n      output: undefined;\n      error: undefined;\n    }\n  | {\n      status: 'done';\n      output: TOutput;\n      error: undefined;\n    }\n  | {\n      status: 'error';\n      output: undefined;\n      error: unknown;\n    }\n  | {\n      status: 'stopped';\n      output: undefined;\n      error: undefined;\n    };\n\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\nexport interface ActorLogic<\n  in out TSnapshot extends Snapshot<unknown>, // it's invariant because it's also part of `ActorScope[\"self\"][\"getSnapshot\"]`\n  in out TEvent extends EventObject, // it's invariant because it's also part of `ActorScope[\"self\"][\"send\"]`\n  in TInput = NonReducibleUnknown,\n  TSystem extends AnyActorSystem = AnyActorSystem\n> {\n  /** The initial setup/configuration used to create the actor logic. */\n  config?: unknown;\n  /**\n   * Transition function that processes the current state and an incoming message\n   * to produce a new state.\n   * @param snapshot - The current state.\n   * @param message - The incoming message.\n   * @param actorScope - The actor scope.\n   * @returns The new state.\n   */\n  transition: (\n    snapshot: TSnapshot,\n    message: TEvent,\n    actorScope: ActorScope<TSnapshot, TEvent, TSystem>\n  ) => TSnapshot;\n  /**\n   * Called to provide the initial state of the actor.\n   * @param actorScope - The actor scope.\n   * @param input - The input for the initial state.\n   * @returns The initial state.\n   */\n  getInitialSnapshot: (\n    actorScope: ActorScope<TSnapshot, TEvent, TSystem>,\n    input: TInput\n  ) => TSnapshot;\n  /**\n   * Called when Actor is created to restore the internal state of the actor given a persisted state.\n   * The persisted state can be created by `getPersistedSnapshot`.\n   * @param persistedState - The persisted state to restore from.\n   * @param actorScope - The actor scope.\n   * @returns The restored state.\n   */\n  restoreSnapshot?: (\n    persistedState: Snapshot<unknown>,\n    actorScope: ActorScope<TSnapshot, TEvent>\n  ) => TSnapshot;\n  /**\n   * Called when the actor is started.\n   * @param snapshot - The starting state.\n   * @param actorScope - The actor scope.\n   */\n  start?: (\n    snapshot: TSnapshot,\n    actorScope: ActorScope<TSnapshot, TEvent>\n  ) => void;\n  /**\n   * Obtains the internal state of the actor in a representation which can be be persisted.\n   * The persisted state can be restored by `restoreSnapshot`.\n   * @param snapshot - The current state.\n   * @returns The a representation of the internal state to be persisted.\n   */\n  getPersistedSnapshot: (\n    snapshot: TSnapshot,\n    options?: unknown\n  ) => Snapshot<unknown>;\n}\n\nexport type AnyActorLogic = ActorLogic<\n  any, // snapshot\n  any, // event\n  any, // input\n  any // system\n>;\n\nexport type UnknownActorLogic = ActorLogic<any, any, never, AnyActorSystem>;\n\nexport type SnapshotFrom<T> = ReturnTypeOrValue<T> extends infer R\n  ? R extends ActorRef<infer TSnapshot, infer _>\n    ? TSnapshot\n    : R extends Actor<infer TLogic>\n      ? SnapshotFrom<TLogic>\n      : R extends ActorLogic<infer _, infer __, infer ___, infer ____>\n        ? ReturnType<R['transition']>\n        : R extends ActorScope<infer TSnapshot, infer _, infer __>\n          ? TSnapshot\n          : never\n  : never;\n\nexport type EventFromLogic<TLogic extends ActorLogic<any, any, any, any>> =\n  TLogic extends ActorLogic<infer _, infer TEvent, infer __, infer _____>\n    ? TEvent\n    : never;\n\ntype ResolveEventType<T> = ReturnTypeOrValue<T> extends infer R\n  ? R extends StateMachine<\n      infer _TContext,\n      infer TEvent,\n      infer _TChildren,\n      infer _TActor,\n      infer _TAction,\n      infer _TGuard,\n      infer _TDelay,\n      infer _TStateValue,\n      infer _TTag,\n      infer _TInput,\n      infer _TOutput,\n      infer _TResolvedTypesMeta\n    >\n    ? TEvent\n    : R extends MachineSnapshot<\n          infer _TContext,\n          infer TEvent,\n          infer _TChildren,\n          infer _TStateValue,\n          infer _TTag,\n          infer _TOutput\n        >\n      ? TEvent\n      : R extends ActorRef<infer _, infer TEvent>\n        ? TEvent\n        : never\n  : never;\n\nexport type EventFrom<\n  T,\n  K extends Prop<TEvent, 'type'> = never,\n  TEvent extends EventObject = ResolveEventType<T>\n> = IsNever<K> extends true ? TEvent : ExtractEvent<TEvent, K>;\n\nexport type ContextFrom<T> = ReturnTypeOrValue<T> extends infer R\n  ? R extends StateMachine<\n      infer TContext,\n      infer _TEvent,\n      infer _TChildren,\n      infer _TActor,\n      infer _TAction,\n      infer _TGuard,\n      infer _TDelay,\n      infer _TStateValue,\n      infer _TTag,\n      infer _TInput,\n      infer _TOutput,\n      infer _TResolvedTypesMeta\n    >\n    ? TContext\n    : R extends MachineSnapshot<\n          infer TContext,\n          infer _TEvent,\n          infer _TChildren,\n          infer _TStateValue,\n          infer _TTag,\n          infer _TOutput\n        >\n      ? TContext\n      : R extends Actor<infer TActorLogic>\n        ? TActorLogic extends StateMachine<\n            infer TContext,\n            infer _TEvent,\n            infer _TChildren,\n            infer _TActor,\n            infer _TAction,\n            infer _TGuard,\n            infer _TDelay,\n            infer _TTag,\n            infer _TInput,\n            infer _TOutput,\n            infer _TResolvedTypesMeta\n          >\n          ? TContext\n          : never\n        : never\n  : never;\n\nexport type InferEvent<E extends EventObject> = {\n  [T in E['type']]: { type: T } & Extract<E, { type: T }>;\n}[E['type']];\n\nexport type TODO = any;\n\nexport type StateValueFrom<TMachine extends AnyStateMachine> = Parameters<\n  StateFrom<TMachine>['matches']\n>[0];\n\nexport type TagsFrom<TMachine extends AnyStateMachine> = Parameters<\n  StateFrom<TMachine>['hasTag']\n>[0];\n\nexport interface ActorSystemInfo {\n  actors: Record<string, AnyActorRef>;\n}\n\nexport type RequiredActorOptions<TActor extends ProvidedActor> =\n  | (undefined extends TActor['id'] ? never : 'id')\n  | (undefined extends InputFrom<TActor['logic']> ? never : 'input');\n\ntype ExtractLiteralString<T extends string | undefined> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\ntype ToConcreteChildren<TActor extends ProvidedActor> = {\n  [A in TActor as ExtractLiteralString<A['id']>]?: ActorRefFrom<A['logic']>;\n};\n\nexport type ToChildren<TActor extends ProvidedActor> =\n  // only proceed further if all configured `src`s are literal strings\n  string extends TActor['src']\n    ? // TODO: replace `AnyActorRef` with `UnknownActorRef`~\n      // or maybe even `TActor[\"logic\"]` since it's possible to configure `{ src: string; logic: SomeConcreteLogic }`\n      // TODO: consider adding `| undefined` here\n      Record<string, AnyActorRef>\n    : ToConcreteChildren<TActor> &\n        {\n          include: {\n            [id: string]: TActor extends any\n              ? ActorRefFrom<TActor['logic']> | undefined\n              : never;\n          };\n          exclude: {};\n        }[undefined extends TActor['id'] // if not all actors have literal string IDs then we need to create an index signature containing all possible actor types\n          ? 'include'\n          : string extends TActor['id']\n            ? 'include'\n            : 'exclude'];\n\nexport type StateSchema = {\n  states?: Record<string, StateSchema>;\n};\n","import isDevelopment from '#is-development';\nimport { XSTATE_ERROR } from '../constants.ts';\nimport { createErrorActorEvent } from '../eventUtils.ts';\nimport {\n  ActionArgs,\n  ActorRef,\n  AnyActorRef,\n  AnyActorScope,\n  AnyEventObject,\n  AnyMachineSnapshot,\n  Cast,\n  DelayExpr,\n  EventFrom,\n  EventObject,\n  InferEvent,\n  MachineContext,\n  NoInfer,\n  ParameterizedObject,\n  SendExpr,\n  SendToActionOptions,\n  SpecialTargets,\n  UnifiedArg\n} from '../types.ts';\n\nfunction resolveSendTo(\n  actorScope: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  args: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  {\n    to,\n    event: eventOrExpr,\n    id,\n    delay\n  }: {\n    to:\n      | AnyActorRef\n      | string\n      | ((\n          args: UnifiedArg<MachineContext, EventObject, EventObject>,\n          params: ParameterizedObject['params'] | undefined\n        ) => AnyActorRef | string);\n    event:\n      | EventObject\n      | SendExpr<\n          MachineContext,\n          EventObject,\n          ParameterizedObject['params'] | undefined,\n          EventObject,\n          EventObject\n        >;\n    id: string | undefined;\n    delay:\n      | string\n      | number\n      | DelayExpr<\n          MachineContext,\n          EventObject,\n          ParameterizedObject['params'] | undefined,\n          EventObject\n        >\n      | undefined;\n  },\n  extra: { deferredActorIds: string[] | undefined }\n) {\n  const delaysMap = snapshot.machine.implementations.delays;\n\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n      `Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`\n    );\n  }\n  const resolvedEvent =\n    typeof eventOrExpr === 'function'\n      ? eventOrExpr(args, actionParams)\n      : eventOrExpr;\n\n  let resolvedDelay: number | undefined;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay =\n      typeof configDelay === 'function'\n        ? configDelay(args, actionParams)\n        : configDelay;\n  } else {\n    resolvedDelay =\n      typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n\n  const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;\n  let targetActorRef: AnyActorRef | string | undefined;\n\n  if (typeof resolvedTarget === 'string') {\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorScope.self._parent;\n    } else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorScope.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = snapshot.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = extra.deferredActorIds?.includes(resolvedTarget)\n        ? resolvedTarget\n        : snapshot.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(\n        `Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`\n      );\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorScope.self;\n  }\n\n  return [\n    snapshot,\n    { to: targetActorRef, event: resolvedEvent, id, delay: resolvedDelay }\n  ];\n}\n\nfunction retryResolveSendTo(\n  _: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  params: {\n    to: AnyActorRef;\n    event: EventObject;\n    id: string | undefined;\n    delay: number | undefined;\n  }\n) {\n  if (typeof params.to === 'string') {\n    params.to = snapshot.children[params.to];\n  }\n}\n\nfunction executeSendTo(\n  actorScope: AnyActorScope,\n  params: {\n    to: AnyActorRef;\n    event: EventObject;\n    id: string | undefined;\n    delay: number | undefined;\n  }\n) {\n  // this forms an outgoing events queue\n  // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender\n  actorScope.defer(() => {\n    const { to, event, delay, id } = params;\n    if (typeof delay === 'number') {\n      actorScope.system.scheduler.schedule(\n        actorScope.self,\n        to,\n        event,\n        delay,\n        id\n      );\n      return;\n    }\n    actorScope.system._relay(\n      actorScope.self,\n      // at this point, in a deferred task, it should already be mutated by retryResolveSendTo\n      // if it initially started as a string\n      to as Exclude<typeof to, string>,\n      event.type === XSTATE_ERROR\n        ? createErrorActorEvent(actorScope.self.id, (event as any).data)\n        : event\n    );\n  });\n}\n\nexport interface SendToAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n  _out_TDelay?: TDelay;\n}\n\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event to send\n * @param options Send action options\n *  - `id` - The unique send event identifier (used with `cancel()`).\n *  - `delay` - The number of milliseconds to delay the sending of the event.\n */\nexport function sendTo<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TTargetActor extends AnyActorRef,\n  TEvent extends EventObject,\n  TDelay extends string\n>(\n  to:\n    | TTargetActor\n    | string\n    | ((\n        args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n        params: TParams\n      ) => TTargetActor | string),\n  eventOrExpr:\n    | EventFrom<TTargetActor>\n    | SendExpr<\n        TContext,\n        TExpressionEvent,\n        TParams,\n        InferEvent<Cast<EventFrom<TTargetActor>, EventObject>>,\n        TEvent\n      >,\n  options?: SendToActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    NoInfer<TEvent>,\n    NoInfer<TDelay>\n  >\n): SendToAction<TContext, TExpressionEvent, TParams, TEvent, TDelay> {\n  function sendTo(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  sendTo.type = 'xsnapshot.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n\n  sendTo.resolve = resolveSendTo;\n  sendTo.retryResolve = retryResolveSendTo;\n  sendTo.execute = executeSendTo;\n\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nexport function sendParent<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TSentEvent extends EventObject = AnyEventObject,\n  TEvent extends EventObject = AnyEventObject,\n  TDelay extends string = string\n>(\n  event:\n    | TSentEvent\n    | SendExpr<TContext, TExpressionEvent, TParams, TSentEvent, TEvent>,\n  options?: SendToActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    TEvent,\n    TDelay\n  >\n) {\n  return sendTo<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    AnyActorRef,\n    TEvent,\n    TDelay\n  >(SpecialTargets.Parent, event, options as any);\n}\n\ntype Target<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> =\n  | string\n  | ActorRef<any, any>\n  | ((\n      args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n      params: TParams\n    ) => string | ActorRef<any, any>);\n\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nexport function forwardTo<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject,\n  TDelay extends string\n>(\n  target: Target<TContext, TExpressionEvent, TParams, TEvent>,\n  options?: SendToActionOptions<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    TEvent,\n    TDelay\n  >\n) {\n  if (isDevelopment && (!target || typeof target === 'function')) {\n    const originalTarget = target;\n    target = (...args) => {\n      const resolvedTarget =\n        typeof originalTarget === 'function'\n          ? originalTarget(...args)\n          : originalTarget;\n      if (!resolvedTarget) {\n        throw new Error(\n          `Attempted to forward event to undefined actor. This risks an infinite loop in the sender.`\n        );\n      }\n      return resolvedTarget;\n    };\n  }\n  return sendTo<\n    TContext,\n    TExpressionEvent,\n    TParams,\n    AnyActorRef,\n    TEvent,\n    TDelay\n  >(target, ({ event }: any) => event, options);\n}\n","import isDevelopment from '#is-development';\nimport { Guard, evaluateGuard } from '../guards.ts';\nimport {\n  Action,\n  ActionArgs,\n  AnyActorRef,\n  AnyActorScope,\n  AnyMachineSnapshot,\n  EventObject,\n  MachineContext,\n  ParameterizedObject,\n  ProvidedActor,\n  UnifiedArg\n} from '../types.ts';\nimport { assign } from './assign.ts';\nimport { cancel } from './cancel.ts';\nimport { raise } from './raise.ts';\nimport { sendTo } from './send.ts';\nimport { spawnChild } from './spawnChild.ts';\nimport { stopChild } from './stopChild.ts';\n\ninterface ActionEnqueuer<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> {\n  (\n    action: Action<\n      TContext,\n      TExpressionEvent,\n      TEvent,\n      undefined,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay\n    >\n  ): void;\n  assign: (\n    ...args: Parameters<\n      typeof assign<TContext, TExpressionEvent, undefined, TEvent, TActor>\n    >\n  ) => void;\n  cancel: (\n    ...args: Parameters<\n      typeof cancel<TContext, TExpressionEvent, undefined, TEvent>\n    >\n  ) => void;\n  raise: (\n    ...args: Parameters<\n      typeof raise<TContext, TExpressionEvent, TEvent, undefined, TDelay>\n    >\n  ) => void;\n  sendTo: <TTargetActor extends AnyActorRef>(\n    ...args: Parameters<\n      typeof sendTo<\n        TContext,\n        TExpressionEvent,\n        undefined,\n        TTargetActor,\n        TEvent,\n        TDelay\n      >\n    >\n  ) => void;\n  spawnChild: (\n    ...args: Parameters<\n      typeof spawnChild<TContext, TExpressionEvent, undefined, TEvent, TActor>\n    >\n  ) => void;\n  stopChild: (\n    ...args: Parameters<\n      typeof stopChild<TContext, TExpressionEvent, undefined, TEvent>\n    >\n  ) => void;\n}\n\nfunction resolveEnqueueActions(\n  actorScope: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  args: ActionArgs<any, any, any>,\n  _actionParams: ParameterizedObject['params'] | undefined,\n  {\n    collect\n  }: {\n    collect: CollectActions<\n      MachineContext,\n      EventObject,\n      EventObject,\n      ProvidedActor,\n      ParameterizedObject,\n      ParameterizedObject,\n      string\n    >;\n  }\n) {\n  const actions: any[] = [];\n  const enqueue: Parameters<typeof collect>[0]['enqueue'] = function enqueue(\n    action\n  ) {\n    actions.push(action);\n  };\n  enqueue.assign = (...args) => {\n    actions.push(assign(...args));\n  };\n  enqueue.cancel = (...args) => {\n    actions.push(cancel(...args));\n  };\n  enqueue.raise = (...args) => {\n    actions.push(raise(...args));\n  };\n  enqueue.sendTo = (...args) => {\n    actions.push(sendTo(...args));\n  };\n  enqueue.spawnChild = (...args) => {\n    actions.push(spawnChild(...args));\n  };\n  enqueue.stopChild = (...args) => {\n    actions.push(stopChild(...args));\n  };\n\n  collect({\n    context: args.context,\n    event: args.event,\n    enqueue,\n    check: (guard) =>\n      evaluateGuard(guard, snapshot.context, args.event, snapshot),\n    self: actorScope.self,\n    system: actorScope.system\n  });\n\n  return [snapshot, undefined, actions];\n}\n\nexport interface EnqueueActionsAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: unknown): void;\n  _out_TEvent?: TEvent;\n  _out_TActor?: TActor;\n  _out_TAction?: TAction;\n  _out_TGuard?: TGuard;\n  _out_TDelay?: TDelay;\n}\n\ninterface CollectActionsArg<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> extends UnifiedArg<TContext, TExpressionEvent, TEvent> {\n  check: (\n    guard: Guard<TContext, TExpressionEvent, undefined, TGuard>\n  ) => boolean;\n  enqueue: ActionEnqueuer<\n    TContext,\n    TExpressionEvent,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >;\n}\n\ntype CollectActions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string\n> = ({\n  context,\n  event,\n  check,\n  enqueue,\n  self\n}: CollectActionsArg<\n  TContext,\n  TExpressionEvent,\n  TEvent,\n  TActor,\n  TAction,\n  TGuard,\n  TDelay\n>) => void;\n\n/**\n * Creates an action object that will execute actions that are queued by the `enqueue(action)` function.\n * \n * @example\n  ```ts\n  import { createMachine, enqueueActions } from 'xstate';\n\n  const machine = createMachine({\n    entry: enqueueActions(({ enqueue, check }) => {\n      enqueue.assign({ count: 0 });\n\n      if (check('someGuard')) {\n        enqueue.assign({ count: 1 });\n      }\n\n      enqueue('someAction');\n    })\n  })\n  ```\n */\nexport function enqueueActions<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TEvent extends EventObject = TExpressionEvent,\n  TActor extends ProvidedActor = ProvidedActor,\n  TAction extends ParameterizedObject = ParameterizedObject,\n  TGuard extends ParameterizedObject = ParameterizedObject,\n  TDelay extends string = string\n>(\n  collect: CollectActions<\n    TContext,\n    TExpressionEvent,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay\n  >\n): EnqueueActionsAction<\n  TContext,\n  TExpressionEvent,\n  TEvent,\n  TActor,\n  TAction,\n  TGuard,\n  TDelay\n> {\n  function enqueueActions(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: unknown\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  enqueueActions.type = 'xstate.enqueueActions';\n  enqueueActions.collect = collect;\n  enqueueActions.resolve = resolveEnqueueActions;\n\n  return enqueueActions;\n}\n","import isDevelopment from '#is-development';\nimport {\n  ActionArgs,\n  AnyActorScope,\n  AnyMachineSnapshot,\n  EventObject,\n  LogExpr,\n  MachineContext,\n  ParameterizedObject\n} from '../types.ts';\n\ntype ResolvableLogValue<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> = string | LogExpr<TContext, TExpressionEvent, TParams, TEvent>;\n\nfunction resolveLog(\n  _: AnyActorScope,\n  snapshot: AnyMachineSnapshot,\n  actionArgs: ActionArgs<any, any, any>,\n  actionParams: ParameterizedObject['params'] | undefined,\n  {\n    value,\n    label\n  }: {\n    value: ResolvableLogValue<any, any, any, any>;\n    label: string | undefined;\n  }\n) {\n  return [\n    snapshot,\n    {\n      value:\n        typeof value === 'function' ? value(actionArgs, actionParams) : value,\n      label\n    }\n  ];\n}\n\nfunction executeLog(\n  { logger }: AnyActorScope,\n  { value, label }: { value: unknown; label: string | undefined }\n) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n\nexport interface LogAction<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n> {\n  (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n\n/**\n *\n * @param expr The expression function to evaluate which will be logged.\n *  Takes in 2 arguments:\n *  - `ctx` - the current state context\n *  - `event` - the event that caused this action to be executed.\n * @param label The label to give to the logged expression.\n */\nexport function log<\n  TContext extends MachineContext,\n  TExpressionEvent extends EventObject,\n  TParams extends ParameterizedObject['params'] | undefined,\n  TEvent extends EventObject\n>(\n  value: ResolvableLogValue<TContext, TExpressionEvent, TParams, TEvent> = ({\n    context,\n    event\n  }) => ({ context, event }),\n  label?: string\n): LogAction<TContext, TExpressionEvent, TParams, TEvent> {\n  function log(\n    args: ActionArgs<TContext, TExpressionEvent, TEvent>,\n    params: TParams\n  ) {\n    if (isDevelopment) {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n\n  log.resolve = resolveLog;\n  log.execute = executeLog;\n\n  return log;\n}\n","import { AnyActorSystem } from '../system.ts';\nimport {\n  ActorLogic,\n  ActorRefFrom,\n  ActorScope,\n  EventObject,\n  NonReducibleUnknown,\n  Snapshot\n} from '../types.ts';\n\nexport type TransitionSnapshot<TContext> = Snapshot<undefined> & {\n  context: TContext;\n};\n\nexport type TransitionActorLogic<\n  TContext,\n  TEvent extends EventObject,\n  TInput extends NonReducibleUnknown\n> = ActorLogic<TransitionSnapshot<TContext>, TEvent, TInput, AnyActorSystem>;\n\nexport type TransitionActorRef<\n  TContext,\n  TEvent extends EventObject\n> = ActorRefFrom<\n  TransitionActorLogic<TransitionSnapshot<TContext>, TEvent, unknown>\n>;\n\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A “transition function” is a function that takes the current `state` and received `event` object as arguments, and returns the next state, similar to a reducer.\n *\n * Actors created from transition logic (“transition actors”) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function’s `state` is used as its transition actor’s `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial state argument, and is not the same as the State object of an actor or a state within a machine configuration.\n *\n * @param transition The transition function used to describe the transition logic. It should return the next state given the current state and event. It receives the following arguments:\n * - `state` - the current state.\n * - `event` - the received event.\n * - `actorScope` - the actor scope object, with properties like `self` and `system`.\n * @param initialContext The initial state of the transition function, either an object representing the state, or a function which returns a state object. If a function, it will receive as its only argument an object with the following properties:\n * - `input` - the `input` provided to its parent transition actor.\n * - `self` - a reference to its parent transition actor.\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n * @returns Actor logic\n *\n * @example\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1,\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 },\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n */\nexport function fromTransition<\n  TContext,\n  TEvent extends EventObject,\n  TSystem extends AnyActorSystem,\n  TInput extends NonReducibleUnknown\n>(\n  transition: (\n    snapshot: TContext,\n    event: TEvent,\n    actorScope: ActorScope<TransitionSnapshot<TContext>, TEvent, TSystem>\n  ) => TContext,\n  initialContext:\n    | TContext\n    | (({\n        input,\n        self\n      }: {\n        input: TInput;\n        self: TransitionActorRef<TContext, TEvent>;\n      }) => TContext) // TODO: type\n): TransitionActorLogic<TContext, TEvent, TInput> {\n  return {\n    config: transition,\n    transition: (snapshot, event, actorScope) => {\n      return {\n        ...snapshot,\n        context: transition(\n          snapshot.context,\n          event as TEvent,\n          actorScope as any\n        )\n      };\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context:\n          typeof initialContext === 'function'\n            ? (initialContext as any)({ input })\n            : initialContext\n      };\n    },\n    getPersistedSnapshot: (snapshot) => snapshot,\n    restoreSnapshot: (snapshot: any) => snapshot\n  };\n}\n","import { XSTATE_STOP } from '../constants.ts';\nimport { AnyActorSystem } from '../system.ts';\nimport {\n  ActorLogic,\n  ActorRefFrom,\n  AnyActorRef,\n  AnyEventObject,\n  EventObject,\n  NonReducibleUnknown,\n  Snapshot\n} from '../types';\n\ninterface CallbackInstanceState<TEvent extends EventObject> {\n  receivers: Set<(e: TEvent) => void> | undefined;\n  dispose: (() => void) | void;\n}\n\nconst instanceStates = /* #__PURE__ */ new WeakMap<\n  AnyActorRef,\n  CallbackInstanceState<any>\n>();\n\nexport type CallbackSnapshot<TInput> = Snapshot<undefined> & {\n  input: TInput;\n};\n\nexport type CallbackActorLogic<\n  TEvent extends EventObject,\n  TInput = NonReducibleUnknown\n> = ActorLogic<CallbackSnapshot<TInput>, TEvent, TInput, AnyActorSystem>;\n\nexport type CallbackActorRef<\n  TEvent extends EventObject,\n  TInput = NonReducibleUnknown\n> = ActorRefFrom<CallbackActorLogic<TEvent, TInput>>;\n\nexport type Receiver<TEvent extends EventObject> = (\n  listener: {\n    bivarianceHack(event: TEvent): void;\n  }['bivarianceHack']\n) => void;\n\nexport type InvokeCallback<\n  TEvent extends EventObject = AnyEventObject,\n  TSentEvent extends EventObject = AnyEventObject,\n  TInput = NonReducibleUnknown\n> = ({\n  input,\n  system,\n  self,\n  sendBack,\n  receive\n}: {\n  /**\n   * Data that was provided to the callback actor\n   * @see {@link https://stately.ai/docs/input | Input docs}\n   */\n  input: TInput;\n  /**\n   * The actor system to which the callback actor belongs\n   */\n  system: AnyActorSystem;\n  /**\n   * The parent actor of the callback actor\n   */\n  self: CallbackActorRef<TEvent>;\n  /**\n   * A function that can send events back to the parent actor\n   */\n  sendBack: (event: TSentEvent) => void;\n  /**\n   * A function that can be called with a listener function argument;\n   * the listener is then called whenever events are received by the callback actor\n   */\n  receive: Receiver<TEvent>;\n}) => (() => void) | void;\n\n/**\n * An actor logic creator which returns callback logic as defined by a callback function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events back to the parent actor.\n *\n * Actors created from callback logic (“callback actors”) can:\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @param invokeCallback - The callback function used to describe the callback logic\n * The callback function is passed an object with the following properties:\n * - `receive` - A function that can send events back to the parent actor; the listener is then called whenever events are received by the callback actor\n * - `sendBack` - A function that can send events back to the parent actor\n * - `input` - Data that was provided to the callback actor\n * - `self` - The parent actor of the callback actor\n * - `system` - The actor system to which the callback actor belongs\n * The callback function can (optionally) return a cleanup function, which is called when the actor is stopped.\n * @see {@link InvokeCallback} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n\n * @returns Callback logic\n *\n * @example\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n */\nexport function fromCallback<\n  TEvent extends EventObject,\n  TInput = NonReducibleUnknown\n>(\n  invokeCallback: InvokeCallback<TEvent, AnyEventObject, TInput>\n): CallbackActorLogic<TEvent, TInput> {\n  const logic: CallbackActorLogic<TEvent, TInput> = {\n    config: invokeCallback,\n    start: (state, actorScope) => {\n      const { self, system } = actorScope;\n\n      const callbackState: CallbackInstanceState<TEvent> = {\n        receivers: undefined,\n        dispose: undefined\n      };\n\n      instanceStates.set(self, callbackState);\n\n      callbackState.dispose = invokeCallback({\n        input: state.input,\n        system,\n        self,\n        sendBack: (event) => {\n          if (self.getSnapshot().status === 'stopped') {\n            return;\n          }\n          if (self._parent) {\n            system._relay(self, self._parent, event);\n          }\n        },\n        receive: (listener) => {\n          callbackState.receivers ??= new Set();\n          callbackState.receivers.add(listener);\n        }\n      });\n    },\n    transition: (state, event, actorScope) => {\n      const callbackState: CallbackInstanceState<TEvent> = instanceStates.get(\n        actorScope.self\n      )!;\n\n      if (event.type === XSTATE_STOP) {\n        state = {\n          ...state,\n          status: 'stopped',\n          error: undefined\n        };\n\n        callbackState.dispose?.();\n        return state;\n      }\n\n      callbackState.receivers?.forEach((receiver) => receiver(event));\n\n      return state;\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: (snapshot) => snapshot,\n    restoreSnapshot: (snapshot: any) => snapshot\n  };\n\n  return logic;\n}\n","import { XSTATE_STOP } from '../constants';\nimport { AnyActorSystem } from '../system.ts';\nimport {\n  ActorLogic,\n  ActorRefFrom,\n  EventObject,\n  NonReducibleUnknown,\n  Snapshot,\n  Subscribable,\n  Subscription\n} from '../types';\n\nconst XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';\nconst XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';\nconst XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';\n\nexport type ObservableSnapshot<\n  TContext,\n  TInput extends NonReducibleUnknown\n> = Snapshot<undefined> & {\n  context: TContext | undefined;\n  input: TInput | undefined;\n  _subscription: Subscription | undefined;\n};\n\nexport type ObservableActorLogic<\n  TContext,\n  TInput extends NonReducibleUnknown\n> = ActorLogic<\n  ObservableSnapshot<TContext, TInput>,\n  { type: string; [k: string]: unknown },\n  TInput,\n  AnyActorSystem\n>;\n\nexport type ObservableActorRef<TContext> = ActorRefFrom<\n  ObservableActorLogic<TContext, any>\n>;\n\n/**\n * Observable actor logic is described by an observable stream of values. Actors created from observable logic (“observable actors”) can:\n *\n * - Emit snapshots of the observable’s emitted value\n *\n * The observable’s emitted value is used as its observable actor’s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @param observableCreator A function that creates an observable. It receives one argument, an object with the following properties:\n * - `input` - Data that was provided to the observable actor\n * - `self` - The parent actor\n * - `system` - The actor system to which the observable actor belongs\n *\n * It should return a {@link Subscribable}, which is compatible with an RxJS Observable, although RxJS is not required to create them.\n *\n * @example\n * ```ts\n * import { fromObservable, createActor } from 'xstate'\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nexport function fromObservable<TContext, TInput extends NonReducibleUnknown>(\n  observableCreator: ({\n    input,\n    system\n  }: {\n    input: TInput;\n    system: AnyActorSystem;\n    self: ObservableActorRef<TContext>;\n  }) => Subscribable<TContext>\n): ObservableActorLogic<TContext, TInput> {\n  // TODO: add event types\n  const logic: ObservableActorLogic<TContext, TInput> = {\n    config: observableCreator,\n    transition: (snapshot, event, { self, id, defer, system }) => {\n      if (snapshot.status !== 'active') {\n        return snapshot;\n      }\n\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_NEXT: {\n          const newSnapshot = {\n            ...snapshot,\n            context: event.data as TContext\n          };\n          return newSnapshot;\n        }\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...snapshot,\n            status: 'error',\n            error: (event as any).data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...snapshot,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          snapshot._subscription!.unsubscribe();\n          return {\n            ...snapshot,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return snapshot;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, { self, system }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = observableCreator({\n        input: state.input!,\n        system,\n        self\n      }).subscribe({\n        next: (value) => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_NEXT,\n            data: value\n          });\n        },\n        error: (err) => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, { type: XSTATE_OBSERVABLE_COMPLETE });\n        }\n      });\n    },\n    getPersistedSnapshot: ({ _subscription, ...state }) => state,\n    restoreSnapshot: (state) => ({\n      ...(state as any),\n      _subscription: undefined\n    })\n  };\n\n  return logic;\n}\n\n/**\n * Creates event observable logic that listens to an observable that delivers event objects.\n *\n * Event observable actor logic is described by an observable stream of {@link https://stately.ai/docs/transitions#event-objects | event objects}. Actors created from event observable logic (“event observable actors”) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @param lazyObservable A function that creates an observable that delivers event objects. It receives one argument, an object with the following properties:\n *\n * - `input` - Data that was provided to the event observable actor\n * - `self` - The parent actor\n * - `system` - The actor system to which the event observable actor belongs.\n *\n * It should return a {@link Subscribable}, which is compatible with an RxJS Observable, although RxJS is not required to create them.\n *\n * @example\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(() =>\n *   fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic,\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n */\nexport function fromEventObservable<\n  T extends EventObject,\n  TInput extends NonReducibleUnknown\n>(\n  lazyObservable: ({\n    input,\n    system\n  }: {\n    input: TInput;\n    system: AnyActorSystem;\n    self: ObservableActorRef<T>;\n  }) => Subscribable<T>\n): ObservableActorLogic<T, TInput> {\n  // TODO: event types\n  const logic: ObservableActorLogic<T, TInput> = {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...state,\n            status: 'error',\n            error: (event as any).data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          state._subscription!.unsubscribe();\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, { self, system }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n\n      state._subscription = lazyObservable({\n        input: state.input!,\n        system,\n        self\n      }).subscribe({\n        next: (value) => {\n          if (self._parent) {\n            system._relay(self, self._parent, value);\n          }\n        },\n        error: (err) => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, { type: XSTATE_OBSERVABLE_COMPLETE });\n        }\n      });\n    },\n    getPersistedSnapshot: ({ _subscription, ...snapshot }) => snapshot,\n    restoreSnapshot: (snapshot: any) => ({\n      ...snapshot,\n      _subscription: undefined\n    })\n  };\n\n  return logic;\n}\n","import { XSTATE_STOP } from '../constants.ts';\nimport { AnyActorSystem } from '../system.ts';\nimport {\n  ActorLogic,\n  ActorRefFrom,\n  NonReducibleUnknown,\n  Snapshot\n} from '../types.ts';\n\nexport type PromiseSnapshot<TOutput, TInput> = Snapshot<TOutput> & {\n  input: TInput | undefined;\n};\n\nconst XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';\nconst XSTATE_PROMISE_REJECT = 'xstate.promise.reject';\n\nexport type PromiseActorLogic<TOutput, TInput = unknown> = ActorLogic<\n  PromiseSnapshot<TOutput, TInput>,\n  { type: string; [k: string]: unknown },\n  TInput, // input\n  AnyActorSystem\n>;\n\nexport type PromiseActorRef<TOutput> = ActorRefFrom<\n  PromiseActorLogic<TOutput, unknown>\n>;\n\n/**\n * An actor logic creator which returns promise logic as defined by an async process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (“promise actors”) can:\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @param promiseCreator\n *   A function which returns a Promise, and accepts an object with the following properties:\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n *\n * @example\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...')\n *     .then((data) => data.json());\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n */\nexport function fromPromise<TOutput, TInput = NonReducibleUnknown>(\n  promiseCreator: ({\n    input,\n    system\n  }: {\n    /**\n     * Data that was provided to the promise actor\n     */\n    input: TInput;\n    /**\n     * The actor system to which the promise actor belongs\n     */\n    system: AnyActorSystem;\n    /**\n     * The parent actor of the promise actor\n     */\n    self: PromiseActorRef<TOutput>;\n  }) => PromiseLike<TOutput>\n): PromiseActorLogic<TOutput, TInput> {\n  const logic: PromiseActorLogic<TOutput, TInput> = {\n    config: promiseCreator,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n\n      switch (event.type) {\n        case XSTATE_PROMISE_RESOLVE: {\n          const resolvedValue = (event as any).data;\n          return {\n            ...state,\n            status: 'done',\n            output: resolvedValue,\n            input: undefined\n          };\n        }\n        case XSTATE_PROMISE_REJECT:\n          return {\n            ...state,\n            status: 'error',\n            error: (event as any).data,\n            input: undefined\n          };\n        case XSTATE_STOP:\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    start: (state, { self, system }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n\n      const resolvedPromise = Promise.resolve(\n        promiseCreator({ input: state.input!, system, self })\n      );\n\n      resolvedPromise.then(\n        (response) => {\n          if (self.getSnapshot().status !== 'active') {\n            return;\n          }\n          system._relay(self, self, {\n            type: XSTATE_PROMISE_RESOLVE,\n            data: response\n          });\n        },\n        (errorData) => {\n          if (self.getSnapshot().status !== 'active') {\n            return;\n          }\n          system._relay(self, self, {\n            type: XSTATE_PROMISE_REJECT,\n            data: errorData\n          });\n        }\n      );\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: (snapshot) => snapshot,\n    restoreSnapshot: (snapshot: any) => snapshot\n  };\n\n  return logic;\n}\n","import { createActor } from '../createActor.ts';\nimport type { ActorRef, AnyEventObject, Snapshot } from '../types.ts';\nimport { fromTransition } from './transition.ts';\nexport {\n  fromCallback,\n  type CallbackActorLogic,\n  type CallbackSnapshot\n} from './callback.ts';\nexport {\n  fromEventObservable,\n  fromObservable,\n  type ObservableActorLogic,\n  type ObservableSnapshot\n} from './observable.ts';\nexport {\n  fromPromise,\n  type PromiseActorLogic,\n  type PromiseSnapshot\n} from './promise.ts';\nexport {\n  fromTransition,\n  type TransitionActorLogic,\n  type TransitionSnapshot\n} from './transition.ts';\n\nconst emptyLogic = fromTransition((_) => undefined, undefined);\n\nexport function createEmptyActor(): ActorRef<\n  Snapshot<undefined>,\n  AnyEventObject\n> {\n  return createActor(emptyLogic);\n}\n","const cache = new WeakMap<any, any>();\n\nexport function memo<T>(object: any, key: string, fn: () => T): T {\n  let memoizedData = cache.get(object);\n\n  if (!memoizedData) {\n    memoizedData = { [key]: fn() };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n\n  return memoizedData[key];\n}\n\nexport function evict(object: any, key?: string): void {\n  if (!key) {\n    return void cache.delete(object);\n  }\n\n  const memoizedData = cache.get(object);\n\n  if (memoizedData) {\n    delete memoizedData[key];\n  }\n}\n","import { MachineSnapshot } from './State.ts';\nimport type { StateMachine } from './StateMachine.ts';\nimport { NULL_EVENT, STATE_DELIMITER } from './constants.ts';\nimport { evaluateGuard } from './guards.ts';\nimport { memo } from './memo.ts';\nimport {\n  formatInitialTransition,\n  formatTransition,\n  formatTransitions,\n  getCandidates,\n  getDelayedTransitions\n} from './stateUtils.ts';\nimport type {\n  DelayedTransitionDefinition,\n  EventObject,\n  InitialTransitionDefinition,\n  InvokeDefinition,\n  MachineContext,\n  Mapper,\n  StateNodeConfig,\n  StateNodeDefinition,\n  StateNodesConfig,\n  StatesDefinition,\n  TransitionDefinition,\n  TransitionDefinitionMap,\n  TODO,\n  UnknownAction,\n  ParameterizedObject,\n  AnyStateMachine,\n  AnyStateNodeConfig,\n  ProvidedActor,\n  NonReducibleUnknown,\n  EventDescriptor\n} from './types.ts';\nimport {\n  createInvokeId,\n  mapValues,\n  toArray,\n  toTransitionConfigArray\n} from './utils.ts';\n\nconst EMPTY_OBJECT = {};\n\nconst toSerializableAction = (action: UnknownAction) => {\n  if (typeof action === 'string') {\n    return { type: action };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return { type: (action as any).type };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\n\ninterface StateNodeOptions<\n  TContext extends MachineContext,\n  TEvent extends EventObject\n> {\n  _key: string;\n  _parent?: StateNode<TContext, TEvent>;\n  _machine: AnyStateMachine;\n}\n\nexport class StateNode<\n  TContext extends MachineContext = MachineContext,\n  TEvent extends EventObject = EventObject\n> {\n  /**\n   * The relative key of the state node, which represents its location in the overall state value.\n   */\n  public key: string;\n  /**\n   * The unique ID of the state node.\n   */\n  public id: string;\n  /**\n   * The type of this state node:\n   *\n   *  - `'atomic'` - no child state nodes\n   *  - `'compound'` - nested child state nodes (XOR)\n   *  - `'parallel'` - orthogonal nested child state nodes (AND)\n   *  - `'history'` - history state node\n   *  - `'final'` - final state node\n   */\n  public type: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n  /**\n   * The string path from the root machine node to this node.\n   */\n  public path: string[];\n  /**\n   * The child state nodes.\n   */\n  public states: StateNodesConfig<TContext, TEvent>;\n  /**\n   * The type of history on this state node. Can be:\n   *\n   *  - `'shallow'` - recalls only top-level historical state value\n   *  - `'deep'` - recalls historical state value at all levels\n   */\n  public history: false | 'shallow' | 'deep';\n  /**\n   * The action(s) to be executed upon entering the state node.\n   */\n  public entry: UnknownAction[];\n  /**\n   * The action(s) to be executed upon exiting the state node.\n   */\n  public exit: UnknownAction[];\n  /**\n   * The parent state node.\n   */\n  public parent?: StateNode<TContext, TEvent>;\n  /**\n   * The root machine node.\n   */\n  public machine: StateMachine<\n    TContext,\n    TEvent,\n    any, // children\n    any, // actor\n    any, // action\n    any, // guard\n    any, // delay\n    any, // tag\n    any, // input\n    any, // output\n    any // typegen\n  >;\n  /**\n   * The meta data associated with this state node, which will be returned in State instances.\n   */\n  public meta?: any;\n  /**\n   * The output data sent with the \"xstate.done.state._id_\" event if this is a final state node.\n   */\n  public output?:\n    | Mapper<MachineContext, EventObject, unknown, EventObject>\n    | NonReducibleUnknown;\n\n  /**\n   * The order this state node appears. Corresponds to the implicit document order.\n   */\n  public order: number = -1;\n\n  public description?: string;\n\n  public tags: string[] = [];\n  public transitions!: Map<string, TransitionDefinition<TContext, TEvent>[]>;\n  public always?: Array<TransitionDefinition<TContext, TEvent>>;\n\n  constructor(\n    /**\n     * The raw config used to create the machine.\n     */\n    public config: StateNodeConfig<\n      TContext,\n      TEvent,\n      TODO, // actions\n      TODO, // actors\n      TODO, // output\n      TODO, // guards\n      TODO, // delays\n      TODO // tags\n    >,\n    options: StateNodeOptions<TContext, TEvent>\n  ) {\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id =\n      this.config.id || [this.machine.id, ...this.path].join(STATE_DELIMITER);\n    this.type =\n      this.config.type ||\n      (this.config.states && Object.keys(this.config.states).length\n        ? 'compound'\n        : this.config.history\n          ? 'history'\n          : 'atomic');\n    this.description = this.config.description;\n\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n\n    this.states = (\n      this.config.states\n        ? mapValues(\n            this.config.states,\n            (stateConfig: AnyStateNodeConfig, key) => {\n              const stateNode = new StateNode(stateConfig, {\n                _parent: this,\n                _key: key as string,\n                _machine: this.machine\n              });\n              return stateNode;\n            }\n          )\n        : EMPTY_OBJECT\n    ) as StateNodesConfig<TContext, TEvent>;\n\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(\n        `No initial state specified for compound state node \"#${\n          this.id\n        }\". Try adding { initial: \"${\n          Object.keys(this.states)[0]\n        }\" } to the state config.`\n      );\n    }\n\n    // History config\n    this.history =\n      this.config.history === true ? 'shallow' : this.config.history || false;\n\n    this.entry = toArray(this.config.entry).slice();\n    this.exit = toArray(this.config.exit).slice();\n\n    this.meta = this.config.meta;\n    this.output =\n      this.type === 'final' || !this.parent ? this.config.output : undefined;\n    this.tags = toArray(config.tags).slice();\n  }\n\n  /** @internal */\n  public _initialize() {\n    this.transitions = formatTransitions(this);\n    if (this.config.always) {\n      this.always = toTransitionConfigArray(this.config.always).map((t) =>\n        formatTransition(this, NULL_EVENT, t)\n      );\n    }\n\n    Object.keys(this.states).forEach((key) => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /**\n   * The well-structured state node definition.\n   */\n  public get definition(): StateNodeDefinition<TContext, TEvent> {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial\n        ? {\n            target: this.initial.target,\n            source: this,\n            actions: this.initial.actions.map(toSerializableAction),\n            eventType: null as any,\n            reenter: false,\n            toJSON: () => ({\n              target: this.initial!.target!.map((t) => `#${t.id}`),\n              source: `#${this.id}`,\n              actions: this.initial!.actions.map(toSerializableAction),\n              eventType: null as any\n            })\n          }\n        : undefined,\n      history: this.history,\n      states: mapValues(this.states, (state: StateNode<TContext, TEvent>) => {\n        return state.definition;\n      }) as StatesDefinition<TContext, TEvent>,\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map((t) => ({\n        ...t,\n        actions: t.actions.map(toSerializableAction)\n      })),\n      entry: this.entry.map(toSerializableAction),\n      exit: this.exit.map(toSerializableAction),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n\n  /** @internal */\n  public toJSON() {\n    return this.definition;\n  }\n\n  /**\n   * The logic invoked as actors by this state node.\n   */\n  public get invoke(): Array<\n    InvokeDefinition<\n      TContext,\n      TEvent,\n      ProvidedActor,\n      ParameterizedObject,\n      ParameterizedObject,\n      string\n    >\n  > {\n    return memo(this, 'invoke', () =>\n      toArray(this.config.invoke).map((invokeConfig, i) => {\n        const { src, systemId } = invokeConfig;\n        const resolvedId = invokeConfig.id ?? createInvokeId(this.id, i);\n        const resolvedSrc =\n          typeof src === 'string'\n            ? src\n            : `xstate.invoke.${createInvokeId(this.id, i)}`;\n        return {\n          ...invokeConfig,\n          src: resolvedSrc,\n          id: resolvedId,\n          systemId: systemId,\n          toJSON() {\n            const { onDone, onError, ...invokeDefValues } = invokeConfig;\n            return {\n              ...invokeDefValues,\n              type: 'xstate.invoke',\n              src: resolvedSrc,\n              id: resolvedId\n            };\n          }\n        } as InvokeDefinition<\n          TContext,\n          TEvent,\n          ProvidedActor,\n          ParameterizedObject,\n          ParameterizedObject,\n          string\n        >;\n      })\n    );\n  }\n\n  /**\n   * The mapping of events to transitions.\n   */\n  public get on(): TransitionDefinitionMap<TContext, TEvent> {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n\n      return [...transitions]\n        .flatMap(([descriptor, t]) => t.map((t) => [descriptor, t] as const))\n        .reduce(\n          (map: any, [descriptor, transition]) => {\n            map[descriptor] = map[descriptor] || [];\n            map[descriptor].push(transition);\n            return map;\n          },\n          {} as TransitionDefinitionMap<TContext, TEvent>\n        );\n    });\n  }\n\n  public get after(): Array<DelayedTransitionDefinition<TContext, TEvent>> {\n    return memo(\n      this,\n      'delayedTransitions',\n      () => getDelayedTransitions(this) as any\n    );\n  }\n\n  public get initial(): InitialTransitionDefinition<TContext, TEvent> {\n    return memo(this, 'initial', () =>\n      formatInitialTransition(this, this.config.initial)\n    );\n  }\n\n  /** @internal */\n  public next(\n    snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any>,\n    event: TEvent\n  ): TransitionDefinition<TContext, TEvent>[] | undefined {\n    const eventType = event.type;\n    const actions: UnknownAction[] = [];\n\n    let selectedTransition: TransitionDefinition<TContext, TEvent> | undefined;\n\n    const candidates: Array<TransitionDefinition<TContext, TEvent>> = memo(\n      this,\n      `candidates-${eventType}`,\n      () => getCandidates(this, eventType)\n    );\n\n    for (const candidate of candidates) {\n      const { guard } = candidate;\n      const resolvedContext = snapshot.context;\n\n      let guardPassed = false;\n\n      try {\n        guardPassed =\n          !guard ||\n          evaluateGuard<TContext, TEvent>(\n            guard,\n            resolvedContext,\n            event,\n            snapshot\n          );\n      } catch (err: any) {\n        const guardType =\n          typeof guard === 'string'\n            ? guard\n            : typeof guard === 'object'\n              ? guard.type\n              : undefined;\n        throw new Error(\n          `Unable to evaluate guard ${\n            guardType ? `'${guardType}' ` : ''\n          }in transition for event '${eventType}' in state node '${\n            this.id\n          }':\\n${err.message}`\n        );\n      }\n\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /**\n   * All the event types accepted by this state node and its descendants.\n   */\n  public get events(): Array<EventDescriptor<TEvent>> {\n    return memo(this, 'events', () => {\n      const { states } = this;\n      const events = new Set(this.ownEvents);\n\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  public get ownEvents(): Array<EventDescriptor<TEvent>> {\n    const events = new Set(\n      [...this.transitions.keys()].filter((descriptor) => {\n        return this.transitions\n          .get(descriptor)!\n          .some(\n            (transition) =>\n              !(\n                !transition.target &&\n                !transition.actions.length &&\n                !transition.reenter\n              )\n          );\n      })\n    );\n\n    return Array.from(events);\n  }\n}\n","import isDevelopment from '#is-development';\nimport { assign } from './actions.ts';\nimport { $$ACTOR_TYPE, createActor } from './createActor.ts';\nimport { createInitEvent } from './eventUtils.ts';\nimport {\n  createMachineSnapshot,\n  getPersistedSnapshot,\n  MachineSnapshot\n} from './State.ts';\nimport { StateNode } from './StateNode.ts';\nimport {\n  getAllStateNodes,\n  getInitialStateNodes,\n  getStateNodeByPath,\n  getStateNodes,\n  isInFinalState,\n  isStateId,\n  macrostep,\n  microstep,\n  resolveActionsAndContext,\n  resolveStateValue,\n  transitionNode\n} from './stateUtils.ts';\nimport { AnyActorSystem } from './system.ts';\nimport { ResolveTypegenMeta, TypegenDisabled } from './typegenTypes.ts';\nimport type {\n  ActorLogic,\n  ActorScope,\n  AnyActorLogic,\n  AnyActorRef,\n  AnyActorScope,\n  AnyEventObject,\n  Equals,\n  EventDescriptor,\n  EventObject,\n  HistoryValue,\n  InternalMachineImplementations,\n  MachineConfig,\n  MachineContext,\n  MachineImplementationsSimplified,\n  NoInfer,\n  ParameterizedObject,\n  ProvidedActor,\n  Snapshot,\n  SnapshotFrom,\n  StateMachineDefinition,\n  StateValue,\n  TODO,\n  TransitionDefinition\n} from './types.ts';\nimport { resolveReferencedActor, toStatePath } from './utils.ts';\n\nexport const STATE_IDENTIFIER = '#';\nexport const WILDCARD = '*';\n\nexport class StateMachine<\n  TContext extends MachineContext,\n  TEvent extends EventObject,\n  TChildren extends Record<string, AnyActorRef | undefined>,\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TStateValue extends StateValue,\n  TTag extends string,\n  TInput,\n  TOutput,\n  TResolvedTypesMeta = ResolveTypegenMeta<\n    TypegenDisabled,\n    NoInfer<TEvent>,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay,\n    TTag\n  >\n> implements\n    ActorLogic<\n      MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput>,\n      TEvent,\n      TInput,\n      AnyActorSystem\n    >\n{\n  /**\n   * The machine's own version.\n   */\n  public version?: string;\n\n  public schemas: unknown;\n\n  public implementations: MachineImplementationsSimplified<TContext, TEvent>;\n\n  /** @internal */\n  public __xstatenode: true = true;\n\n  /** @internal */\n  public idMap: Map<string, StateNode<TContext, TEvent>> = new Map();\n\n  public root: StateNode<TContext, TEvent>;\n\n  public id: string;\n\n  public states: StateNode<TContext, TEvent>['states'];\n  public events: Array<EventDescriptor<TEvent>>;\n\n  constructor(\n    /**\n     * The raw config used to create the machine.\n     */\n    public config: MachineConfig<\n      TContext,\n      TEvent,\n      any,\n      any,\n      any,\n      any,\n      any,\n      any,\n      TOutput,\n      any\n    > & {\n      schemas?: unknown;\n    },\n    implementations?: MachineImplementationsSimplified<TContext, TEvent>\n  ) {\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.schemas = this.config.schemas;\n\n    this.transition = this.transition.bind(this);\n    this.getInitialSnapshot = this.getInitialSnapshot.bind(this);\n    this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);\n    this.restoreSnapshot = this.restoreSnapshot.bind(this);\n    this.start = this.start.bind(this);\n\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this as any\n    });\n\n    this.root._initialize();\n\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n\n    if (\n      isDevelopment &&\n      !this.root.output &&\n      Object.values(this.states).some(\n        (state) => state.type === 'final' && !!state.output\n      )\n    ) {\n      console.warn(\n        'Missing `machine.output` declaration (top-level final state with output detected)'\n      );\n    }\n  }\n\n  /**\n   * Clones this state machine with the provided implementations\n   * and merges the `context` (if provided).\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`, `context`)\n   *  to recursively merge with the existing options.\n   *\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  public provide(\n    implementations: InternalMachineImplementations<\n      TContext,\n      TResolvedTypesMeta,\n      true\n    >\n  ): StateMachine<\n    TContext,\n    TEvent,\n    TChildren,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay,\n    TStateValue,\n    TTag,\n    TInput,\n    TOutput,\n    TResolvedTypesMeta\n  > {\n    const { actions, guards, actors, delays } = this.implementations;\n\n    return new StateMachine(this.config, {\n      actions: { ...actions, ...implementations.actions },\n      guards: { ...guards, ...implementations.guards },\n      actors: { ...actors, ...implementations.actors },\n      delays: { ...delays, ...implementations.delays }\n    });\n  }\n\n  public resolveState(\n    config: {\n      value: StateValue;\n      context?: TContext;\n      historyValue?: HistoryValue<TContext, TEvent>;\n      status?: 'active' | 'done' | 'error' | 'stopped';\n      output?: TOutput;\n      error?: unknown;\n    } & (Equals<TContext, MachineContext> extends false\n      ? { context: unknown }\n      : {})\n  ): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput> {\n    const resolvedStateValue = resolveStateValue(this.root, config.value);\n    const nodeSet = getAllStateNodes(\n      getStateNodes(this.root, resolvedStateValue)\n    );\n\n    return createMachineSnapshot(\n      {\n        _nodes: [...nodeSet],\n        context: config.context || ({} as TContext),\n        children: {},\n        status: isInFinalState(nodeSet, this.root)\n          ? 'done'\n          : config.status || 'active',\n        output: config.output,\n        error: config.error,\n        historyValue: config.historyValue\n      },\n      this\n    ) as MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >;\n  }\n\n  /**\n   * Determines the next snapshot given the current `snapshot` and received `event`.\n   * Calculates a full macrostep from all microsteps.\n   *\n   * @param snapshot The current snapshot\n   * @param event The received event\n   */\n  public transition(\n    snapshot: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    event: TEvent,\n    actorScope: ActorScope<typeof snapshot, TEvent>\n  ): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput> {\n    return macrostep(snapshot, event, actorScope).snapshot as typeof snapshot;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`.\n   * Calculates a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  public microstep(\n    snapshot: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    event: TEvent,\n    actorScope: AnyActorScope\n  ): Array<\n    MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput>\n  > {\n    return macrostep(snapshot, event, actorScope)\n      .microstates as (typeof snapshot)[];\n  }\n\n  public getTransitionData(\n    snapshot: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    event: TEvent\n  ): Array<TransitionDefinition<TContext, TEvent>> {\n    return transitionNode(this.root, snapshot.value, snapshot, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps.\n   * This \"pre-initial\" state is provided to initial actions executed in the initial state.\n   */\n  private getPreInitialState(\n    actorScope: AnyActorScope,\n    initEvent: any,\n    internalQueue: AnyEventObject[]\n  ): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput> {\n    const { context } = this.config;\n\n    const preInitial = createMachineSnapshot(\n      {\n        context:\n          typeof context !== 'function' && context ? context : ({} as TContext),\n        _nodes: [this.root],\n        children: {},\n        status: 'active'\n      },\n      this\n    );\n\n    if (typeof context === 'function') {\n      const assignment = ({ spawn, event, self }: any) =>\n        context({ spawn, input: event.input, self });\n      return resolveActionsAndContext(\n        preInitial,\n        initEvent,\n        actorScope,\n        [assign(assignment)],\n        internalQueue\n      ) as SnapshotFrom<this>;\n    }\n\n    return preInitial as SnapshotFrom<this>;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an `ActorRef`.\n   */\n  public getInitialSnapshot(\n    actorScope: ActorScope<\n      MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput>,\n      TEvent\n    >,\n    input?: TInput\n  ): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput> {\n    const initEvent = createInitEvent(input) as unknown as TEvent; // TODO: fix;\n    const internalQueue: AnyEventObject[] = [];\n    const preInitialState = this.getPreInitialState(\n      actorScope,\n      initEvent,\n      internalQueue\n    );\n    const nextState = microstep(\n      [\n        {\n          target: [...getInitialStateNodes(this.root)],\n          source: this.root,\n          reenter: true,\n          actions: [],\n          eventType: null as any,\n          toJSON: null as any // TODO: fix\n        }\n      ],\n      preInitialState,\n      actorScope,\n      initEvent,\n      true,\n      internalQueue\n    );\n\n    const { snapshot: macroState } = macrostep(\n      nextState,\n      initEvent as AnyEventObject,\n      actorScope,\n      internalQueue\n    );\n\n    return macroState as SnapshotFrom<this>;\n  }\n\n  public start(\n    snapshot: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >\n  ): void {\n    Object.values(snapshot.children as Record<string, AnyActorRef>).forEach(\n      (child: any) => {\n        if (child.getSnapshot().status === 'active') {\n          child.start();\n        }\n      }\n    );\n  }\n\n  public getStateNodeById(stateId: string): StateNode<TContext, TEvent> {\n    const fullPath = toStatePath(stateId);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = isStateId(fullPath[0])\n      ? fullPath[0].slice(STATE_IDENTIFIER.length)\n      : fullPath[0];\n\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(\n        `Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`\n      );\n    }\n    return getStateNodeByPath(stateNode, relativePath);\n  }\n\n  public get definition(): StateMachineDefinition<TContext, TEvent> {\n    return this.root.definition;\n  }\n\n  public toJSON() {\n    return this.definition;\n  }\n\n  public getPersistedSnapshot(\n    snapshot: MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >,\n    options?: unknown\n  ) {\n    return getPersistedSnapshot(snapshot, options);\n  }\n\n  public restoreSnapshot(\n    snapshot: Snapshot<unknown>,\n    _actorScope: ActorScope<\n      MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput>,\n      TEvent\n    >\n  ): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput> {\n    const children: Record<string, AnyActorRef> = {};\n    const snapshotChildren: Record<\n      string,\n      {\n        src: string | AnyActorLogic;\n        snapshot: Snapshot<unknown>;\n        syncSnapshot?: boolean;\n        systemId?: string;\n      }\n    > = (snapshot as any).children;\n\n    Object.keys(snapshotChildren).forEach((actorId) => {\n      const actorData =\n        snapshotChildren[actorId as keyof typeof snapshotChildren];\n      const childState = actorData.snapshot;\n      const src = actorData.src;\n\n      const logic =\n        typeof src === 'string' ? resolveReferencedActor(this, src) : src;\n\n      if (!logic) {\n        return;\n      }\n\n      const actorRef = createActor(logic, {\n        id: actorId,\n        parent: _actorScope.self,\n        syncSnapshot: actorData.syncSnapshot,\n        snapshot: childState,\n        src,\n        systemId: actorData.systemId\n      });\n\n      children[actorId] = actorRef;\n    });\n\n    const restoredSnapshot = createMachineSnapshot(\n      {\n        ...(snapshot as any),\n        children,\n        _nodes: Array.from(\n          getAllStateNodes(getStateNodes(this.root, (snapshot as any).value))\n        )\n      },\n      this\n    ) as MachineSnapshot<\n      TContext,\n      TEvent,\n      TChildren,\n      TStateValue,\n      TTag,\n      TOutput\n    >;\n\n    let seen = new Set();\n\n    function reviveContext(\n      contextPart: Record<string, unknown>,\n      children: Record<string, AnyActorRef>\n    ) {\n      if (seen.has(contextPart)) {\n        return;\n      }\n      seen.add(contextPart);\n      for (let key in contextPart) {\n        const value: unknown = contextPart[key];\n\n        if (value && typeof value === 'object') {\n          if ('xstate$$type' in value && value.xstate$$type === $$ACTOR_TYPE) {\n            contextPart[key] = children[(value as any).id];\n            continue;\n          }\n          reviveContext(value as typeof contextPart, children);\n        }\n      }\n    }\n\n    reviveContext(restoredSnapshot.context, children);\n\n    return restoredSnapshot;\n  }\n\n  /**\n   * @deprecated an internal property that was acting as a \"phantom\" type, it's not used by anything right now but it's kept around for compatibility reasons\n   **/\n  __TResolvedTypesMeta!: TResolvedTypesMeta;\n}\n","import isDevelopment from '#is-development';\nimport { ActorRef, SnapshotFrom, Subscription } from './types.ts';\n\ninterface WaitForOptions {\n  /**\n   * How long to wait before rejecting, if no emitted\n   * state satisfies the predicate.\n   *\n   * @defaultValue Infinity\n   */\n  timeout: number;\n}\n\nconst defaultWaitForOptions: WaitForOptions = {\n  timeout: Infinity // much more than 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy\n * a predicate, and then resolves with that value.\n * Will throw if the desired state is not reached after an optional timeout.\n * (defaults to Infinity).\n *\n * @example\n * ```js\n * const state = await waitFor(someService, state => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value\n * that matches the condition\n */\nexport function waitFor<TActorRef extends ActorRef<any, any>>(\n  actorRef: TActorRef,\n  predicate: (emitted: SnapshotFrom<TActorRef>) => boolean,\n  options?: Partial<WaitForOptions>\n): Promise<SnapshotFrom<TActorRef>> {\n  const resolvedOptions: WaitForOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    let done = false;\n    if (isDevelopment && resolvedOptions.timeout < 0) {\n      console.error(\n        '`timeout` passed to `waitFor` is negative and it will reject its internal promise immediately.'\n      );\n    }\n    const handle =\n      resolvedOptions.timeout === Infinity\n        ? undefined\n        : setTimeout(() => {\n            sub!.unsubscribe();\n            rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n          }, resolvedOptions.timeout);\n\n    const dispose = () => {\n      clearTimeout(handle!);\n      done = true;\n      sub?.unsubscribe();\n    };\n\n    function checkEmitted(emitted: SnapshotFrom<TActorRef>) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n\n    let sub: Subscription | undefined; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: (err) => {\n        dispose();\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n","import { StateMachine } from './StateMachine.ts';\nimport {\n  ResolveTypegenMeta,\n  TypegenConstraint,\n  TypegenDisabled\n} from './typegenTypes.ts';\nimport {\n  AnyActorRef,\n  AnyEventObject,\n  Cast,\n  InternalMachineImplementations,\n  IsNever,\n  MachineConfig,\n  MachineContext,\n  MachineTypes,\n  NonReducibleUnknown,\n  ParameterizedObject,\n  Prop,\n  ProvidedActor,\n  StateValue,\n  ToChildren\n} from './types.ts';\n\ntype TestValue =\n  | string\n  | {\n      [k: string]: TestValue | undefined;\n    };\n\ntype _GroupTestValues<TTestValue extends string | TestValue> =\n  TTestValue extends string\n    ? TTestValue extends `${string}.${string}`\n      ? [never, never]\n      : [TTestValue, never]\n    : [never, TTestValue];\ntype GroupTestValues<TTestValue extends string | TestValue> = {\n  leafCandidates: _GroupTestValues<TTestValue>[0];\n  nonLeaf: _GroupTestValues<TTestValue>[1];\n};\n\ntype FilterLeafValues<\n  TLeafCandidate extends string,\n  TNonLeaf extends { [k: string]: TestValue | undefined }\n> = IsNever<TNonLeaf> extends true\n  ? TLeafCandidate\n  : TLeafCandidate extends string\n    ? TLeafCandidate extends keyof TNonLeaf\n      ? never\n      : TLeafCandidate\n    : never;\n\n// this is not 100% accurate since we can't make parallel regions required in the result\n// `TTestValue` doesn't encode this information anyhow for us to be able to do that\n// this is fine for most practical use cases anyway though\ntype ToStateValue<TTestValue extends string | TestValue> =\n  | FilterLeafValues<\n      GroupTestValues<TTestValue>['leafCandidates'],\n      GroupTestValues<TTestValue>['nonLeaf']\n    >\n  | (IsNever<GroupTestValues<TTestValue>['nonLeaf']> extends false\n      ? {\n          [K in keyof GroupTestValues<TTestValue>['nonLeaf']]: ToStateValue<\n            NonNullable<GroupTestValues<TTestValue>['nonLeaf'][K]>\n          >;\n        }\n      : never);\n\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })` to provide machine implementations instead.\n *\n * @example\n  ```ts\n  import { createMachine } from 'xstate';\n\n  const lightMachine = createMachine({\n    id: 'light',\n    initial: 'green',\n    states: {\n      green: {\n        on: {\n          TIMER: { target: 'yellow' }\n        }\n      },\n      yellow: {\n        on: {\n          TIMER: { target: 'red' }\n        }\n      },\n      red: {\n        on: {\n          TIMER: { target: 'green' }\n        }\n      }\n    }\n  });\n\n  const lightActor = createActor(lightMachine);\n  lightActor.start();\n\n  lightActor.send({ type: 'TIMER' });\n  ```\n */\nexport function createMachine<\n  TContext extends MachineContext,\n  TEvent extends AnyEventObject, // TODO: consider using a stricter `EventObject` here\n  TActor extends ProvidedActor,\n  TAction extends ParameterizedObject,\n  TGuard extends ParameterizedObject,\n  TDelay extends string,\n  TTag extends string,\n  TInput,\n  TOutput extends NonReducibleUnknown,\n  // it's important to have at least one default type parameter here\n  // it allows us to benefit from contextual type instantiation as it makes us to pass the hasInferenceCandidatesOrDefault check in the compiler\n  // we should be able to remove this when we start inferring TConfig, with it we'll always have an inference candidate\n  TTypesMeta extends TypegenConstraint = TypegenDisabled\n>(\n  config: {\n    types?: MachineTypes<\n      TContext,\n      TEvent,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay,\n      TTag,\n      TInput,\n      TOutput,\n      TTypesMeta\n    >;\n    schemas?: unknown;\n  } & MachineConfig<\n    TContext,\n    TEvent,\n    TActor,\n    TAction,\n    TGuard,\n    TDelay,\n    TTag,\n    TInput,\n    TOutput,\n    TTypesMeta\n  >,\n  implementations?: InternalMachineImplementations<\n    TContext,\n    ResolveTypegenMeta<\n      TTypesMeta,\n      TEvent,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay,\n      TTag\n    >\n  >\n): StateMachine<\n  TContext,\n  TEvent,\n  Cast<ToChildren<TActor>, Record<string, AnyActorRef | undefined>>,\n  TActor,\n  TAction,\n  TGuard,\n  TDelay,\n  'matchesStates' extends keyof TTypesMeta\n    ? ToStateValue<Cast<TTypesMeta['matchesStates'], TestValue>>\n    : StateValue,\n  Prop<\n    ResolveTypegenMeta<\n      TTypesMeta,\n      TEvent,\n      TActor,\n      TAction,\n      TGuard,\n      TDelay,\n      TTag\n    >['resolved'],\n    'tags'\n  > &\n    string,\n  TInput,\n  TOutput,\n  ResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag>\n> {\n  return new StateMachine<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  >(config as any, implementations as any);\n}\n","import { Clock } from './system.ts';\n\nexport interface SimulatedClock extends Clock {\n  start(speed: number): void;\n  increment(ms: number): void;\n  set(ms: number): void;\n}\n\ninterface SimulatedTimeout {\n  start: number;\n  timeout: number;\n  fn: (...args: any[]) => void;\n}\nexport class SimulatedClock implements SimulatedClock {\n  private timeouts: Map<number, SimulatedTimeout> = new Map();\n  private _now: number = 0;\n  private _id: number = 0;\n  private _flushing = false;\n  private _flushingInvalidated = false;\n\n  public now() {\n    return this._now;\n  }\n  private getId() {\n    return this._id++;\n  }\n  public setTimeout(fn: (...args: any[]) => void, timeout: number) {\n    this._flushingInvalidated = this._flushing;\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  public clearTimeout(id: number) {\n    this._flushingInvalidated = this._flushing;\n    this.timeouts.delete(id);\n  }\n  public set(time: number) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n\n    this._now = time;\n    this.flushTimeouts();\n  }\n  private flushTimeouts() {\n    if (this._flushing) {\n      this._flushingInvalidated = true;\n      return;\n    }\n    this._flushing = true;\n\n    const sorted = [...this.timeouts].sort(\n      ([_idA, timeoutA], [_idB, timeoutB]) => {\n        const endA = timeoutA.start + timeoutA.timeout;\n        const endB = timeoutB.start + timeoutB.timeout;\n        return endB > endA ? -1 : 1;\n      }\n    );\n\n    for (const [id, timeout] of sorted) {\n      if (this._flushingInvalidated) {\n        this._flushingInvalidated = false;\n        this._flushing = false;\n        this.flushTimeouts();\n        return;\n      }\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    }\n\n    this._flushing = false;\n  }\n  public increment(ms: number): void {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n","import { EventObject } from './types.ts';\nimport { toArray } from './utils.ts';\n\n/**\n * Asserts that the given event object is of the specified type or types.\n * Throws an error if the event object is not of the specified types.\n  @example\n\n  ```ts\n  // ...\n  entry: ({ event }) => {\n    assertEvent(event, 'doNothing');\n    // event is { type: 'doNothing' }\n  },\n  // ...\n  exit: ({ event }) => {\n    assertEvent(event, 'greet');\n    // event is { type: 'greet'; message: string }\n\n    assertEvent(event, ['greet', 'notify']);\n    // event is { type: 'greet'; message: string }\n    // or { type: 'notify'; message: string; level: 'info' | 'error' }\n  },\n  ```\n */\nexport function assertEvent<\n  TEvent extends EventObject,\n  TAssertedType extends TEvent['type']\n>(\n  event: TEvent,\n  type: TAssertedType | TAssertedType[]\n): asserts event is TEvent & { type: TAssertedType } {\n  const types = toArray(type);\n  if (!types.includes(event.type as any)) {\n    const typesText =\n      types.length === 1\n        ? `type \"${types[0]}\"`\n        : `one of types \"${types.join('\", \"')}\"`;\n    throw new Error(\n      `Expected event ${JSON.stringify(event)} to have ${typesText}`\n    );\n  }\n}\n","import { createActor } from './createActor.ts';\nimport {\n  ActorScope,\n  AnyActorLogic,\n  AnyActorScope,\n  EventFromLogic,\n  InputFrom,\n  SnapshotFrom\n} from './types.ts';\n\n/** @internal */\nexport function createInertActorScope<T extends AnyActorLogic>(\n  actorLogic: T\n): AnyActorScope {\n  const self = createActor(actorLogic as AnyActorLogic);\n  const inertActorScope: ActorScope<SnapshotFrom<T>, EventFromLogic<T>, any> = {\n    self,\n    defer: () => {},\n    id: '',\n    logger: () => {},\n    sessionId: '',\n    stopChild: () => {},\n    system: self.system\n  };\n\n  return inertActorScope;\n}\n\nexport function getInitialSnapshot<T extends AnyActorLogic>(\n  actorLogic: T,\n  ...[input]: undefined extends InputFrom<T>\n    ? [input?: InputFrom<T>]\n    : [input: InputFrom<T>]\n): SnapshotFrom<T> {\n  const actorScope = createInertActorScope(actorLogic);\n  return actorLogic.getInitialSnapshot(actorScope, input);\n}\n\n/**\n * Determines the next snapshot for the given `actorLogic` based on\n * the given `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the\n * `actorLogic` is used.\n *\n * @example\n  ```ts\n  import { getNextSnapshot } from 'xstate';\n  import { trafficLightMachine } from './trafficLightMachine.ts';\n\n  const nextSnapshot = getNextSnapshot(\n    trafficLightMachine, // actor logic\n    undefined, // snapshot (or initial state if undefined)\n    { type: 'TIMER' }); // event object\n\n  console.log(nextSnapshot.value);\n  // => 'yellow'\n\n  const nextSnapshot2 = getNextSnapshot(\n    trafficLightMachine, // actor logic\n    nextSnapshot, // snapshot\n    { type: 'TIMER' }); // event object\n\n  console.log(nextSnapshot2.value);\n  // =>'red'\n  ```\n */\nexport function getNextSnapshot<T extends AnyActorLogic>(\n  actorLogic: T,\n  snapshot: SnapshotFrom<T>,\n  event: EventFromLogic<T>\n): SnapshotFrom<T> {\n  const inertActorScope = createInertActorScope(actorLogic);\n  (inertActorScope.self as any)._snapshot = snapshot;\n  return actorLogic.transition(snapshot, event, inertActorScope);\n}\n","import { StateMachine } from './StateMachine';\nimport { createMachine } from './createMachine';\nimport { GuardPredicate } from './guards';\nimport { ResolveTypegenMeta, TypegenDisabled } from './typegenTypes';\nimport {\n  ActionFunction,\n  AnyActorRef,\n  AnyEventObject,\n  Cast,\n  ConditionalRequired,\n  DelayConfig,\n  Invert,\n  IsNever,\n  MachineConfig,\n  MachineContext,\n  NonReducibleUnknown,\n  ParameterizedObject,\n  SetupTypes,\n  StateSchema,\n  ToChildren,\n  UnknownActorLogic,\n  Values\n} from './types';\n\ntype ToParameterizedObject<\n  TParameterizedMap extends Record<\n    string,\n    ParameterizedObject['params'] | undefined\n  >\n> = Values<{\n  [K in keyof TParameterizedMap & string]: {\n    type: K;\n    params: TParameterizedMap[K];\n  };\n}>;\n\ntype DefaultToUnknownActorLogic<\n  TActors extends Record<string, UnknownActorLogic>\n> =\n  // if `keyof TActors` is `never` then it means that both `children` and `actors` were not supplied\n  // `never` comes from the default type of the `TChildrenMap` type parameter\n  // in such a case we \"replace\" `TActors` with a more traditional~ constraint\n  // one that doesn't depend on `Values<TChildrenMap>`\n  IsNever<keyof TActors> extends true\n    ? Record<string, UnknownActorLogic>\n    : TActors;\n\n// at the moment we allow extra actors - ones that are not specified by `children`\n// this could be reconsidered in the future\ntype ToProvidedActor<\n  TChildrenMap extends Record<string, string>,\n  TActors extends Record<Values<TChildrenMap>, UnknownActorLogic>,\n  TResolvedActors extends Record<\n    string,\n    UnknownActorLogic\n  > = DefaultToUnknownActorLogic<TActors>\n> = Values<{\n  [K in keyof TResolvedActors & string]: {\n    src: K;\n    logic: TResolvedActors[K];\n    id: IsNever<TChildrenMap> extends true\n      ? string | undefined\n      : K extends keyof Invert<TChildrenMap>\n        ? Invert<TChildrenMap>[K]\n        : string | undefined;\n  };\n}>;\n\ntype _GroupStateKeys<\n  T extends StateSchema,\n  S extends keyof T['states']\n> = S extends any\n  ? T['states'][S] extends { type: 'history' }\n    ? [never, never]\n    : T extends { type: 'parallel' }\n      ? [S, never]\n      : 'states' extends keyof T['states'][S]\n        ? [S, never]\n        : [never, S]\n  : never;\n\ntype GroupStateKeys<T extends StateSchema, S extends keyof T['states']> = {\n  nonLeaf: _GroupStateKeys<T, S & string>[0];\n  leaf: _GroupStateKeys<T, S & string>[1];\n};\n\ntype ToStateValue<T extends StateSchema> = T extends {\n  states: Record<infer S, any>;\n}\n  ? IsNever<S> extends true\n    ? {}\n    :\n        | GroupStateKeys<T, S>['leaf']\n        | (IsNever<GroupStateKeys<T, S>['nonLeaf']> extends false\n            ? ConditionalRequired<\n                {\n                  [K in GroupStateKeys<T, S>['nonLeaf']]?: ToStateValue<\n                    T['states'][K]\n                  >;\n                },\n                T extends { type: 'parallel' } ? true : false\n              >\n            : never)\n  : {};\n\nexport function setup<\n  TContext extends MachineContext,\n  TEvent extends AnyEventObject, // TODO: consider using a stricter `EventObject` here\n  TActors extends Record<Values<TChildrenMap>, UnknownActorLogic>,\n  TActions extends Record<string, ParameterizedObject['params'] | undefined>,\n  TGuards extends Record<string, ParameterizedObject['params'] | undefined>,\n  TDelay extends string,\n  TTag extends string,\n  TInput,\n  TOutput extends NonReducibleUnknown,\n  TChildrenMap extends Record<string, string> = never\n>({\n  schemas,\n  actors,\n  actions,\n  guards,\n  delays\n}: {\n  schemas?: unknown;\n  types?: SetupTypes<TContext, TEvent, TChildrenMap, TTag, TInput, TOutput>;\n  actors?: {\n    [K in keyof TActors]: TActors[K];\n  };\n  actions?: {\n    [K in keyof TActions]: ActionFunction<\n      TContext,\n      TEvent,\n      TEvent,\n      TActions[K],\n      ToProvidedActor<TChildrenMap, TActors>,\n      ToParameterizedObject<TActions>,\n      ToParameterizedObject<TGuards>,\n      TDelay\n    >;\n  };\n  guards?: {\n    [K in keyof TGuards]: GuardPredicate<\n      TContext,\n      TEvent,\n      TGuards[K],\n      ToParameterizedObject<TGuards>\n    >;\n  };\n  delays?: {\n    [K in TDelay]: DelayConfig<\n      TContext,\n      TEvent,\n      ToParameterizedObject<TActions>['params'],\n      TEvent\n    >;\n  };\n}): {\n  createMachine: <\n    const TConfig extends MachineConfig<\n      TContext,\n      TEvent,\n      ToProvidedActor<TChildrenMap, TActors>,\n      ToParameterizedObject<TActions>,\n      ToParameterizedObject<TGuards>,\n      TDelay,\n      TTag,\n      TInput,\n      TOutput,\n      ResolveTypegenMeta<\n        TypegenDisabled,\n        TEvent,\n        ToProvidedActor<TChildrenMap, TActors>,\n        ToParameterizedObject<TActions>,\n        ToParameterizedObject<TGuards>,\n        TDelay,\n        TTag\n      >\n    >\n  >(\n    config: TConfig\n  ) => StateMachine<\n    TContext,\n    TEvent,\n    Cast<\n      ToChildren<ToProvidedActor<TChildrenMap, TActors>>,\n      Record<string, AnyActorRef | undefined>\n    >,\n    ToProvidedActor<TChildrenMap, TActors>,\n    ToParameterizedObject<TActions>,\n    ToParameterizedObject<TGuards>,\n    TDelay,\n    ToStateValue<TConfig>,\n    TTag,\n    TInput,\n    TOutput,\n    ResolveTypegenMeta<\n      TypegenDisabled,\n      TEvent,\n      ToProvidedActor<TChildrenMap, TActors>,\n      ToParameterizedObject<TActions>,\n      ToParameterizedObject<TGuards>,\n      TDelay,\n      TTag\n    >\n  >;\n} {\n  return {\n    createMachine: (config) =>\n      (createMachine as any)(\n        { ...config, schemas },\n        {\n          actors,\n          actions,\n          guards,\n          delays\n        }\n      )\n  };\n}\n","import { AnyActorRef, OutputFrom } from './types.ts';\n\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nexport function toPromise<T extends AnyActorRef>(\n  actor: T\n): Promise<OutputFrom<T>> {\n  return new Promise((resolve, reject) => {\n    actor.subscribe({\n      complete: () => {\n        resolve(actor.getSnapshot().output);\n      },\n      error: reject\n    });\n  });\n}\n"],"names":["Mailbox","constructor","_process","this","_active","_current","_last","start","flush","clear","next","enqueue","event","enqueued","value","consumed","STATE_DELIMITER","TARGETLESS_KEY","NULL_EVENT","XSTATE_INIT","XSTATE_ERROR","XSTATE_STOP","getDevTools","w","globalThis","self","window","__xstate__","devToolsAdapter","service","devTools","register","createDoneStateEvent","id","output","type","createErrorActorEvent","error","createInitEvent","input","reportUnhandledError","err","setTimeout","symbolObservable","Symbol","observable","createScheduledEventId","actorRef","sessionId","idCounter","matchesState","parentStateId","childStateId","parentStateValue","toStateValue","childStateValue","Object","keys","every","key","toStatePath","stateId","isArray","result","segment","i","length","charCodeAt","push","stateValue","isMachineSnapshot","pathToStateValue","statePath","marker","previous","mapValues","collection","iteratee","collectionKeys","toArrayStrict","toArray","undefined","resolveOutput","mapper","context","Array","toTransitionConfigArray","configLike","map","transitionLike","target","normalizeTarget","toObserver","nextHandler","errorHandler","completionHandler","isObserver","bind","complete","createInvokeId","stateNodeId","index","resolveReferencedActor","machine","src","match","implementations","actors","indexStr","nodeId","invokeConfig","getStateNodeById","config","invoke","$$ACTOR_TYPE","ProcessingStatus","defaultOptions","clock","fn","ms","clearTimeout","logger","console","log","Actor","logic","options","_snapshot","mailbox","observers","Set","_processingStatus","NotStarted","_parent","_syncSnapshot","ref","_actorScope","_systemId","system","_doneEvent","_deferred","resolvedOptions","parent","syncSnapshot","systemId","inspect","rootActor","children","Map","keyedActors","reverseKeyedActors","WeakMap","timerMap","scheduler","schedule","source","delay","Math","random","toString","slice","scheduledEvent","startedAt","Date","now","scheduledEventId","_scheduledEvents","timeout","_relay","cancel","cancelAll","snapshot","_bookId","_register","set","_unregister","delete","get","_set","existing","Error","observer","add","_sendInspectionEvent","resolvedInspectionEvent","rootId","forEach","sourceRef","_send","getSnapshot","scheduledEvets","scheduledId","createSystem","defer","stopChild","child","_stop","send","_initState","state","status","persistedState","restoreSnapshot","getInitialSnapshot","update","deferredFn","shift","_stopProcedure","_complete","invokeId","_error","subscribe","nextListenerOrObserver","errorListener","completeListener","Stopped","unsubscribe","Running","initEvent","attachDevTools","nextState","caughtError","transition","stop","_reportError","size","reportError","err2","toJSON","xstate$$type","getPersistedSnapshot","createActor","interpret","resolveCancel","_","actionArgs","actionParams","sendId","executeCancel","actorScope","resolvedSendId","args","params","resolve","execute","resolveSpawn","_actionParams","resolvedId","cloneMachineSnapshot","executeSpawn","spawnChild","resolveStop","actorRefOrString","resolvedActorRef","executeStop","checkStateIn","isStateId","_nodes","some","sn","matches","checkNot","guards","evaluateGuard","checkAnd","guard","checkOr","isInline","resolved","guardArgs","guardParams","check","isAtomicStateNode","stateNode","getChildren","values","states","filter","getProperAncestors","toStateNode","ancestors","m","getAllStateNodes","stateNodes","nodeSet","adjList","getAdjList","s","has","initialStates","getInitialStateNodesWithTheirAncestors","initialStateNode","getValueFromAdj","baseNode","childStateNodes","childStateNode","getStateValue","rootNode","isInFinalState","stateNodeSet","str","getDelayedTransitions","afterConfig","after","flatMap","configTransition","resolvedTransition","resolvedDelay","Number","isNaN","eventType","mutateEntryExit","afterEvent","delayRef","entry","raise","exit","delayedTransition","formatTransition","descriptor","transitionConfig","normalizedTarget","reenter","targets","isInternalTarget","getStateNodeByPath","resolvedTarget","message","resolveTarget","actions","t","resolveHistoryDefaultTransition","initial","isHistoryNode","getInitialStateNodes","initialState","ancestor","iter","descStateNode","getStateNode","stateKey","e","arrayStatePath","currentStateNode","getStateNodes","childStateKeys","subStateKey","Boolean","root","concat","reduce","allSubStateNodes","subStateNode","subStateNodes","transitionNode","transitionAtomicNode","subStateKeys","transitionCompoundNode","allInnerTransitions","subStateValue","innerTransitions","transitionParallelNode","getHistoryNodes","isDescendant","parentStateNode","hasIntersection","s1","s2","set1","set2","item","removeConflictingTransitions","enabledTransitions","historyValue","filteredTransitions","t1","t1Preempted","transitionsToRemove","t2","computeExitSet","t3","from","getEffectiveTargetStates","targetNode","node","getTransitionDomain","targetStates","lca","head","tail","findLeastCommonAncestor","transitions","statesToExit","domain","microstep","currentSnapshot","isInitial","internalQueue","mutStateNodeSet","nextSnapshot","changedHistory","sort","a","b","order","exitStateNode","historyNode","predicate","history","resolveActionsAndContext","def","exitStates","statesToEnter","statesForDefaultEntry","addDescendantStatesToEnter","addAncestorStatesToEnter","computeEntrySet","completedNodes","stateNodeToEnter","invokeDef","onSnapshot","initialActions","ancestorMarker","rootCompletionNode","getMachineOutput","enterStates","nextStateNodes","prevStateNodes","nextStateNodeSet","areStateNodeCollectionsEqual","doneStateEvent","historyStateNodes","addProperAncestorStatesToEnter","historyDefaultTransition","reentrancyDomain","anc","resolveActionsAndContextWorker","extra","retries","intermediateSnapshot","action","resolvedAction","builtinAction","deferredActorIds","retryResolve","macrostep","stopChildren","microstates","nextEvent","currentEvent","isErr","startsWith","isErrorActorEvent","selectTransitions","shouldSelectEventlessTransitions","selectEventlessTransitions","previousState","getTransitionData","enabledTransitionSet","atomicStates","loop","always","machineSnapshotMatches","testValue","machineSnapshotHasTag","tag","tags","machineSnapshotCan","transitionData","machineSnapshotToJSON","nodes","getMeta","can","hasTag","jsonValues","machineSnapshotGetMeta","acc","meta","createMachineSnapshot","persistContext","contextPart","copy","createSpawner","spawnedChildren","spawn","resolveAssign","assignment","assignArgs","partialUpdate","propAssignment","assign","resolveRaise","eventOrExpr","delaysMap","delays","resolvedEvent","configDelay","executeRaise","SpecialTargets","resolveSendTo","to","targetActorRef","Parent","Internal","includes","retryResolveSendTo","executeSendTo","data","sendTo","resolveEnqueueActions","collect","resolveLog","label","executeLog","fromTransition","initialContext","instanceStates","XSTATE_OBSERVABLE_NEXT","XSTATE_OBSERVABLE_ERROR","XSTATE_OBSERVABLE_COMPLETE","XSTATE_PROMISE_RESOLVE","XSTATE_PROMISE_REJECT","emptyLogic","cache","memo","object","memoizedData","EMPTY_OBJECT","toSerializableAction","name","StateNode","path","description","_key","_machine","join","idMap","stateConfig","_initialize","on","transitionsConfig","onDone","onError","formatTransitions","definition","version","flat","resolvedSrc","invokeDefValues","_target","formatInitialTransition","selectedTransition","candidates","getCandidates","receivedEventType","eventDescriptor","endsWith","partialEventTokens","split","eventTokens","tokenIndex","partialEventToken","eventToken","candidate","resolvedContext","guardPassed","guardType","events","ownEvents","StateMachine","schemas","__xstatenode","__TResolvedTypesMeta","provide","resolveState","resolvedStateValue","getPreInitialState","preInitial","preInitialState","macroState","fullPath","relativePath","resolvedStateId","STATE_IDENTIFIER","childrenJson","snapshotChildren","actorId","actorData","childState","restoredSnapshot","seen","reviveContext","defaultWaitForOptions","Infinity","createMachine","timeouts","_now","_id","_flushing","_flushingInvalidated","getId","time","flushTimeouts","sorted","_idA","timeoutA","_idB","timeoutB","endA","call","increment","and","types","typesText","JSON","stringify","enqueueActions","invokeCallback","callbackState","receivers","dispose","sendBack","receive","listener","receiver","lazyObservable","_subscription","observableCreator","promiseCreator","resolvedValue","Promise","then","response","errorData","actorLogic","inertActorScope","createInertActorScope","not","or","stateIn","actor","reject","res","rej","done","handle","sub","checkEmitted","emitted"],"mappings":"8OAKO,MAAMA,EAKXC,YAAoBC,GAA2BC,KAA3BD,SAAAA,EAAyBC,KAJrCC,SAAmB,EAAKD,KACxBE,SAAkC,KAAIF,KACtCG,MAA+B,IAES,CAEzCC,QACLJ,KAAKC,SAAU,EACfD,KAAKK,OACP,CAEOC,QAGDN,KAAKE,WACPF,KAAKE,SAASK,KAAO,KACrBP,KAAKG,MAAQH,KAAKE,SAEtB,CAEOM,QAAQC,GACb,MAAMC,EAAW,CACfC,MAAOF,EACPF,KAAM,MAGR,GAAIP,KAAKE,SAGP,OAFAF,KAAKG,MAAOI,KAAOG,OACnBV,KAAKG,MAAQO,GAIfV,KAAKE,SAAWQ,EAChBV,KAAKG,MAAQO,EAETV,KAAKC,SACPD,KAAKK,OAET,CAEQA,QACN,KAAOL,KAAKE,UAAU,CAGpB,MAAMU,EAAWZ,KAAKE,SACtBF,KAAKD,SAASa,EAASD,OACvBX,KAAKE,SAAWU,EAASL,IAC3B,CACAP,KAAKG,MAAQ,IACf,ECvDK,MAAMU,EAAkB,IAClBC,EAAiB,GACjBC,EAAa,GAGbC,EAAc,cACdC,EAAe,eACfC,EAAc,cCiC3B,SAASC,IACP,MAAMC,EApBoB,oBAAfC,WACFA,WAEW,oBAATC,KACFA,KAGAC,OAcT,GAAOH,EAAUI,WACf,OAAQJ,EAAUI,UAItB,CAcO,MAAMC,EAAoCC,IAK/C,MAAMC,EAAWR,IAEbQ,GACFA,EAASC,SAASF,EACpB,ECjDK,SAASG,EACdC,EACAC,GAEA,MAAO,CACLC,KAAO,qBAAoBF,IAC3BC,SAEJ,CAqBO,SAASE,EACdH,EACAI,GAEA,MAAO,CAAEF,KAAO,sBAAqBF,IAAMI,QAC7C,CAEO,SAASC,EAAgBC,GAC9B,MAAO,CAAEJ,KAAMhB,EAAaoB,QAC9B,CCpDO,SAASC,EAAqBC,GACnCC,YAAW,KACT,MAAMD,CAAG,GAEb,CCXO,MAAME,EACQ,mBAAXC,QAAyBA,OAAOC,YACxC,eCoCF,SAASC,EACPC,EACAd,GAEA,MAAQ,GAAEc,EAASC,aAAaf,GAClC,CAkDA,IAAIgB,EAAY,ECrET,SAASC,EACdC,EACAC,GAEA,MAAMC,EAAmBC,EAAaH,GAChCI,EAAkBD,EAAaF,GAErC,MAA+B,iBAApBG,EACuB,iBAArBF,GACFE,IAAoBF,EAOC,iBAArBA,EACFA,KAAoBE,EAGtBC,OAAOC,KAAKJ,GAAkBK,OAAOC,GACpCA,KAAOJ,GAINL,EAAaG,EAAiBM,GAAOJ,EAAgBI,KAEhE,CAEO,SAASC,EAAYC,GAC1B,GAAIC,EAAQD,GACV,OAAOA,EAGT,IAAIE,EAAmB,GACnBC,EAAU,GAEd,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAAK,CAEvC,OADaJ,EAAQM,WAAWF,IAG9B,KAAK,GAEHD,GAAWH,EAAQI,EAAI,GAEvBA,IACA,SAEF,KAAK,GACHF,EAAOK,KAAKJ,GACZA,EAAU,GACV,SAEJA,GAAWH,EAAQI,EACrB,CAIA,OAFAF,EAAOK,KAAKJ,GAELD,CACT,CAEO,SAAST,EACde,GAEA,GAAIC,GAAkBD,GACpB,OAAOA,EAAWvD,MAGpB,GAA0B,iBAAfuD,EACT,OAAOA,EAKT,OAAOE,EAFWX,EAAYS,GAGhC,CAEO,SAASE,EAAiBC,GAC/B,GAAyB,IAArBA,EAAUN,OACZ,OAAOM,EAAU,GAGnB,MAAM1D,EAAoB,CAAA,EAC1B,IAAI2D,EAAS3D,EAEb,IAAK,IAAImD,EAAI,EAAGA,EAAIO,EAAUN,OAAS,EAAGD,IACxC,GAAIA,IAAMO,EAAUN,OAAS,EAC3BO,EAAOD,EAAUP,IAAMO,EAAUP,EAAI,OAChC,CACL,MAAMS,EAAWD,EACjBA,EAAS,CAAA,EACTC,EAASF,EAAUP,IAAMQ,CAC3B,CAGF,OAAO3D,CACT,CAMO,SAAS6D,EACdC,EACAC,GAOA,MAAMd,EAAkC,CAAA,EAElCe,EAAiBtB,OAAOC,KAAKmB,GACnC,IAAK,IAAIX,EAAI,EAAGA,EAAIa,EAAeZ,OAAQD,IAAK,CAC9C,MAAMN,EAAMmB,EAAeb,GAC3BF,EAAOJ,GAAOkB,EAASD,EAAWjB,GAAMA,EAAKiB,EAAYX,EAC3D,CAEA,OAAOF,CACT,CAEO,SAASgB,EAAiBjE,GAC/B,OAAIgD,EAAQhD,GACHA,EAEF,CAACA,EACV,CAEO,SAASkE,EAAWlE,GACzB,YAAcmE,IAAVnE,EACK,GAEFiE,EAAcjE,EACvB,CAEO,SAASoE,EAIdC,EAGAC,EACAxE,EACAa,GAEA,MAAsB,mBAAX0D,EACFA,EAAO,CAAEC,UAASxE,QAAOa,SAwB3B0D,CACT,CAWO,SAASrB,EAAQhD,GACtB,OAAOuE,MAAMvB,QAAQhD,EACvB,CAQO,SAASwE,EAIdC,GAEA,OAAOR,EAAcQ,GAAYC,KAAKC,QAER,IAAnBA,GACmB,iBAAnBA,EAEA,CAAEC,OAAQD,GAGZA,GAEX,CAEO,SAASE,EAIdD,GAEA,QAAeT,IAAXS,GAAwBA,IAAWzE,EAGvC,OAAO+D,EAAQU,EACjB,CAEO,SAASE,EACdC,EACAC,EACAC,GAEA,MAAMC,EAAoC,iBAAhBH,EACpBpE,EAAOuE,EAAaH,OAAcZ,EAExC,MAAO,CACLvE,MAAOsF,EAAaH,EAAYnF,KAAOmF,IAAcI,KAAKxE,GAC1DY,OAAQ2D,EAAaH,EAAYxD,MAAQyD,IAAeG,KAAKxE,GAC7DyE,UAAWF,EAAaH,EAAYK,SAAWH,IAAoBE,KACjExE,GAGN,CAEO,SAAS0E,EAAeC,EAAqBC,GAClD,MAAQ,GAAEA,KAASD,GACrB,CAEO,SAASE,EAAuBC,EAA0BC,GAC/D,MAAMC,EAAQD,EAAIC,MAAM,gCACxB,IAAKA,EACH,OAAOF,EAAQG,gBAAgBC,OAAOH,GAExC,OAASI,EAAUC,GAAUJ,EAEvBK,EADOP,EAAQQ,iBAAiBF,GACZG,OAAOC,OACjC,OACE5B,MAAMvB,QAAQgD,GACVA,EAAaF,GACZE,GACLN,GACJ,CCxPO,MAAMU,EAAe,EAchBC,IAAAA,WAAAA,GAAgB,OAAhBA,EAAAA,EAAgB,WAAA,GAAA,aAAhBA,EAAAA,EAAgB,QAAA,GAAA,UAAhBA,EAAAA,EAAgB,QAAA,GAAA,UAAhBA,CAAgB,EAAA,CAAA,GAM5B,MAAMC,EAAiB,CACrBC,MAAO,CACL3E,WAAYA,CAAC4E,EAAIC,IACR7E,WAAW4E,EAAIC,GAExBC,aAAevF,GACNuF,aAAavF,IAGxBwF,OAAQC,QAAQC,IAAI1B,KAAKyB,SACzB5F,UAAU,GAML,MAAM8F,EA6DX3H,YACS4H,EACPC,GACA3H,KAFO0H,MAAAA,EA3DT1H,KAGQ4H,eAAS,EACjB5H,KAGOkH,WAAK,EAAAlH,KACL2H,aAAO,EAEd3H,KAGO8B,QAAE,EAAA9B,KAED6H,QAA2C,IAAIhI,EACrDG,KAAKD,SAAS+F,KAAK9F,OACpBA,KAEO8H,UAAiD,IAAIC,IAAK/H,KAC1DsH,YAAM,EAEdtH,KACOgI,kBAAsChB,EAAiBiB,WAE9DjI,KACOkI,aAAO,EACdlI,KACOmI,mBAAa,EAAAnI,KACboI,SAAG,EACVpI,KACQqI,iBAAW,EAAArI,KAMXsI,eAAS,EAEjBtI,KAGO6C,eAAS,EAEhB7C,KAGOuI,YAAM,EAAAvI,KACLwI,gBAAU,EAAAxI,KAEXqG,SAAG,EAmGVrG,KACQyI,UAA+B,GAxFrC,MAAMC,EAAkB,IACnBzB,KACAU,IAGCT,MAAEA,EAAKI,OAAEA,EAAMqB,OAAEA,EAAMC,aAAEA,EAAY9G,GAAEA,EAAE+G,SAAEA,EAAQC,QAAEA,GACzDJ,EAEF1I,KAAKuI,OAASI,EACVA,EAAOJ,OFlDR,SACLQ,EACApB,GAKA,MAAMqB,EAAW,IAAIC,IACfC,EAAc,IAAID,IAClBE,EAAqB,IAAIC,QACzBtB,EAAY,IAAIC,IAChBsB,EAA+C,CAAA,EAC/CnC,EAAQS,EAAQT,MAEhBoC,EAAuB,CAC3BC,SAAUA,CACRC,EACAjE,EACA9E,EACAgJ,EACA3H,EAAK4H,KAAKC,SAASC,SAAS,IAAIC,MAAM,MAEtC,MAAMC,EAAiC,CACrCN,SACAjE,SACA9E,QACAgJ,QACA3H,KACAiI,UAAWC,KAAKC,OAEZC,EAAmBvH,EAAuB6G,EAAQ1H,GACxDyG,EAAOX,UAAUuC,iBAAiBD,GAAoBJ,EAEtD,MAAMM,EAAUlD,EAAM3E,YAAW,YACxB8G,EAASa,UACT3B,EAAOX,UAAUuC,iBAAiBD,GAEzC3B,EAAO8B,OAAOb,EAAQjE,EAAQ9E,EAAM,GACnCgJ,GAEHJ,EAASa,GAAoBE,CAAO,EAEtCE,OAAQA,CAACd,EAAQ1H,KACf,MAAMoI,EAAmBvH,EAAuB6G,EAAQ1H,GAClDsI,EAAUf,EAASa,UAElBb,EAASa,UACT3B,EAAOX,UAAUuC,iBAAiBD,GAEzChD,EAAMG,aAAa+C,EAAQ,EAE7BG,UAAY3H,IACV,IAAK,MAAMsH,KAAoB3B,EAAOX,UAAUuC,iBAAkB,CAChE,MAAML,EACJvB,EAAOX,UAAUuC,iBACfD,GAEAJ,EAAeN,SAAW5G,GAC5B0G,EAAUgB,OAAO1H,EAAUkH,EAAehI,GAE9C,IAIEyG,EAAyB,CAC7BX,UAAW,CACTuC,kBACGxC,GAAS6C,UAAa7C,EAAQ6C,SAAiBlB,YAAc,CAAC,GAEnEmB,QAASA,IAAO,KAAI3H,IACpB4H,UAAWA,CAAC7H,EAAWD,KACrBoG,EAAS2B,IAAI9H,EAAWD,GACjBC,GAET+H,YAAchI,IACZoG,EAAS6B,OAAOjI,EAASC,WACzB,MAAMgG,EAAWM,EAAmB2B,IAAIlI,QAEvBkC,IAAb+D,IACFK,EAAY2B,OAAOhC,GACnBM,EAAmB0B,OAAOjI,GAC5B,EAEFkI,IAAMjC,GACGK,EAAY4B,IAAIjC,GAEzBkC,KAAMA,CAAClC,EAAUjG,KACf,MAAMoI,EAAW9B,EAAY4B,IAAIjC,GACjC,GAAImC,GAAYA,IAAapI,EAC3B,MAAM,IAAIqI,MACP,yBAAwBpC,sBAI7BK,EAAYyB,IAAI9B,EAAUjG,GAC1BuG,EAAmBwB,IAAI/H,EAAUiG,EAAS,EAE5CC,QAAUoC,IACRpD,EAAUqD,IAAID,EAAS,EAEzBE,qBAAuB3K,IACrB,MAAM4K,EAA2C,IAC5C5K,EACH6K,OAAQvC,EAAUlG,WAEpBiF,EAAUyD,SAASL,GAAaA,EAAS3K,OAAO8K,IAAyB,EAE3EhB,OAAQA,CAACb,EAAQjE,EAAQ9E,KACvB8H,EAAO6C,qBAAqB,CAC1BpJ,KAAM,gBACNwJ,UAAWhC,EACX5G,SAAU2C,EACV9E,UAGF8E,EAAOkG,MAAMhL,EAAM,EAErB6I,YACAoC,YAAaA,KACJ,CACLvB,iBAAkB,IAAK5B,EAAOX,UAAUuC,oBAG5C/J,MAAOA,KACL,MAAMuL,EAAiBpD,EAAOX,UAAUuC,iBACxC5B,EAAOX,UAAUuC,iBAAmB,GACpC,IAAK,MAAMyB,KAAeD,EAAgB,CACxC,MAAMnC,OAAEA,EAAMjE,OAAEA,EAAM9E,MAAEA,EAAKgJ,MAAEA,EAAK3H,GAAEA,GACpC6J,EAAeC,GACjBtC,EAAUC,SAASC,EAAQjE,EAAQ9E,EAAOgJ,EAAO3H,EACnD,IAIJ,OAAOyG,CACT,CEpFQsD,CAAa7L,KAAM,CACjBkH,UAGF4B,IAAYH,GAEd3I,KAAKuI,OAAOO,QAAQrD,EAAWqD,IAGjC9I,KAAK6C,UAAY7C,KAAKuI,OAAOkC,UAC7BzK,KAAK8B,GAAKA,GAAM9B,KAAK6C,UACrB7C,KAAKsH,OAASA,EACdtH,KAAKkH,MAAQA,EACblH,KAAKkI,QAAUS,EACf3I,KAAKmI,cAAgBS,EACrB5I,KAAK2H,QAAUe,EAEf1I,KAAKqG,IAAMqC,EAAgBrC,KAAOqB,EAClC1H,KAAKoI,IAAMpI,KACXA,KAAKqI,YAAc,CACjB/G,KAAMtB,KACN8B,GAAI9B,KAAK8B,GACTe,UAAW7C,KAAK6C,UAChByE,OAAQtH,KAAKsH,OACbwE,MAAQ3E,IACNnH,KAAKyI,UAAUxE,KAAKkD,EAAG,EAEzBoB,OAAQvI,KAAKuI,OACbwD,UAAYC,IACV,GAAIA,EAAM9D,UAAYlI,KACpB,MAAM,IAAIiL,MACP,2BAA0Be,EAAMlK,SAAS9B,KAAK8B,gCAGlDkK,EAAcC,OAAO,GAM1BjM,KAAKkM,KAAOlM,KAAKkM,KAAKpG,KAAK9F,MAC3BA,KAAKuI,OAAO6C,qBAAqB,CAC/BpJ,KAAM,gBACNY,SAAU5C,OAGR6I,IACF7I,KAAKsI,UAAYO,EACjB7I,KAAKuI,OAAOwC,KAAKlC,EAAU7I,OAG7BA,KAAKmM,WAAWxE,GAAS6C,UAAY7C,GAASyE,OAE1CvD,GAA+C,WAAlC7I,KAAK4H,UAAkByE,QACtCrM,KAAKuI,OAAOqC,YAAY5K,KAE5B,CAEQmM,WAAWG,GACjB,IACEtM,KAAK4H,UAAY0E,EACbtM,KAAK0H,MAAM6E,gBACTvM,KAAK0H,MAAM6E,gBAAgBD,EAAgBtM,KAAKqI,aAChDiE,EACFtM,KAAK0H,MAAM8E,mBAAmBxM,KAAKqI,YAAarI,KAAK2H,SAASvF,MACnE,CAAC,MAAOE,GAIPtC,KAAK4H,UAAY,CACfyE,OAAQ,QACRtK,YAAQ+C,EACR5C,MAAOI,EAEX,CACF,CAKQmK,OAAOjC,EAAgC/J,GAK7C,IAAIiM,EAEJ,IALA1M,KAAK4H,UAAY4C,EAKTkC,EAAa1M,KAAKyI,UAAUkE,SAClC,IACED,GACD,CAAC,MAAOpK,GAMPtC,KAAKyI,UAAU1E,OAAS,EACxB/D,KAAK4H,UAAY,IACX4C,EACJ6B,OAAQ,QACRnK,MAAOI,EAEX,CAGF,OAAStC,KAAK4H,UAAkByE,QAC9B,IAAK,SACH,IAAK,MAAMnB,KAAYlL,KAAK8H,UAC1B,IACEoD,EAAS3K,OAAOiK,EACjB,CAAC,MAAOlI,GACPD,EAAqBC,EACvB,CAEF,MACF,IAAK,OAOH,IAAK,MAAM4I,KAAYlL,KAAK8H,UAC1B,IACEoD,EAAS3K,OAAOiK,EACjB,CAAC,MAAOlI,GACPD,EAAqBC,EACvB,CAGFtC,KAAK4M,iBACL5M,KAAK6M,YACL7M,KAAKwI,YL5OXsE,EK6OQ9M,KAAK8B,GL5ObC,EK6OS/B,KAAK4H,UAAkB7F,OL3OzB,CACLC,KAAO,qBAAoB8K,IAC3B/K,WK2OQ/B,KAAKkI,SACPlI,KAAKuI,OAAO8B,OAAOrK,KAAMA,KAAKkI,QAASlI,KAAKwI,YAG9C,MACF,IAAK,QACHxI,KAAK+M,OAAQ/M,KAAK4H,UAAkB1F,OLvPrC,IACL4K,EACA/K,EKwPE/B,KAAKuI,OAAO6C,qBAAqB,CAC/BpJ,KAAM,mBACNY,SAAU5C,KACVS,QACA+J,YAEJ,CAwDOwC,UACLC,EAGAC,EACAC,GAEA,MAAMjC,EAAWzF,EACfwH,EACAC,EACAC,GAGF,GAAInN,KAAKgI,oBAAsBhB,EAAiBoG,QAC9CpN,KAAK8H,UAAUqD,IAAID,QAEnB,OAASlL,KAAK4H,UAAkByE,QAC9B,IAAK,OACH,IACEnB,EAASnF,YACV,CAAC,MAAOzD,GACPD,EAAqBC,EACvB,CACA,MACF,IAAK,QAAS,CACZ,MAAMA,EAAOtC,KAAK4H,UAAkB1F,MACpC,GAAKgJ,EAAShJ,MAGZ,IACEgJ,EAAShJ,MAAMI,EAChB,CAAC,MAAOA,GACPD,EAAqBC,EACvB,MANAD,EAAqBC,GAQvB,KACF,EAIJ,MAAO,CACL+K,YAAaA,KACXrN,KAAK8H,UAAU+C,OAAOK,EAAS,EAGrC,CAKO9K,QACL,GAAIJ,KAAKgI,oBAAsBhB,EAAiBsG,QAE9C,OAAOtN,KAGLA,KAAKmI,eACPnI,KAAKgN,UAAU,CACbzM,KAAOiK,IACmB,WAApBA,EAAS6B,QACXrM,KAAKuI,OAAO8B,OAAOrK,KAAMA,KAAKkI,QAAU,CACtClG,KAAO,mBAAkBhC,KAAK8B,KAC9B0I,YAEJ,EAEFtI,MAAOA,SAIXlC,KAAKuI,OAAOmC,UAAU1K,KAAK6C,UAAW7C,MAClCA,KAAKsI,WACPtI,KAAKuI,OAAOwC,KAAK/K,KAAKsI,UAAWtI,MAEnCA,KAAKgI,kBAAoBhB,EAAiBsG,QAG1C,MAAMC,EAAYpL,EAAgBnC,KAAK2H,QAAQvF,OAE/CpC,KAAKuI,OAAO6C,qBAAqB,CAC/BpJ,KAAM,gBACNwJ,UAAWxL,KAAKkI,QAChBtF,SAAU5C,KACVS,MAAO8M,IAKT,OAFgBvN,KAAK4H,UAAkByE,QAGrC,IAAK,OAQH,OALArM,KAAKyM,OACHzM,KAAK4H,UACL2F,GAGKvN,KACT,IAAK,QAEH,OADAA,KAAK+M,OAAQ/M,KAAK4H,UAAkB1F,OAC7BlC,KAOX,GAJKA,KAAKkI,SACRlI,KAAKuI,OAAOnI,QAGVJ,KAAK0H,MAAMtH,MACb,IACEJ,KAAK0H,MAAMtH,MAAMJ,KAAK4H,UAAW5H,KAAKqI,YACvC,CAAC,MAAO/F,GAOP,OANAtC,KAAK4H,UAAY,IACX5H,KAAK4H,UACTyE,OAAQ,QACRnK,MAAOI,GAETtC,KAAK+M,OAAOzK,GACLtC,IACT,CAcF,OARAA,KAAKyM,OAAOzM,KAAK4H,UAAW2F,GAExBvN,KAAK2H,QAAQhG,UACf3B,KAAKwN,iBAGPxN,KAAK6H,QAAQzH,QAENJ,IACT,CAEQD,SAASU,GACf,IAAIgN,EACAC,EACJ,IACED,EAAYzN,KAAK0H,MAAMiG,WACrB3N,KAAK4H,UACLnH,EACAT,KAAKqI,YAER,CAAC,MAAO/F,GAEPoL,EAAc,CAAEpL,MAClB,CAEA,GAAIoL,EAAa,CACf,MAAMpL,IAAEA,GAAQoL,EAQhB,OANA1N,KAAK4H,UAAY,IACX5H,KAAK4H,UACTyE,OAAQ,QACRnK,MAAOI,QAETtC,KAAK+M,OAAOzK,EAEd,CAEAtC,KAAKyM,OAAOgB,EAAWhN,GACnBA,EAAMuB,OAASd,IACjBlB,KAAK4M,iBACL5M,KAAK6M,YAET,CAEQZ,QACN,OAAIjM,KAAKgI,oBAAsBhB,EAAiBoG,QACvCpN,MAETA,KAAK6H,QAAQvH,QACTN,KAAKgI,oBAAsBhB,EAAiBiB,YAC9CjI,KAAKgI,kBAAoBhB,EAAiBoG,QACnCpN,OAETA,KAAK6H,QAAQrH,QAAQ,CAAEwB,KAAMd,IAEtBlB,MACT,CAKO4N,OACL,GAAI5N,KAAKkI,QACP,MAAM,IAAI+C,MAAM,gDAElB,OAAOjL,KAAKiM,OACd,CACQY,YACN,IAAK,MAAM3B,KAAYlL,KAAK8H,UAC1B,IACEoD,EAASnF,YACV,CAAC,MAAOzD,GACPD,EAAqBC,EACvB,CAEFtC,KAAK8H,UAAUxH,OACjB,CACQuN,aAAavL,GACnB,IAAKtC,KAAK8H,UAAUgG,KAIlB,YAHK9N,KAAKkI,SACR7F,EAAqBC,IAIzB,IAAIyL,GAAc,EAElB,IAAK,MAAM7C,KAAYlL,KAAK8H,UAAW,CACrC,MAAMoF,EAAgBhC,EAAShJ,MAC/B6L,KAAiBb,EACjB,IACEA,IAAgB5K,EACjB,CAAC,MAAO0L,GACP3L,EAAqB2L,EACvB,CACF,CACAhO,KAAK8H,UAAUxH,QACXyN,GACF1L,EAAqBC,EAEzB,CACQyK,OAAOzK,GACbtC,KAAK4M,iBACL5M,KAAK6N,aAAavL,GACdtC,KAAKkI,SACPlI,KAAKuI,OAAO8B,OACVrK,KACAA,KAAKkI,QACLjG,EAAsBjC,KAAK8B,GAAIQ,GAGrC,CAMQsK,iBACN,OAAI5M,KAAKgI,oBAAsBhB,EAAiBsG,UAMhDtN,KAAKuI,OAAOe,UAAUiB,UAAUvK,MAGhCA,KAAK6H,QAAQvH,QAKbN,KAAK6H,QAAU,IAAIhI,EAAQG,KAAKD,SAAS+F,KAAK9F,OAE9CA,KAAKgI,kBAAoBhB,EAAiBoG,QAC1CpN,KAAKuI,OAAOqC,YAAY5K,OAffA,IAkBX,CAKOyL,MAAMhL,GACPT,KAAKgI,oBAAsBhB,EAAiBoG,SAYhDpN,KAAK6H,QAAQrH,QAAQC,EACvB,CAOOyL,KAAKzL,GAMVT,KAAKuI,OAAO8B,YAAOvF,EAAW9E,KAAMS,EACtC,CAEQ+M,iBACN,MAAM7L,SAAEA,GAAa3B,KAAK2H,QAC1B,GAAIhG,EAAU,EAEU,mBAAbA,EAA0BA,EAAWF,GAEtBzB,KAC1B,CACF,CACOiO,SACL,MAAO,CACLC,aAAcnH,EACdjF,GAAI9B,KAAK8B,GAEb,CAeOqM,qBAAqBxG,GAC1B,OAAO3H,KAAK0H,MAAMyG,qBAAqBnO,KAAK4H,UAAWD,EACzD,CAEAnF,CAAQA,KACN,OAAOxC,IACT,CAgBO0L,cAML,OAAO1L,KAAK4H,SACd,EAsCK,SAASwG,EACd1G,MACIC,IASJ,OAAO,IAAIF,EAAMC,EAAOC,EAC1B,CAOa0G,MAAAA,EAAYD,ECpuBzB,SAASE,EACPC,EACA/D,EACAgE,EACAC,GACAC,OAAEA,IAIF,MAAO,CAAClE,EADY,mBAAXkE,EAAwBA,EAAOF,EAAYC,GAAgBC,EAEtE,CAEA,SAASC,EAAcC,EAA2BC,GAChDD,EAAW9C,OAAM,KACf8C,EAAWrG,OAAOe,UAAUgB,OAAOsE,EAAWtN,KAAMuN,EAAe,GAEvE,CAqCO,SAASvE,EAMdoE,GAEA,SAASpE,EACPwE,EACAC,GAKF,CAQA,OANAzE,EAAOtI,KAAO,gBACdsI,EAAOoE,OAASA,EAEhBpE,EAAO0E,QAAUV,EACjBhE,EAAO2E,QAAUN,EAEVrE,CACT,CCpEA,SAAS4E,EACPN,EACApE,EACAgE,EACAW,GACArN,GACEA,EAAE+G,SACFA,EAAQxC,IACRA,EAAGjE,MACHA,EAAKwG,aACLA,IASF,MAAMlB,EACW,iBAARrB,EACHF,EAAuBqE,EAASpE,QAASC,GACzCA,EACA+I,EAA2B,mBAAPtN,EAAoBA,EAAG0M,GAAc1M,EAE/D,IAAIc,EAyBJ,OAvBI8E,IACF9E,EAAWwL,EAAY1G,EAAO,CAC5B5F,GAAIsN,EACJ/I,MACAsC,OAAQiG,EAAWtN,KACnBsH,eACAC,WACAzG,MACmB,mBAAVA,EACHA,EAAM,CACJ6C,QAASuF,EAASvF,QAClBxE,MAAO+N,EAAW/N,MAClBa,KAAMsN,EAAWtN,OAEnBc,KASH,CACLiN,GAAqB7E,EAAU,CAC7BxB,SAAU,IACLwB,EAASxB,SACZoG,CAACA,GAAaxM,KAGlB,CACEd,KACAc,YAGN,CAEA,SAAS0M,EACPV,GACA9M,GAAEA,EAAEc,SAAEA,IAEDA,GAILgM,EAAW9C,OAAM,KACXlJ,EAASoF,oBAAsBhB,EAAiBoG,SAGpDxK,EAASxC,OAAO,GAEpB,CAkEO,SAASmP,MAQZlJ,GACAvE,GAAEA,EAAE+G,SAAEA,EAAQzG,MAAEA,EAAKwG,aAAEA,GAAe,GAAU,CAAS,IAG3D,SAAS2G,EACPT,EACAC,GAKF,CAYA,OAVAQ,EAAWvN,KAAO,sBAClBuN,EAAWzN,GAAKA,EAChByN,EAAW1G,SAAWA,EACtB0G,EAAWlJ,IAAMA,EACjBkJ,EAAWnN,MAAQA,EACnBmN,EAAW3G,aAAeA,EAE1B2G,EAAWP,QAAUE,EACrBK,EAAWN,QAAUK,EAEdC,CACT,CCtLA,SAASC,EACPjB,EACA/D,EACAsE,EACAL,GACA7L,SAAEA,IAEF,MAAM6M,EACgB,mBAAb7M,EAA0BA,EAASkM,EAAML,GAAgB7L,EAC5D8M,EACwB,iBAArBD,EACHjF,EAASxB,SAASyG,GAClBA,EAEN,IAAIzG,EAAWwB,EAASxB,SAKxB,OAJI0G,IACF1G,EAAW,IAAKA,UACTA,EAAS0G,EAAiB5N,KAE5B,CACLuN,GAAqB7E,EAAU,CAC7BxB,aAEF0G,EAEJ,CACA,SAASC,EACPf,EACAhM,GAEKA,IAOLgM,EAAWrG,OAAOqC,YAAYhI,GAI1BA,EAASoF,oBAAsBhB,EAAiBsG,QAQpDsB,EAAW9C,OAAM,KACf8C,EAAW7C,UAAUnJ,EAAS,IAR9BgM,EAAW7C,UAAUnJ,GAUzB,CAgBO,SAASmJ,EAMdnJ,GAEA,SAASgL,EACPkB,EACAC,GAKF,CAQA,OANAnB,EAAK5L,KAAO,mBACZ4L,EAAKhL,SAAWA,EAEhBgL,EAAKoB,QAAUQ,EACf5B,EAAKqB,QAAUU,EAER/B,CACT,CAOO,MAAMA,EAAO7B,EClCpB,SAAS6D,EACPpF,EACA+D,GACArK,WAAEA,IAEF,GAA0B,iBAAfA,GAA2B2L,GAAU3L,GAAa,CAC3D,MAAMqB,EAASiF,EAASpE,QAAQQ,iBAAiB1C,GACjD,OAAOsG,EAASsF,OAAOC,MAAMC,GAAOA,IAAOzK,GAC7C,CAEA,OAAOiF,EAASyF,QAAQ/L,EAC1B,CA8BA,SAASgM,EACP1F,GACAvF,QAAEA,EAAOxE,MAAEA,IACX0P,OAAEA,IAEF,OAAQC,EAAcD,EAAO,GAAIlL,EAASxE,EAAO+J,EACnD,CAqDA,SAAS6F,EACP7F,GACAvF,QAAEA,EAAOxE,MAAEA,IACX0P,OAAEA,IAEF,OAAOA,EAAO5M,OAAO+M,GACnBF,EAAcE,EAAOrL,EAASxE,EAAO+J,IAEzC,CAkEA,SAAS+F,EACP/F,GACAvF,QAAEA,EAAOxE,MAAEA,IACX0P,OAAEA,IAEF,OAAOA,EAAOJ,MAAMO,GAAUF,EAAcE,EAAOrL,EAASxE,EAAO+J,IACrE,CAmEO,SAAS4F,EAIdE,EACArL,EACAxE,EACA+J,GAEA,MAAMpE,QAAEA,GAAYoE,EACdgG,EAA4B,mBAAVF,EAElBG,EAAWD,EACbF,EACAlK,EAAQG,gBAAgB4J,OACL,iBAAVG,EAAqBA,EAAQA,EAAMtO,MAGhD,IAAKwO,IAAaC,EAChB,MAAM,IAAIxF,MACP,UACkB,iBAAVqF,EAAqBA,EAAQA,EAAMtO,+BAKhD,GAAwB,mBAAbyO,EACT,OAAOL,EAAcK,EAAWxL,EAASxE,EAAO+J,GAGlD,MAAMkG,EAAY,CAChBzL,UACAxE,SAGIkQ,EACJH,GAA6B,iBAAVF,OACfxL,EACA,WAAYwL,EACc,mBAAjBA,EAAMvB,OACXuB,EAAMvB,OAAO,CAAE9J,UAASxE,UACxB6P,EAAMvB,YACRjK,EAER,KAAM,UAAW2L,GAIf,OAAOA,EAASC,EAAWC,GAK7B,OAFqBF,EAEDG,MAClBpG,EACAkG,EACAD,EAEJ,CChVO,MAAMI,EAAqBC,GACb,WAAnBA,EAAU9O,MAAwC,UAAnB8O,EAAU9O,KAE3C,SAAS+O,EACPD,GAEA,OAAOzN,OAAO2N,OAAOF,EAAUG,QAAQC,QAAQlB,GAAmB,YAAZA,EAAGhO,MAC3D,CAEA,SAASmP,GACPL,EACAM,GAEA,MAAMC,EAAqC,GAE3C,GAAID,IAAgBN,EAClB,OAAOO,EAIT,IAAIC,EAAIR,EAAUnI,OAClB,KAAO2I,GAAKA,IAAMF,GAChBC,EAAUpN,KAAKqN,GACfA,EAAIA,EAAE3I,OAGR,OAAO0I,CACT,CAEO,SAASE,GACdC,GAEA,MAAMC,EAAU,IAAI1J,IAAIyJ,GAElBE,EAAUC,GAAWF,GAG3B,IAAK,MAAMG,KAAKH,EAEd,GAAe,aAAXG,EAAE5P,MAAyB0P,EAAQ5G,IAAI8G,IAAOF,EAAQ5G,IAAI8G,GAAI7N,QAKhE,GAAe,aAAX6N,EAAE5P,KACJ,IAAK,MAAMgK,KAAS+E,EAAYa,GAC9B,GAAmB,YAAf5F,EAAMhK,OAILyP,EAAQI,IAAI7F,GAAQ,CACvB,MAAM8F,EAAgBC,GAAuC/F,GAC7D,IAAK,MAAMgG,KAAoBF,EAC7BL,EAAQtG,IAAI6G,EAEhB,OAfJD,GAAuCH,GAAGrG,SAASyE,GACjDyB,EAAQtG,IAAI6E,KAqBlB,IAAK,MAAM4B,KAAKH,EAAS,CACvB,IAAIH,EAAIM,EAAEjJ,OAEV,KAAO2I,GACLG,EAAQtG,IAAImG,GACZA,EAAIA,EAAE3I,MAEV,CAEA,OAAO8I,CACT,CAEA,SAASQ,GAAgBC,EAAwBR,GAC/C,MAAMS,EAAkBT,EAAQ5G,IAAIoH,GAEpC,IAAKC,EACH,MAAO,GAGT,GAAsB,aAAlBD,EAASlQ,KAAqB,CAChC,MAAMoQ,EAAiBD,EAAgB,GACvC,IAAIC,EAKF,MAAO,GAJP,GAAIvB,EAAkBuB,GACpB,OAAOA,EAAe5O,GAK5B,CAEA,MAAMU,EAAyB,CAAA,EAC/B,IAAK,MAAMkO,KAAkBD,EAC3BjO,EAAWkO,EAAe5O,KAAOyO,GAAgBG,EAAgBV,GAGnE,OAAOxN,CACT,CAEO,SAASyN,GAGdH,GACA,MAAME,EAAmB,IAAIzI,IAE7B,IAAK,MAAM2I,KAAKJ,EACTE,EAAQG,IAAID,IACfF,EAAQ/G,IAAIiH,EAAG,IAGbA,EAAEjJ,SACC+I,EAAQG,IAAID,EAAEjJ,SACjB+I,EAAQ/G,IAAIiH,EAAEjJ,OAAQ,IAGxB+I,EAAQ5G,IAAI8G,EAAEjJ,QAAS1E,KAAK2N,IAIhC,OAAOF,CACT,CAEO,SAASW,GACdC,EACAd,GAGA,OAAOS,GAAgBK,EAAUX,GADlBJ,GAAiBC,IAElC,CAEO,SAASe,GACdC,EACA1B,GAEA,MAAuB,aAAnBA,EAAU9O,KACL+O,EAAYD,GAAWf,MAC3B6B,GAAiB,UAAXA,EAAE5P,MAAoBwQ,EAAaX,IAAID,KAG3B,aAAnBd,EAAU9O,KACL+O,EAAYD,GAAWvN,OAAOyM,GACnCuC,GAAeC,EAAcxC,KAIP,UAAnBc,EAAU9O,IACnB,CAEO,MAAM6N,GAAa4C,GZ9MM,MY8MUA,EAAI,GAiEvC,SAASC,GACd5B,GAEA,MAAM6B,EAAc7B,EAAUjK,OAAO+L,MACrC,IAAKD,EACH,MAAO,GAyBT,OAd2BtP,OAAOC,KAAKqP,GAAaE,SAAQ,CAACpJ,EAAO3F,KAClE,MAAMgP,EAAmBH,EAAYlJ,GAC/BsJ,EACwB,iBAArBD,EACH,CAAEvN,OAAQuN,GACVA,EACAE,EAAgBC,OAAOC,OAAOzJ,GAASA,GAASA,EAChD0J,EAfgBC,EAAC3J,EAAwB3F,KAC/C,MAAMuP,GVjRuBC,EUiRO7J,EVjRoB3H,EUiRbgP,EAAUhP,GVhRhD,CAAEE,KAAO,gBAAesR,KAAYxR,MADtC,IAA0BwR,EAA2BxR,EUkRxD,MAAMqR,EAAYE,EAAWrR,KAG7B,OAFA8O,EAAUyC,MAAMtP,KAAKuP,GAAMH,EAAY,CAAEvR,GAAIqR,EAAW1J,WACxDqH,EAAU2C,KAAKxP,KAAKqG,EAAO6I,IACpBA,CAAS,EAUEC,CAAgBJ,GAClC,OAAOnO,EAAQkO,GAAoB1N,KAAKsI,IAAgB,IACnDA,EACHlN,MAAO0S,EACP1J,MAAOuJ,KACN,IAEqB3N,KAAKqO,IAC7B,MAAMjK,MAAEA,GAAUiK,EAClB,MAAO,IACFC,GACD7C,EACA4C,EAAkBjT,MAClBiT,GAEFjK,QACD,GAEL,CAEO,SAASkK,GAId7C,EACA8C,EACAC,GAEA,MAAMC,EAAmBtO,EAAgBqO,EAAiBtO,QACpDwO,EAAUF,EAAiBE,UAAW,EACtCxO,EA2ID,SACLuL,EACAkD,GAEA,QAAgBlP,IAAZkP,EAEF,OAEF,OAAOA,EAAQ3O,KAAKE,IAClB,GAAsB,iBAAXA,EACT,OAAOA,EAET,GAAIsK,GAAUtK,GACZ,OAAOuL,EAAU1K,QAAQQ,iBAAiBrB,GAG5C,MAAM0O,EAAmB1O,EAAO,KAAO1E,EAGvC,GAAIoT,IAAqBnD,EAAUnI,OACjC,OAAOuL,GAAmBpD,EAAWvL,EAAOsE,MAAM,IAEpD,MAAMsK,EAAiBF,EAAmBnD,EAAUtN,IAAM+B,EAASA,EACnE,IAAIuL,EAAUnI,OAaZ,MAAM,IAAIsC,MACP,oBAAmB1F,+DAAoEA,OAb1F,IAKE,OAJwB2O,GACtBpD,EAAUnI,OACVwL,EAGH,CAAC,MAAO7R,GACP,MAAM,IAAI2I,MACP,iDAAgD6F,EAAUhP,SAASQ,EAAI8R,UAE5E,CAKF,GAEJ,CApLiBC,CAAcvD,EAAWgD,GAQlCnG,EAAa,IACdkG,EACHS,QAASzP,EAAQgP,EAAiBS,SAClChE,MAAOuD,EAAiBvD,MACxB/K,SACAiE,OAAQsH,EACRiD,UACAZ,UAAWS,EACX3F,OAAQA,KAAO,IACVN,EACHnE,OAAS,IAAGsH,EAAUhP,KACtByD,OAAQA,EAASA,EAAOF,KAAKkP,GAAO,IAAGA,EAAEzS,YAAQgD,KAIrD,OAAO6I,CACT,CA8JA,SAAS6G,GAGP1D,GACA,MAAMgD,EAAmBtO,EACvBsL,EAAUjK,OAAOtB,QAEnB,OAAKuO,EAGE,CACLvO,OAAQuO,EAAiBzO,KAAKkP,GACf,iBAANA,EAAiBL,GAAmBpD,EAAUnI,OAAS4L,GAAKA,KAJ9DzD,EAAUnI,OAAQ8L,OAO7B,CAEA,SAASC,GACP5D,GAEA,MAA0B,YAAnBA,EAAU9O,IACnB,CAEO,SAAS+P,GACdjB,GAEA,MAAMG,EAAS0D,GAAqB7D,GACpC,IAAK,MAAM8D,KAAgB3D,EACzB,IAAK,MAAM4D,KAAY1D,GAAmByD,EAAc9D,GACtDG,EAAO9F,IAAI0J,GAGf,OAAO5D,CACT,CAEO,SAAS0D,GAAqB7D,GACnC,MAAMnG,EAAM,IAAI5C,IAkBhB,OAhBA,SAAS+M,EAAKC,GACZ,IAAIpK,EAAIkH,IAAIkD,GAIZ,GADApK,EAAIQ,IAAI4J,GACmB,aAAvBA,EAAc/S,KAChB8S,EAAKC,EAAcN,QAAQlP,OAAO,SAC7B,GAA2B,aAAvBwP,EAAc/S,KACvB,IAAK,MAAMgK,KAAS+E,EAAYgE,GAC9BD,EAAK9I,EAGX,CAEA8I,CAAKhE,GAEEnG,CACT,CAIO,SAASqK,GACdlE,EACAmE,GAEA,GAAIpF,GAAUoF,GACZ,OAAOnE,EAAU1K,QAAQQ,iBAAiBqO,GAE5C,IAAKnE,EAAUG,OACb,MAAM,IAAIhG,MACP,mCAAkCgK,YAAmBnE,EAAUhP,+BAGpE,MAAM8B,EAASkN,EAAUG,OAAOgE,GAChC,IAAKrR,EACH,MAAM,IAAIqH,MACP,gBAAegK,yBAAgCnE,EAAUhP,OAG9D,OAAO8B,CACT,CAOO,SAASsQ,GACdpD,EACAzM,GAEA,GAAyB,iBAAdA,GAA0BwL,GAAUxL,GAC7C,IACE,OAAOyM,EAAU1K,QAAQQ,iBAAiBvC,EAC3C,CAAC,MAAO6Q,GAEP,CAGJ,MAAMC,EAAiB1R,EAAYY,GAAWwF,QAC9C,IAAIuL,EAAiCtE,EACrC,KAAOqE,EAAepR,QAAQ,CAC5B,MAAMP,EAAM2R,EAAexI,QAC3B,IAAKnJ,EAAIO,OACP,MAEFqR,EAAmBJ,GAAaI,EAAkB5R,EACpD,CACA,OAAO4R,CACT,CAOO,SAASC,GAGdvE,EAAyB5M,GACzB,GAA0B,iBAAfA,EACT,MAAO,CAAC4M,EAAWA,EAAUG,OAAO/M,IAGtC,MAAMoR,EAAiBjS,OAAOC,KAAKY,GAC7BiO,EAAuCmD,EAC1CjQ,KAAKkQ,GAAgBP,GAAalE,EAAWyE,KAC7CrE,OAAOsE,SAEV,MAAO,CAAC1E,EAAU1K,QAAQqP,KAAM3E,GAAW4E,OACzCvD,EACAmD,EAAeK,QAAO,CAACC,EAAkBL,KACvC,MAAMM,EAAeb,GAAalE,EAAWyE,GAC7C,IAAKM,EACH,OAAOD,EAET,MAAME,EAAgBT,GACpBQ,EACA3R,EAAWqR,IAGb,OAAOK,EAAiBF,OAAOI,EAAc,GAC5C,IAEP,CAmFO,SAASC,GAIdjF,EACA5M,EACAsG,EACA/J,GAGA,MAA0B,iBAAfyD,EA3FN,SAIL4M,EACA5M,EACAsG,EACA/J,GAEA,MACMF,EADiByU,GAAalE,EAAW5M,GACnB3D,KAAKiK,EAAU/J,GAE3C,OAAKF,GAASA,EAAKwD,OAIZxD,EAHEuQ,EAAUvQ,KAAKiK,EAAU/J,EAIpC,CA2EWuV,CAAqBlF,EAAW5M,EAAYsG,EAAU/J,GAIxB,IAAnC4C,OAAOC,KAAKY,GAAYH,OA7EvB,SAIL+M,EACA5M,EACAsG,EACA/J,GAEA,MAAMwV,EAAe5S,OAAOC,KAAKY,GAG3B3D,EAAOwV,GADUf,GAAalE,EAAWmF,EAAa,IAG1D/R,EAAW+R,EAAa,IACxBzL,EACA/J,GAGF,OAAKF,GAASA,EAAKwD,OAIZxD,EAHEuQ,EAAUvQ,KAAKiK,EAAU/J,EAIpC,CAsDWyV,CAAuBpF,EAAW5M,EAAYsG,EAAU/J,GApD5D,SAILqQ,EACA5M,EACAsG,EACA/J,GAEA,MAAM0V,EAAqE,GAE3E,IAAK,MAAMZ,KAAelS,OAAOC,KAAKY,GAAa,CACjD,MAAMkS,EAAgBlS,EAAWqR,GAEjC,IAAKa,EACH,SAGF,MACMC,EAAmBN,GADJf,GAAalE,EAAWyE,GAG3Ca,EACA5L,EACA/J,GAEE4V,GACFF,EAAoBlS,QAAQoS,EAEhC,CACA,OAAKF,EAAoBpS,OAIlBoS,EAHErF,EAAUvQ,KAAKiK,EAAU/J,EAIpC,CAsBS6V,CAAuBxF,EAAW5M,EAAYsG,EAAU/J,EACjE,CAEA,SAAS8V,GAAgBzF,GACvB,OAAOzN,OAAOC,KAAKwN,EAAUG,QAC1B5L,KAAK7B,GAAQsN,EAAUG,OAAOzN,KAC9B0N,QAAQlB,GAAmB,YAAZA,EAAGhO,MACvB,CAEA,SAASwU,GACPpE,EACAqE,GAEA,IAAInS,EAAS8N,EACb,KAAO9N,EAAOqE,QAAUrE,EAAOqE,SAAW8N,GACxCnS,EAASA,EAAOqE,OAGlB,OAAOrE,EAAOqE,SAAW8N,CAC3B,CAcA,SAASC,GAAmBC,EAAiBC,GAC3C,MAAMC,EAAO,IAAI9O,IAAI4O,GACfG,EAAO,IAAI/O,IAAI6O,GAErB,IAAK,MAAMG,KAAQF,EACjB,GAAIC,EAAKjF,IAAIkF,GACX,OAAO,EAGX,IAAK,MAAMA,KAAQD,EACjB,GAAID,EAAKhF,IAAIkF,GACX,OAAO,EAGX,OAAO,CACT,CAEO,SAASC,GACdC,EACAzE,EACA0E,GAEA,MAAMC,EAAsB,IAAIpP,IAEhC,IAAK,MAAMqP,KAAMH,EAAoB,CACnC,IAAII,GAAc,EAClB,MAAMC,EAAsB,IAAIvP,IAChC,IAAK,MAAMwP,KAAMJ,EACf,GACET,GACEc,GAAe,CAACJ,GAAK5E,EAAc0E,GACnCM,GAAe,CAACD,GAAK/E,EAAc0E,IAErC,CACA,IAAIV,GAAaY,EAAG5N,OAAQ+N,EAAG/N,QAExB,CACL6N,GAAc,EACd,KACF,CAJEC,EAAoBnM,IAAIoM,EAK5B,CAEF,IAAKF,EAAa,CAChB,IAAK,MAAMI,KAAMH,EACfH,EAAoBtM,OAAO4M,GAE7BN,EAAoBhM,IAAIiM,EAC1B,CACF,CAEA,OAAOlS,MAAMwS,KAAKP,EACpB,CAaA,SAASQ,GACPhK,EACAuJ,GAEA,IAAKvJ,EAAWpI,OACd,MAAO,GAGT,MAAMyO,EAAU,IAAIjM,IAEpB,IAAK,MAAM6P,KAAcjK,EAAWpI,OAClC,GAAImP,GAAckD,GAChB,GAAIV,EAAaU,EAAW9V,IAC1B,IAAK,MAAM+V,KAAQX,EAAaU,EAAW9V,IACzCkS,EAAQ7I,IAAI0M,QAGd,IAAK,MAAMA,KAAQF,GACjBnD,GAAgCoD,GAChCV,GAEAlD,EAAQ7I,IAAI0M,QAIhB7D,EAAQ7I,IAAIyM,GAIhB,MAAO,IAAI5D,EACb,CAEA,SAAS8D,GACPnK,EACAuJ,GAEA,MAAMa,EAAeJ,GAAyBhK,EAAYuJ,GAE1D,IAAKa,EACH,OAGF,IACGpK,EAAWoG,SACZgE,EAAaxU,OACVgC,GACCA,IAAWoI,EAAWnE,QAAUgN,GAAajR,EAAQoI,EAAWnE,UAGpE,OAAOmE,EAAWnE,OAGpB,MAAMwO,EA/DR,SACExG,GAEA,MAAOyG,KAASC,GAAQ1G,EACxB,IAAK,MAAMqD,KAAY1D,GAAmB8G,OAAMnT,GAC9C,GAAIoT,EAAK3U,OAAOyM,GAAOwG,GAAaxG,EAAI6E,KACtC,OAAOA,CAGb,CAsDcsD,CAAwBJ,EAAarC,OAAO/H,EAAWnE,SAEnE,OAAIwO,IAKArK,EAAWoG,aAAf,EAIOpG,EAAWnE,OAAOpD,QAAQqP,KACnC,CAEA,SAAS+B,GACPY,EACA5F,EACA0E,GAEA,MAAMmB,EAAe,IAAItQ,IAEzB,IAAK,MAAMwM,KAAK6D,EACd,GAAI7D,EAAEhP,QAAQxB,OAAQ,CACpB,MAAMuU,EAASR,GAAoBvD,EAAG2C,GAElC3C,EAAER,SAAWQ,EAAE/K,SAAW8O,GAC5BD,EAAalN,IAAImN,GAGnB,IAAK,MAAMxH,KAAa0B,EAClBgE,GAAa1F,EAAWwH,IAC1BD,EAAalN,IAAI2F,EAGvB,CAGF,MAAO,IAAIuH,EACb,CAoBO,SAASE,GAIdH,EACAI,EACA5J,EACAnO,EACAgY,EACAC,GAEA,IAAKN,EAAYrU,OACf,OAAOyU,EAET,MAAMG,EAAkB,IAAI5Q,IAAIyQ,EAAgB1I,QAChD,IAAIoH,EAAesB,EAAgBtB,aAEnC,MAAMC,EAAsBH,GAC1BoB,EACAO,EACAzB,GAGF,IAAIzJ,EAAY+K,EAGXC,KACFhL,EAAWyJ,GAkZhB,SACEsB,EACA/X,EACAmO,EACAwJ,EACAO,EACAzB,EACAwB,GAEA,IAAIE,EAAeJ,EACnB,MAAMH,EAAeb,GACnBY,EACAO,EACAzB,GAKF,IAAI2B,EAFJR,EAAaS,MAAK,CAACC,EAAGC,IAAMA,EAAEC,MAAQF,EAAEE,QAKxC,IAAK,MAAMC,KAAiBb,EAC1B,IAAK,MAAMc,KAAe5C,GAAgB2C,GAAgB,CACxD,IAAIE,EAEFA,EAD0B,SAAxBD,EAAYE,QACDrJ,GACXa,EAAkBb,IAAOwG,GAAaxG,EAAIkJ,GAE/BlJ,GACJA,EAAGrH,SAAWuQ,EAGzBL,IAAmB,IAAK3B,GACxB2B,EAAeM,EAAYrX,IACzBoD,MAAMwS,KAAKiB,GAAiBzH,OAAOkI,EACvC,CAGF,IAAK,MAAMxH,KAAKyG,EACdO,EAAeU,GACbV,EACAnY,EACAmO,EACA,IAAIgD,EAAE6B,QAAS7B,EAAE9K,OAAOzB,KAAKkU,GAAQxN,EAAUwN,EAAIzX,OACnD4W,GAEFC,EAAgB9N,OAAO+G,GAEzB,MAAO,CAACgH,EAAcC,GAAkB3B,EAC1C,CAncgCsC,CAC1B/L,EACAhN,EACAmO,EACAuI,EACAwB,EACAzB,EACAwB,IAKJjL,EAAY6L,GACV7L,EACAhN,EACAmO,EACAuI,EAAoBtE,SAAS0B,GAAMA,EAAED,UACrCoE,GAIFjL,EAwEF,SACE+K,EACA/X,EACAmO,EACAuI,EACAwB,EACAD,EACAxB,EACAuB,GAEA,IAAIG,EAAeJ,EACnB,MAAMiB,EAAgB,IAAI1R,IAIpB2R,EAAwB,IAAI3R,KAmGpC,SACEqQ,EACAlB,EACAwC,EACAD,GAEA,IAAK,MAAMlF,KAAK6D,EAAa,CAC3B,MAAME,EAASR,GAAoBvD,EAAG2C,GAEtC,IAAK,MAAMtF,KAAK2C,EAAEhP,QAAU,GAEvBmP,GAAc9C,IAEd2C,EAAE/K,SAAWoI,GAGZ2C,EAAE/K,SAAW8O,IAEb/D,EAAER,UAEJ0F,EAActO,IAAIyG,GAClB8H,EAAsBvO,IAAIyG,IAE5B+H,GACE/H,EACAsF,EACAwC,EACAD,GAGJ,MAAM1B,EAAeJ,GAAyBpD,EAAG2C,GACjD,IAAK,MAAMtF,KAAKmG,EAAc,CAC5B,MAAM1G,EAAYF,GAAmBS,EAAG0G,GACnB,aAAjBA,GAAQtW,MACVqP,EAAUpN,KAAKqU,GAEjBsB,GACEH,EACAvC,EACAwC,EACArI,GACCkD,EAAE/K,OAAOb,QAAU4L,EAAER,aAAUjP,EAAYwT,EAEhD,CACF,CACF,EA/IEuB,CACE1C,EACAD,EACAwC,EACAD,GAIEhB,GACFiB,EAAsBvO,IAAIqN,EAAgBpS,QAAQqP,MAGpD,MAAMqE,EAAiB,IAAI/R,IAE3B,IAAK,MAAMgS,IAAoB,IAAIN,GAAeX,MAChD,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,QACrB,CACDN,EAAgBxN,IAAI4O,GACpB,MAAMzF,EAA2B,GAGjCA,EAAQrQ,QAAQ8V,EAAiBxG,OAEjC,IAAK,MAAMyG,KAAaD,EAAiBjT,OACvCwN,EAAQrQ,KACNsL,EAAWyK,EAAU3T,IAAK,IACrB2T,EACHpR,eAAgBoR,EAAUC,cAKhC,GAAIP,EAAsB7H,IAAIkI,GAAmB,CAC/C,MAAMG,EAAiBH,EAAiBtF,QAASH,QACjDA,EAAQrQ,QAAQiW,EAClB,CAWA,GATAtB,EAAeU,GACbV,EACAnY,EACAmO,EACA0F,EACAoE,EACAqB,EAAiBjT,OAAOzB,KAAK2U,GAAcA,EAAUlY,MAGzB,UAA1BiY,EAAiB/X,KAAkB,CACrC,MAAM2G,EAASoR,EAAiBpR,OAEhC,IAAIwR,EACe,aAAjBxR,GAAQ3G,KAAsB2G,EAASA,GAAQA,OAC7CyR,EAAqBD,GAAkBJ,EAiB3C,IAfqB,aAAjBpR,GAAQ3G,MACV0W,EAAczU,KACZpC,EACE8G,EAAQ7G,GACRiY,EAAiBhY,OACbgD,EACEgV,EAAiBhY,OACjB6W,EAAa3T,QACbxE,EACAmO,EAAWtN,WAEbwD,IAKiB,aAAzBqV,GAAgBnY,OACf8X,EAAejI,IAAIsI,IACpB5H,GAAeoG,EAAiBwB,IAEhCL,EAAe3O,IAAIgP,GACnBzB,EAAczU,KAAKpC,EAAqBsY,EAAerY,KACvDsY,EAAqBD,EACrBA,EAAiBA,EAAexR,OAElC,GAAIwR,EACF,SAGFvB,EAAevJ,GAAqBuJ,EAAc,CAChDvM,OAAQ,OACRtK,OAAQsY,GACNzB,EACAnY,EACAmO,EACAgK,EAAaxS,QAAQqP,KACrB2E,IAGN,CACF,CAEA,OAAOxB,CACT,CAxLc0B,CACV7M,EACAhN,EACAmO,EACAuI,EACAwB,EACAD,EACAxB,EACAuB,GAGF,MAAM8B,EAAiB,IAAI5B,GAEF,SAArBlL,EAAUpB,SACZoB,EAAY6L,GACV7L,EACAhN,EACAmO,EACA2L,EACGzB,MAAK,CAACC,EAAGC,IAAMA,EAAEC,MAAQF,EAAEE,QAC3BpG,SAASzG,GAAUA,EAAMqH,OAC5BiF,IAIJ,IACE,OACExB,IAAiBsB,EAAgBtB,cA7FvC,SACEsD,EACAC,GAEA,GAAID,EAAezW,SAAW0W,EAAiB3M,KAC7C,OAAO,EAET,IAAK,MAAM+J,KAAQ2C,EACjB,IAAKC,EAAiB5I,IAAIgG,GACxB,OAAO,EAGX,OAAO,CACT,CAiFM6C,CAA6BlC,EAAgB1I,OAAQ6I,GAE9ClL,EAEF4B,GAAqB5B,EAAW,CACrCqC,OAAQyK,EACRrD,gBAEH,CAAC,MAAOhC,GAGP,MAAMA,CACR,CACF,CAEA,SAASmF,GACP7P,EACA/J,EACAmO,EACA0D,EACA8H,GAEA,IAAK9H,EAASvQ,OACZ,OAEF,MAAM4Y,EAAiB9Y,EACrBuY,EAAmBtY,GACnBsY,EAAmBrY,QAAUqY,EAAmBzR,OAC5C5D,EACEqV,EAAmBrY,OACnByI,EAASvF,QACTxE,EACAmO,EAAWtN,WAEbwD,GAEN,OAAOC,EACLuN,EAASvQ,OACTyI,EAASvF,QACT0V,EACA/L,EAAWtN,KAEf,CAmKA,SAASqY,GAIP7I,EACAoG,EACAwC,EACAD,GAEA,GAAI/E,GAAc5D,GAChB,GAAIoG,EAAapG,EAAUhP,IAAK,CAC9B,MAAM8Y,EAAoB1D,EAAapG,EAAUhP,IACjD,IAAK,MAAM8P,KAAKgJ,EACdnB,EAActO,IAAIyG,GAElB+H,GACE/H,EACAsF,EACAwC,EACAD,GAGJ,IAAK,MAAM7H,KAAKgJ,EACdC,GACEjJ,EACAd,EAAUnI,OACV8Q,EACAvC,EACAwC,EAGN,KAAO,CACL,MAAMoB,EAA2BtG,GAG/B1D,GACF,IAAK,MAAMc,KAAKkJ,EAAyBvV,OACvCkU,EAActO,IAAIyG,GAEdkJ,IAA6BhK,EAAUnI,QAAQ8L,SACjDiF,EAAsBvO,IAAI2F,EAAUnI,QAGtCgR,GACE/H,EACAsF,EACAwC,EACAD,GAIJ,IAAK,MAAM7H,KAAKkJ,EAAyBvV,OACvCsV,GACEjJ,EACAd,EAAUnI,OACV8Q,EACAvC,EACAwC,EAGN,MAEA,GAAuB,aAAnB5I,EAAU9O,KAAqB,CACjC,MAAO4S,GAAgB9D,EAAU2D,QAAQlP,OAEpCmP,GAAcE,KACjB6E,EAActO,IAAIyJ,GAClB8E,EAAsBvO,IAAIyJ,IAE5B+E,GACE/E,EACAsC,EACAwC,EACAD,GAGFoB,GACEjG,EACA9D,EACA2I,EACAvC,EACAwC,EAEJ,MACE,GAAuB,aAAnB5I,EAAU9O,KACZ,IAAK,MAAMgK,KAAS+E,EAAYD,GAAWI,QACxClB,IAAQ0E,GAAc1E,KAElB,IAAIyJ,GAAe1J,MAAM6B,GAAM4E,GAAa5E,EAAG5F,OAC7C0I,GAAc1I,KACjByN,EAActO,IAAIa,GAClB0N,EAAsBvO,IAAIa,IAE5B2N,GACE3N,EACAkL,EACAwC,EACAD,GAOd,CAEA,SAASG,GACPH,EACAvC,EACAwC,EACArI,EACA0J,GAEA,IAAK,MAAMC,KAAO3J,EAIhB,GAHK0J,IAAoBvE,GAAawE,EAAKD,IACzCtB,EAActO,IAAI6P,GAEH,aAAbA,EAAIhZ,KACN,IAAK,MAAMgK,KAAS+E,EAAYiK,GAAK9J,QAAQlB,IAAQ0E,GAAc1E,KAC5D,IAAIyJ,GAAe1J,MAAM6B,GAAM4E,GAAa5E,EAAG5F,OAClDyN,EAActO,IAAIa,GAClB2N,GACE3N,EACAkL,EACAwC,EACAD,GAMZ,CAEA,SAASoB,GACP/J,EACAM,EACAqI,EACAvC,EACAwC,GAEAE,GACEH,EACAvC,EACAwC,EACAvI,GAAmBL,EAAWM,GAElC,CA2EA,SAAS6J,GACPzC,EACA/X,EACAmO,EACA0F,EACA4G,EAIAC,GAEA,MAAM/U,QAAEA,GAAYoS,EACpB,IAAI4C,EAAuB5C,EAE3B,IAAK,MAAM6C,KAAU/G,EAAS,CAC5B,MAAM9D,EAA6B,mBAAX6K,EAClBC,EAAiB9K,EACnB6K,EAKEjV,EAAQG,gBAAgB+N,QAaN,iBAAX+G,EAAsBA,EAASA,EAAOrZ,MAEnD,IAAKsZ,EACH,SAGF,MAAM9M,EAAa,CACjBvJ,QAASmW,EAAqBnW,QAC9BxE,QACAa,KAAMsN,EAAWtN,KACjBiH,OAAQqG,EAAWrG,QAGfkG,EACJ+B,GAA8B,iBAAX6K,OACfvW,EACA,WAAYuW,EACe,mBAAlBA,EAAOtM,OACZsM,EAAOtM,OAAO,CAAE9J,QAASmW,EAAqBnW,QAASxE,UACvD4a,EAAOtM,YACTjK,EAER,KAAM,YAAawW,GAAiB,CAC9B1M,EAAWtN,KAAK0G,oBAAsBhB,EAAiBsG,QACzDgO,EAAe9M,EAAYC,GAE3BG,EAAW9C,OAAM,KACfwP,EAAe9M,EAAYC,EAAa,IAG5C,QACF,CAEA,MAAM8M,EAAgBD,GAEf7N,EAAWsB,EAAQuF,GAAWiH,EAAcvM,QACjDJ,EACAwM,EACA5M,EACAC,EACA6M,EACAJ,GAEFE,EAAuB3N,EAEnB,iBAAkB8N,GACpBJ,GAASlX,KAAK,CAACsX,EAAexM,IAG5B,YAAawM,IACX3M,EAAWtN,KAAK0G,oBAAsBhB,EAAiBsG,QACzDiO,EAActM,QAAQL,EAAYG,GAElCH,EAAW9C,MAAMyP,EAActM,QAAQnJ,KAAK,KAAM8I,EAAYG,KAI9DuF,IACF8G,EAAuBH,GACrBG,EACA3a,EACAmO,EACA0F,EACA4G,EACAC,GAGN,CAEA,OAAOC,CACT,CAEO,SAAS9B,GACdd,EACA/X,EACAmO,EACA0F,EACAoE,EACA8C,GAEA,MAAML,EACJK,EAAmB,QAAK1W,EACpB2I,EAAYwN,GAChBzC,EACA/X,EACAmO,EACA0F,EACA,CAAEoE,gBAAe8C,oBACjBL,GAKF,OAHAA,GAAS5P,SAAQ,EAAEgQ,EAAexM,MAChCwM,EAAcE,aAAa7M,EAAYnB,EAAWsB,EAAO,IAEpDtB,CACT,CAEO,SAASiO,GACdlR,EACA/J,EACAmO,EACA8J,EAAkC,IASlC,IAAIE,EAAepO,EACnB,MAAMyG,EAA+B,GAGrC,GAAIxQ,EAAMuB,OAASd,EASjB,OARA0X,EAAevJ,GACbsM,GAAa/C,EAAcnY,EAAOmO,GAClC,CACEvC,OAAQ,YAGZ4E,EAAOhN,KAAK2U,GAEL,CACLpO,SAAUoO,EACVgD,YAAa3K,GAIjB,IAAI4K,EAAYpb,EAIhB,GAAIob,EAAU7Z,OAAShB,EAAa,CAClC,MAAM8a,EAAeD,EACfE,EN54CH,SACLtb,GAEA,OAAOA,EAAMuB,KAAKga,WAAW,qBAC/B,CMw4CkBC,CAAkBH,GAE1B1D,EAAc8D,GAAkBJ,EAAclD,GAEpD,GAAImD,IAAU3D,EAAYrU,OASxB,OALA6U,EAAevJ,GAAsC7E,EAAU,CAC7D6B,OAAQ,QACRnK,MAAO4Z,EAAa5Z,QAEtB+O,EAAOhN,KAAK2U,GACL,CACLpO,SAAUoO,EACVgD,YAAa3K,GAGjB2H,EAAeL,GACbH,EACA5N,EACAoE,EACAiN,GACA,EACAnD,GAEFzH,EAAOhN,KAAK2U,EACd,CAEA,IAAIuD,GAAmC,EAEvC,KAA+B,WAAxBvD,EAAavM,QAAqB,CACvC,IAAI4K,EACFkF,EACIC,GAA2BxD,EAAciD,GACzC,GAIN,MAAMQ,EAAgBpF,EAAmBlT,OAAS6U,OAAe9T,EAEjE,IAAKmS,EAAmBlT,OAAQ,CAC9B,IAAK2U,EAAc3U,OACjB,MAEF8X,EAAYnD,EAAc/L,QAC1BsK,EAAqBiF,GAAkBL,EAAWjD,EACpD,CAEAA,EAAeL,GACbtB,EACA2B,EACAhK,EACAiN,GACA,EACAnD,GAEFyD,EAAmCvD,IAAiByD,EACpDpL,EAAOhN,KAAK2U,EACd,CAMA,MAJ4B,WAAxBA,EAAavM,QACfsP,GAAa/C,EAAciD,EAAWjN,GAGjC,CACLpE,SAAUoO,EACVgD,YAAa3K,EAEjB,CAEA,SAAS0K,GACPlO,EACAhN,EACAmO,GAEA,OAAO0K,GACL7L,EACAhN,EACAmO,EACAvL,OAAO2N,OAAOvD,EAAUzE,UAAU3D,KAAK2G,GAAeD,EAAUC,KAChE,GAEJ,CAEA,SAASkQ,GACPzb,EACAgN,GAEA,OAAOA,EAAUrH,QAAQkW,kBAAkB7O,EAAkBhN,EAC/D,CAEA,SAAS2b,GACP3O,EACAhN,GAEA,MAAM8b,EAAqD,IAAIxU,IACzDyU,EAAe/O,EAAUqC,OAAOoB,OAAOL,GAE7C,IAAK,MAAMC,KAAa0L,EACtBC,EAAM,IAAK,MAAM7K,IAAK,CAACd,GAAW4E,OAChCvE,GAAmBL,OAAWhM,IAE9B,GAAK8M,EAAE8K,OAGP,IAAK,MAAM/O,KAAciE,EAAE8K,OACzB,QACuB5X,IAArB6I,EAAW2C,OACXF,EAAczC,EAAW2C,MAAO7C,EAAUxI,QAASxE,EAAOgN,GAC1D,CACA8O,EAAqBpR,IAAIwC,GACzB,MAAM8O,CACR,CAKN,OAAOzF,GACL9R,MAAMwS,KAAK6E,GACX,IAAIxU,IAAI0F,EAAUqC,QAClBrC,EAAUyJ,aAEd,CCxrDO,SAAS/S,GAGdxD,GACA,QACIA,GACe,iBAAVA,GACP,YAAaA,GACb,UAAWA,CAEf,CAiQA,MAAMgc,GAAyB,SAE7BC,GAEA,OAAO7Z,EAAa6Z,EAAW5c,KAAKW,MACtC,EAEMkc,GAAwB,SAE5BC,GAEA,OAAO9c,KAAK+c,KAAKlL,IAAIiL,EACvB,EAEME,GAAqB,SAEzBvc,GAQA,MAAMwc,EAAiBjd,KAAKoG,QAAQkW,kBAAkBtc,KAAMS,GAE5D,QACIwc,GAAgBlZ,QAElBkZ,EAAelN,MAAMwE,QAAmBzP,IAAbyP,EAAEhP,QAAwBgP,EAAED,QAAQvQ,QAEnE,EAEMmZ,GAAwB,WAC5B,MACEpN,OAAQqN,EAAKJ,KACbA,EAAI3W,QACJA,EAAOgX,QACPA,EAAOnP,OACPA,EAAMoP,IACNA,EAAGC,OACHA,EAAMrN,QACNA,KACGsN,GACDvd,KACJ,MAAO,IAAKud,EAAYR,KAAM7X,MAAMwS,KAAKqF,GAC3C,EAEMS,GAAyB,WAC7B,OAAOxd,KAAK8P,OAAO6F,QACjB,CAAC8H,EAAK3M,UACmBhM,IAAnBgM,EAAU4M,OACZD,EAAI3M,EAAUhP,IAAMgP,EAAU4M,MAEzBD,IAET,CACF,EACF,EAEO,SAASE,GAOd9W,EACAT,GAEA,MAAO,CACLiG,OAAQxF,EAAOwF,OACftK,OAAQ8E,EAAO9E,OACfG,MAAO2E,EAAO3E,MACdkE,UACAnB,QAAS4B,EAAO5B,QAChB6K,OAAQjJ,EAAOiJ,OACfnP,MAAO0R,GAAcjM,EAAQqP,KAAM5O,EAAOiJ,QAC1CiN,KAAM,IAAIhV,IAAIlB,EAAOiJ,OAAO+C,SAAS7C,GAAOA,EAAG+M,QAC/C/T,SAAUnC,EAAOmC,SACjBkO,aAAcrQ,EAAOqQ,cAAgB,CAAE,EACvCjH,QAAS0M,GACTW,OAAQT,GACRQ,IAAKL,GACLI,QAASI,GACTvP,OAAQiP,GAEZ,CAEO,SAAS7N,GACd7E,EACA3D,EAAyC,IAEzC,OAAO8W,GACL,IAAKnT,KAAa3D,GAClB2D,EAASpE,QAEb,CA8DA,SAASwX,GAAeC,GACtB,IAAIC,EACJ,IAAK,MAAMta,KAAOqa,EAAa,CAC7B,MAAMld,EAAQkd,EAAYra,GAC1B,GAAI7C,GAA0B,iBAAVA,EAClB,GAAI,cAAeA,GAAS,SAAUA,GAAS,QAASA,EACtDmd,IAAS5Y,MAAMvB,QAAQka,GAClBA,EAAYhU,QACb,IAAKgU,GACTC,EAAKta,GAAO,CACV0K,aAAcnH,EACdjF,GAAKnB,EAA6BmB,QAE/B,CACL,MAAM8B,EAASga,GAAejd,GAC1BiD,IAAWjD,IACbmd,IAAS5Y,MAAMvB,QAAQka,GAClBA,EAAYhU,QACb,IAAKgU,GACTC,EAAKta,GAAOI,EAEhB,CAEJ,CACA,OAAOka,GAAQD,CACjB,CCxaO,SAASE,GACdnP,GACAxI,QAAEA,EAAOnB,QAAEA,GACXxE,EACAud,GA6CA,MAAO,CAAC3X,EAAKsB,KACX,MAAM/E,EA5CoBqb,EAAC5X,EAAKsB,EAAU,CAAA,KAC1C,MAAMkB,SAAEA,EAAQzG,MAAEA,GAAUuF,EAC5B,GAAmB,iBAARtB,EAAkB,CAC3B,MAAMqB,EAAQvB,EAAuBC,EAASC,GAE9C,IAAKqB,EACH,MAAM,IAAIuD,MACP,gBAAe5E,kCAAoCD,EAAQtE,OAIhE,MAAMc,EAAWwL,EAAY1G,EAAO,CAClC5F,GAAI6F,EAAQ7F,GACZ6G,OAAQiG,EAAWtN,KACnBsH,aAAcjB,EAAQiB,aACtBxG,MACmB,mBAAVA,EACHA,EAAM,CACJ6C,UACAxE,QACAa,KAAMsN,EAAWtN,OAEnBc,EACNiE,MACAwC,aAKF,OAFAmV,EAAgBpb,EAASd,IAAMc,EAExBA,CACT,CAUE,OATiBwL,EAAY/H,EAAK,CAChCvE,GAAI6F,EAAQ7F,GACZ6G,OAAQiG,EAAWtN,KACnBsH,aAAcjB,EAAQiB,aACtBxG,MAAOuF,EAAQvF,MACfiE,MACAwC,YAIJ,EAGiBoV,CAAM5X,EAAKsB,GAQ5B,OAPAqW,EAAgBpb,EAASd,IAAMc,EAC/BgM,EAAW9C,OAAM,KACXlJ,EAASoF,oBAAsBhB,EAAiBoG,SAGpDxK,EAASxC,OAAO,IAEXwC,CAAQ,CAEnB,CC/FA,SAASsb,GACPtP,EACApE,EACAgE,EACAC,GACA0P,WACEA,IAOF,IAAK3T,EAASvF,QACZ,MAAM,IAAIgG,MACR,iGAGJ,MAAM+S,EAA+C,CAAA,EAE/CI,EAA6C,CACjDnZ,QAASuF,EAASvF,QAClBxE,MAAO+N,EAAW/N,MAClBwd,MAAOF,GACLnP,EACApE,EACAgE,EAAW/N,MACXud,GAEF1c,KAAMsN,EAAWtN,KACjBiH,OAAQqG,EAAWrG,QAErB,IAAI8V,EAAyC,CAAA,EAC7C,GAA0B,mBAAfF,EACTE,EAAgBF,EAAWC,EAAY3P,QAEvC,IAAK,MAAMjL,KAAOH,OAAOC,KAAK6a,GAAa,CACzC,MAAMG,EAAiBH,EAAW3a,GAClC6a,EAAc7a,GACc,mBAAnB8a,EACHA,EAAeF,EAAY3P,GAC3B6P,CACR,CAKF,MAAO,CACLjP,GAAqB7E,EAAU,CAC7BvF,QAJmB5B,OAAOkb,OAAO,CAAE,EAAE/T,EAASvF,QAASoZ,GAKvDrV,SAAU3F,OAAOC,KAAK0a,GAAiBja,OACnC,IACKyG,EAASxB,YACTgV,GAELxT,EAASxB,WAGnB,CA6CO,SAASuV,GASdJ,GAUA,SAASI,EACPzP,EACAC,GAKF,CAOA,OALAwP,EAAOvc,KAAO,gBACduc,EAAOJ,WAAaA,EAEpBI,EAAOvP,QAAUkP,GAEVK,CACT,CCpJA,SAASC,GACPjQ,EACA/D,EACAsE,EACAL,GAEEhO,MAAOge,EAAW3c,GAClBA,EAAE2H,MACFA,IAuBFiP,cAAEA,IAEF,MAAMgG,EAAYlU,EAASpE,QAAQG,gBAAgBoY,OAEnD,GAA2B,iBAAhBF,EACT,MAAM,IAAIxT,MACP,iEAAgEwT,iBAGrE,MAAMG,EACmB,mBAAhBH,EACHA,EAAY3P,EAAML,GAClBgQ,EAEN,IAAIzL,EACJ,GAAqB,iBAAVvJ,EAAoB,CAC7B,MAAMoV,EAAcH,GAAaA,EAAUjV,GAC3CuJ,EACyB,mBAAhB6L,EACHA,EAAY/P,EAAML,GAClBoQ,CACR,MACE7L,EACmB,mBAAVvJ,EAAuBA,EAAMqF,EAAML,GAAgBhF,EAK9D,MAH6B,iBAAlBuJ,GACT0F,EAAczU,KAAK2a,GAEd,CAACpU,EAAU,CAAE/J,MAAOme,EAAe9c,KAAI2H,MAAOuJ,GACvD,CAEA,SAAS8L,GACPlQ,EACAG,GAMA,MAAMtO,MAAEA,EAAKgJ,MAAEA,EAAK3H,GAAEA,GAAOiN,EACR,iBAAVtF,GACTmF,EAAW9C,OAAM,KACf,MAAMxK,EAAOsN,EAAWtN,KACxBsN,EAAWrG,OAAOe,UAAUC,SAASjI,EAAMA,EAAMb,EAAOgJ,EAAO3H,EAAG,GAIxE,CAoBO,SAAS0R,GASdiL,EAGA9W,GAQA,SAAS6L,EACP1E,EACAC,GAKF,CAUA,OARAyE,EAAMxR,KAAO,eACbwR,EAAM/S,MAAQge,EACdjL,EAAM1R,GAAK6F,GAAS7F,GACpB0R,EAAM/J,MAAQ9B,GAAS8B,MAEvB+J,EAAMxE,QAAUwP,GAChBhL,EAAMvE,QAAU6P,GAETtL,CACT,CCq0CYuL,IAAAA,YAAAA,GAAc,OAAdA,EAAc,OAAA,WAAdA,EAAc,SAAA,aAAdA,CAAc,EAAA,ICr8C1B,SAASC,GACPpQ,EACApE,EACAsE,EACAL,GACAwQ,GACEA,EACAxe,MAAOge,EAAW3c,GAClBA,EAAE2H,MACFA,GA8BFyR,GAEA,MAAMwD,EAAYlU,EAASpE,QAAQG,gBAAgBoY,OAEnD,GAA2B,iBAAhBF,EACT,MAAM,IAAIxT,MACP,mEAAkEwT,iBAGvE,MAAMG,EACmB,mBAAhBH,EACHA,EAAY3P,EAAML,GAClBgQ,EAEN,IAAIzL,EACJ,GAAqB,iBAAVvJ,EAAoB,CAC7B,MAAMoV,EAAcH,GAAaA,EAAUjV,GAC3CuJ,EACyB,mBAAhB6L,EACHA,EAAY/P,EAAML,GAClBoQ,CACR,MACE7L,EACmB,mBAAVvJ,EAAuBA,EAAMqF,EAAML,GAAgBhF,EAG9D,MAAM0K,EAA+B,mBAAP8K,EAAoBA,EAAGnQ,EAAML,GAAgBwQ,EAC3E,IAAIC,EAEJ,GAA8B,iBAAnB/K,GAcT,GAZE+K,EADE/K,IAAmB4K,GAAeI,OACnBvQ,EAAWtN,KAAK4G,QACxBiM,IAAmB4K,GAAeK,SAC1BxQ,EAAWtN,KACnB6S,EAAe6H,WAAW,MAGlBxR,EAASxB,SAASmL,EAAetK,MAAM,IAEvCqR,EAAMM,kBAAkB6D,SAASlL,GAC9CA,EACA3J,EAASxB,SAASmL,IAEnB+K,EACH,MAAM,IAAIjU,MACP,kCAAiCkJ,oBAAiC3J,EAASpE,QAAQtE,aAIxFod,EAAiB/K,GAAkBvF,EAAWtN,KAGhD,MAAO,CACLkJ,EACA,CAAEyU,GAAIC,EAAgBze,MAAOme,EAAe9c,KAAI2H,MAAOuJ,GAE3D,CAEA,SAASsM,GACP/Q,EACA/D,EACAuE,GAOyB,iBAAdA,EAAOkQ,KAChBlQ,EAAOkQ,GAAKzU,EAASxB,SAAS+F,EAAOkQ,IAEzC,CAEA,SAASM,GACP3Q,EACAG,GASAH,EAAW9C,OAAM,KACf,MAAMmT,GAAEA,EAAExe,MAAEA,EAAKgJ,MAAEA,EAAK3H,GAAEA,GAAOiN,EACZ,iBAAVtF,EAUXmF,EAAWrG,OAAO8B,OAChBuE,EAAWtN,KAGX2d,EACAxe,EAAMuB,OAASf,EACXgB,EAAsB2M,EAAWtN,KAAKQ,GAAKrB,EAAc+e,MACzD/e,GAhBJmO,EAAWrG,OAAOe,UAAUC,SAC1BqF,EAAWtN,KACX2d,EACAxe,EACAgJ,EACA3H,EAYH,GAEL,CAsBO,SAAS2d,GAQdR,EAOAR,EASA9W,GAQA,SAAS8X,EACP3Q,EACAC,GAKF,CAYA,OAVA0Q,EAAOzd,KAAO,mBACdyd,EAAOR,GAAKA,EACZQ,EAAOhf,MAAQge,EACfgB,EAAO3d,GAAK6F,GAAS7F,GACrB2d,EAAOhW,MAAQ9B,GAAS8B,MAExBgW,EAAOzQ,QAAUgQ,GACjBS,EAAOhE,aAAe6D,GACtBG,EAAOxQ,QAAUsQ,GAEVE,CACT,CClKA,SAASC,GACP9Q,EACApE,EACAsE,EACAK,GACAwQ,QACEA,IAaF,MAAMrL,EAAiB,GACjB9T,EAAoD,SACxD6a,GAEA/G,EAAQrQ,KAAKoX,IA+Bf,OA7BA7a,EAAQ+d,OAAS,IAAIzP,KACnBwF,EAAQrQ,KAAKsa,MAAUzP,GAAM,EAE/BtO,EAAQ8J,OAAS,IAAIwE,KACnBwF,EAAQrQ,KAAKqG,KAAUwE,GAAM,EAE/BtO,EAAQgT,MAAQ,IAAI1E,KAClBwF,EAAQrQ,KAAKuP,MAAS1E,GAAM,EAE9BtO,EAAQif,OAAS,IAAI3Q,KACnBwF,EAAQrQ,KAAKwb,MAAU3Q,GAAM,EAE/BtO,EAAQ+O,WAAa,IAAIT,KACvBwF,EAAQrQ,KAAKsL,KAAcT,GAAM,EAEnCtO,EAAQuL,UAAY,IAAI+C,KACtBwF,EAAQrQ,KAAK8H,KAAa+C,GAAM,EAGlC6Q,EAAQ,CACN1a,QAAS6J,EAAK7J,QACdxE,MAAOqO,EAAKrO,MACZD,UACAoQ,MAAQN,GACNF,EAAcE,EAAO9F,EAASvF,QAAS6J,EAAKrO,MAAO+J,GACrDlJ,KAAMsN,EAAWtN,KACjBiH,OAAQqG,EAAWrG,SAGd,CAACiC,OAAU1F,EAAWwP,EAC/B,CCtHA,SAASsL,GACPrR,EACA/D,EACAgE,EACAC,GACA9N,MACEA,EAAKkf,MACLA,IAMF,MAAO,CACLrV,EACA,CACE7J,MACmB,mBAAVA,EAAuBA,EAAM6N,EAAYC,GAAgB9N,EAClEkf,SAGN,CAEA,SAASC,IACPxY,OAAEA,IACF3G,MAAEA,EAAKkf,MAAEA,IAELA,EACFvY,EAAOuY,EAAOlf,GAEd2G,EAAO3G,EAEX,CCmCO,SAASof,GAMdpS,EAKAqS,GAUA,MAAO,CACLnZ,OAAQ8G,EACRA,WAAYA,CAACnD,EAAU/J,EAAOmO,KACrB,IACFpE,EACHvF,QAAS0I,EACPnD,EAASvF,QACTxE,EACAmO,KAINpC,mBAAoBA,CAAC+B,EAAGnM,KACf,CACLiK,OAAQ,SACRtK,YAAQ+C,EACR5C,WAAO4C,EACPG,QAC4B,mBAAnB+a,EACFA,EAAuB,CAAE5d,UAC1B4d,IAGV7R,qBAAuB3D,GAAaA,EACpC+B,gBAAkB/B,GAAkBA,EAExC,CCnHA,MAAMyV,GAAiC,IAAI7W,QCL3C,MAAM8W,GAAyB,yBACzBC,GAA0B,0BAC1BC,GAA6B,6BCDnC,MAAMC,GAAyB,yBACzBC,GAAwB,wBCW9B,MAAMC,GAAaR,IAAgBxR,IAAe,QAAEzJ,GCzBpD,MAAM0b,GAAQ,IAAIpX,QAEX,SAASqX,GAAQC,EAAald,EAAa2D,GAChD,IAAIwZ,EAAeH,GAAM1V,IAAI4V,GAS7B,OAPKC,EAGQnd,KAAOmd,IAClBA,EAAand,GAAO2D,MAHpBwZ,EAAe,CAAEnd,CAACA,GAAM2D,KACxBqZ,GAAM7V,IAAI+V,EAAQC,IAKbA,EAAand,EACtB,CC4BA,MAAMod,GAAe,CAAA,EAEfC,GAAwBxF,GACN,iBAAXA,EACF,CAAErZ,KAAMqZ,GAEK,mBAAXA,EACL,YAAaA,EACR,CAAErZ,KAAOqZ,EAAerZ,MAE1B,CACLA,KAAMqZ,EAAOyF,MAGVzF,EAYF,MAAM0F,GAuFXjhB,YAIS+G,EAUPc,GAoCA,GAnCA3H,KAXO6G,OAAAA,EAvFT7G,KAGOwD,SAAG,EACVxD,KAGO8B,QAAE,EACT9B,KASOgC,UAAI,EACXhC,KAGOghB,UAAI,EACXhhB,KAGOiR,YAAM,EACbjR,KAMOqZ,aAAO,EACdrZ,KAGOuT,WAAK,EACZvT,KAGOyT,UAAI,EACXzT,KAGO2I,YAAM,EACb3I,KAGOoG,aAAO,EAadpG,KAGO0d,UAAI,EACX1d,KAGO+B,YAAM,EAIb/B,KAGOiZ,OAAiB,EAACjZ,KAElBihB,iBAAW,EAAAjhB,KAEX+c,KAAiB,GAAE/c,KACnBoY,iBAAW,EAAApY,KACX0c,YAAM,EAkBX1c,KAAK2I,OAAShB,EAAQO,QACtBlI,KAAKwD,IAAMmE,EAAQuZ,KACnBlhB,KAAKoG,QAAUuB,EAAQwZ,SACvBnhB,KAAKghB,KAAOhhB,KAAK2I,OAAS3I,KAAK2I,OAAOqY,KAAKtL,OAAO1V,KAAKwD,KAAO,GAC9DxD,KAAK8B,GACH9B,KAAK6G,OAAO/E,IAAM,CAAC9B,KAAKoG,QAAQtE,MAAO9B,KAAKghB,MAAMI,KAAKvgB,GACzDb,KAAKgC,KACHhC,KAAK6G,OAAO7E,OACXhC,KAAK6G,OAAOoK,QAAU5N,OAAOC,KAAKtD,KAAK6G,OAAOoK,QAAQlN,OACnD,WACA/D,KAAK6G,OAAOwS,QACV,UACA,UACRrZ,KAAKihB,YAAcjhB,KAAK6G,OAAOoa,YAE/BjhB,KAAKiZ,MAAQjZ,KAAKoG,QAAQib,MAAMvT,KAChC9N,KAAKoG,QAAQib,MAAM1W,IAAI3K,KAAK8B,GAAI9B,MAEhCA,KAAKiR,OACHjR,KAAK6G,OAAOoK,OACRzM,EACExE,KAAK6G,OAAOoK,QACZ,CAACqQ,EAAiC9d,IACd,IAAIud,GAAUO,EAAa,CAC3CpZ,QAASlI,KACTkhB,KAAM1d,EACN2d,SAAUnhB,KAAKoG,YAKrBwa,GAGY,aAAd5gB,KAAKgC,OAAwBhC,KAAK6G,OAAO4N,QAC3C,MAAM,IAAIxJ,MACP,wDACCjL,KAAK8B,+BAELuB,OAAOC,KAAKtD,KAAKiR,QAAQ,8BAM/BjR,KAAKqZ,SACqB,IAAxBrZ,KAAK6G,OAAOwS,QAAmB,UAAYrZ,KAAK6G,OAAOwS,UAAW,EAEpErZ,KAAKuT,MAAQ1O,EAAQ7E,KAAK6G,OAAO0M,OAAO1J,QACxC7J,KAAKyT,KAAO5O,EAAQ7E,KAAK6G,OAAO4M,MAAM5J,QAEtC7J,KAAK0d,KAAO1d,KAAK6G,OAAO6W,KACxB1d,KAAK+B,OACW,UAAd/B,KAAKgC,MAAqBhC,KAAK2I,YAA8B7D,EAArB9E,KAAK6G,OAAO9E,OACtD/B,KAAK+c,KAAOlY,EAAQgC,EAAOkW,MAAMlT,OACnC,CAGO0X,cACLvhB,KAAKoY,Yf4HF,SAILtH,GAEA,MAAMsH,EAAc,IAAInP,IAIxB,GAAI6H,EAAUjK,OAAO2a,GACnB,IAAK,MAAM5N,KAAcvQ,OAAOC,KAAKwN,EAAUjK,OAAO2a,IAAK,CACzD,GAAI5N,IAAe7S,EACjB,MAAM,IAAIkK,MACR,4FAGJ,MAAMwW,EAAoB3Q,EAAUjK,OAAO2a,GAAG5N,GAC9CwE,EAAYzN,IACViJ,EACAzO,EAAwBsc,GAAmBpc,KAAKkP,GAC9CZ,GAAiB7C,EAAW8C,EAAYW,KAG9C,CAEF,GAAIzD,EAAUjK,OAAO6a,OAAQ,CAC3B,MAAM9N,EAAc,qBAAoB9C,EAAUhP,KAClDsW,EAAYzN,IACViJ,EACAzO,EAAwB2L,EAAUjK,OAAO6a,QAAQrc,KAAKkP,GACpDZ,GAAiB7C,EAAW8C,EAAYW,KAG9C,CACA,IAAK,MAAMyF,KAAalJ,EAAUhK,OAAQ,CACxC,GAAIkT,EAAU0H,OAAQ,CACpB,MAAM9N,EAAc,qBAAoBoG,EAAUlY,KAClDsW,EAAYzN,IACViJ,EACAzO,EAAwB6U,EAAU0H,QAAQrc,KAAKkP,GAC7CZ,GAAiB7C,EAAW8C,EAAYW,KAG9C,CACA,GAAIyF,EAAU2H,QAAS,CACrB,MAAM/N,EAAc,sBAAqBoG,EAAUlY,KACnDsW,EAAYzN,IACViJ,EACAzO,EAAwB6U,EAAU2H,SAAStc,KAAKkP,GAC9CZ,GAAiB7C,EAAW8C,EAAYW,KAG9C,CACA,GAAIyF,EAAUC,WAAY,CACxB,MAAMrG,EAAc,mBAAkBoG,EAAUlY,KAChDsW,EAAYzN,IACViJ,EACAzO,EAAwB6U,EAAUC,YAAY5U,KAAKkP,GACjDZ,GAAiB7C,EAAW8C,EAAYW,KAG9C,CACF,CACA,IAAK,MAAMb,KAAqB5C,EAAU8B,MAAO,CAC/C,IAAI5H,EAAWoN,EAAYtN,IAAI4I,EAAkBP,WAC5CnI,IACHA,EAAW,GACXoN,EAAYzN,IAAI+I,EAAkBP,UAAWnI,IAE/CA,EAAS/G,KAAKyP,EAChB,CACA,OAAO0E,CACT,CerMuBwJ,CAAkB5hB,MACjCA,KAAK6G,OAAO6V,SACd1c,KAAK0c,OAASvX,EAAwBnF,KAAK6G,OAAO6V,QAAQrX,KAAKkP,GAC7DZ,GAAiB3T,KAAMe,EAAYwT,MAIvClR,OAAOC,KAAKtD,KAAKiR,QAAQ1F,SAAS/H,IAChCxD,KAAKiR,OAAOzN,GAAK+d,aAAa,GAElC,CAKWM,iBACT,MAAO,CACL/f,GAAI9B,KAAK8B,GACT0B,IAAKxD,KAAKwD,IACVse,QAAS9hB,KAAKoG,QAAQ0b,QACtB9f,KAAMhC,KAAKgC,KACXyS,QAASzU,KAAKyU,QACV,CACElP,OAAQvF,KAAKyU,QAAQlP,OACrBiE,OAAQxJ,KACRsU,QAAStU,KAAKyU,QAAQH,QAAQjP,IAAIwb,IAClC1N,UAAW,KACXY,SAAS,EACT9F,OAAQA,KAAO,CACb1I,OAAQvF,KAAKyU,QAASlP,OAAQF,KAAKkP,GAAO,IAAGA,EAAEzS,OAC/C0H,OAAS,IAAGxJ,KAAK8B,KACjBwS,QAAStU,KAAKyU,QAASH,QAAQjP,IAAIwb,IACnC1N,UAAW,aAGfrO,EACJuU,QAASrZ,KAAKqZ,QACdpI,OAAQzM,EAAUxE,KAAKiR,QAAS7E,GACvBA,EAAMyV,aAEfL,GAAIxhB,KAAKwhB,GACTpJ,YAAa,IAAIpY,KAAKoY,YAAYpH,UAAU+Q,OAAO1c,KAAKkP,IAAO,IAC1DA,EACHD,QAASC,EAAED,QAAQjP,IAAIwb,QAEzBtN,MAAOvT,KAAKuT,MAAMlO,IAAIwb,IACtBpN,KAAMzT,KAAKyT,KAAKpO,IAAIwb,IACpBnD,KAAM1d,KAAK0d,KACXzE,MAAOjZ,KAAKiZ,QAAU,EACtBlX,OAAQ/B,KAAK+B,OACb+E,OAAQ9G,KAAK8G,OACbma,YAAajhB,KAAKihB,YAClBlE,KAAM/c,KAAK+c,KAEf,CAGO9O,SACL,OAAOjO,KAAK6hB,UACd,CAKW/a,aAUT,OAAO2Z,GAAKzgB,KAAM,UAAU,IAC1B6E,EAAQ7E,KAAK6G,OAAOC,QAAQzB,KAAI,CAACsB,EAAc7C,KAC7C,MAAMuC,IAAEA,EAAGwC,SAAEA,GAAalC,EACpByI,EAAazI,EAAa7E,IAAMkE,EAAehG,KAAK8B,GAAIgC,GACxDke,EACW,iBAAR3b,EACHA,EACC,iBAAgBL,EAAehG,KAAK8B,GAAIgC,KAC/C,MAAO,IACF6C,EACHN,IAAK2b,EACLlgB,GAAIsN,EACJvG,SAAUA,EACVoF,SACE,MAAMyT,OAAEA,EAAMC,QAAEA,KAAYM,GAAoBtb,EAChD,MAAO,IACFsb,EACHjgB,KAAM,gBACNqE,IAAK2b,EACLlgB,GAAIsN,EAER,EACD,KAUP,CAKWoS,SACT,OAAOf,GAAKzgB,KAAM,MAAM,IAGf,IAFaA,KAAKoY,aAGtBvF,SAAQ,EAAEe,EAAYW,KAAOA,EAAElP,KAAKkP,GAAM,CAACX,EAAYW,OACvDoB,QACC,CAACtQ,GAAWuO,EAAYjG,MACtBtI,EAAIuO,GAAcvO,EAAIuO,IAAe,GACrCvO,EAAIuO,GAAY3P,KAAK0J,GACdtI,IAET,CACF,IAEN,CAEWuN,YACT,OAAO6N,GACLzgB,KACA,sBACA,IAAM0S,GAAsB1S,OAEhC,CAEWyU,cACT,OAAOgM,GAAKzgB,KAAM,WAAW,If8D1B,SAIL8Q,EACAoR,GAKA,MAAM/N,EACe,iBAAZ+N,EACHpR,EAAUG,OAAOiR,GACjBA,EACEpR,EAAUG,OAAOiR,EAAQ3c,aACzBT,EACR,IAAKqP,GAAkB+N,EACrB,MAAM,IAAIjX,MACP,uBAAsBiX,sCAA4CpR,EAAUhP,MAGjF,MAAM6L,EAA4D,CAChEnE,OAAQsH,EACRwD,QACG4N,GAA8B,iBAAZA,EAA4Brd,EAAQqd,EAAQ5N,SAArB,GAC5CnB,UAAW,KACXY,SAAS,EACTxO,OAAQ4O,EAAiB,CAACA,GAAkB,GAC5ClG,OAAQA,KAAO,IACVN,EACHnE,OAAS,IAAGsH,EAAUhP,KACtByD,OAAQ4O,EAAiB,CAAE,IAAGA,EAAerS,MAAQ,MAIzD,OAAO6L,CACT,CejGMwU,CAAwBniB,KAAMA,KAAK6G,OAAO4N,UAE9C,CAGOlU,KACLiK,EACA/J,GAEA,MAAM0S,EAAY1S,EAAMuB,KAClBsS,EAA2B,GAEjC,IAAI8N,EAEJ,MAAMC,EAA4D5B,GAChEzgB,KACC,cAAamT,KACd,KAAMmP,Of3KVC,Ee2K8BpP,Gf5K9BrC,Ee4KwB9Q,MfxKZoY,YAAYtN,IAAIyX,IAC1B,IAAIzR,EAAUsH,YAAY9U,QACvB4N,QAAQsR,IAGP,GZzNgB,MYyNZA,EACF,OAAO,EAGT,IAAKA,EAAgBC,SAAS,MAC5B,OAAO,EAST,MAAMC,EAAqBF,EAAgBG,MAAM,KAC3CC,EAAcL,EAAkBI,MAAM,KAE5C,IACE,IAAIE,EAAa,EACjBA,EAAaH,EAAmB3e,OAChC8e,IACA,CACA,MAAMC,EAAoBJ,EAAmBG,GACvCE,EAAaH,EAAYC,GAE/B,GAA0B,MAAtBC,EASF,OARoBD,IAAeH,EAAmB3e,OAAS,EAWjE,GAAI+e,IAAsBC,EACxB,OAAO,CAEX,CAEA,OAAO,CAAI,IAEZjK,MAAK,CAACC,EAAGC,IAAMA,EAAEjV,OAASgV,EAAEhV,SAC5B8O,SAASrP,GAAQsN,EAAUsH,YAAYtN,IAAItH,KAvD3C,IACLsN,EACAyR,Ce4KE,IAEA,IAAK,MAAMS,KAAaX,EAAY,CAClC,MAAM/R,MAAEA,GAAU0S,EACZC,EAAkBzY,EAASvF,QAEjC,IAAIie,GAAc,EAElB,IACEA,GACG5S,GACDF,EACEE,EACA2S,EACAxiB,EACA+J,EAEL,CAAC,MAAOlI,GACP,MAAM6gB,EACa,iBAAV7S,EACHA,EACiB,iBAAVA,EACLA,EAAMtO,UACN8C,EACR,MAAM,IAAImG,MACP,4BACCkY,EAAa,IAAGA,MAAgB,8BACNhQ,qBAC1BnT,KAAK8B,SACAQ,EAAI8R,UAEf,CAEA,GAAI8O,EAAa,CACf5O,EAAQrQ,QAAQ+e,EAAU1O,SAC1B8N,EAAqBY,EACrB,KACF,CACF,CAEA,OAAOZ,EAAqB,CAACA,QAAsBtd,CACrD,CAKWse,aACT,OAAO3C,GAAKzgB,KAAM,UAAU,KAC1B,MAAMiR,OAAEA,GAAWjR,KACbojB,EAAS,IAAIrb,IAAI/H,KAAKqjB,WAE5B,GAAIpS,EACF,IAAK,MAAMvN,KAAWL,OAAOC,KAAK2N,GAAS,CACzC,MAAM7E,EAAQ6E,EAAOvN,GACrB,GAAI0I,EAAM6E,OACR,IAAK,MAAMxQ,KAAS2L,EAAMgX,OACxBA,EAAOjY,IAAK,GAAE1K,IAGpB,CAGF,OAAOyE,MAAMwS,KAAK0L,EAAO,GAE7B,CAOWC,gBACT,MAAMD,EAAS,IAAIrb,IACjB,IAAI/H,KAAKoY,YAAY9U,QAAQ4N,QAAQ0C,GAC5B5T,KAAKoY,YACTtN,IAAI8I,GACJ7D,MACEpC,MAEIA,EAAWpI,SACXoI,EAAW2G,QAAQvQ,SACnB4J,EAAWoG,cAMxB,OAAO7O,MAAMwS,KAAK0L,EACpB,EClaK,MAAME,GAmDXxjB,YAIS+G,EAcPN,GACAvG,KAfO6G,OAAAA,EA1BT7G,KAGO8hB,aAAO,EAAA9hB,KAEPujB,aAAO,EAAAvjB,KAEPuG,qBAAe,EAEtBvG,KACOwjB,cAAqB,EAE5BxjB,KACOqhB,MAAkD,IAAIpY,IAAKjJ,KAE3DyV,UAAI,EAAAzV,KAEJ8B,QAAE,EAAA9B,KAEFiR,YAAM,EAAAjR,KACNojB,YAAM,EA6abpjB,KAGAyjB,0BAAoB,EA1ZlBzjB,KAAK8B,GAAK+E,EAAO/E,IAAM,YACvB9B,KAAKuG,gBAAkB,CACrBC,OAAQD,GAAiBC,QAAU,CAAE,EACrC8N,QAAS/N,GAAiB+N,SAAW,CAAE,EACvCqK,OAAQpY,GAAiBoY,QAAU,CAAE,EACrCxO,OAAQ5J,GAAiB4J,QAAU,CAAC,GAEtCnQ,KAAK8hB,QAAU9hB,KAAK6G,OAAOib,QAC3B9hB,KAAKujB,QAAUvjB,KAAK6G,OAAO0c,QAE3BvjB,KAAK2N,WAAa3N,KAAK2N,WAAW7H,KAAK9F,MACvCA,KAAKwM,mBAAqBxM,KAAKwM,mBAAmB1G,KAAK9F,MACvDA,KAAKmO,qBAAuBnO,KAAKmO,qBAAqBrI,KAAK9F,MAC3DA,KAAKuM,gBAAkBvM,KAAKuM,gBAAgBzG,KAAK9F,MACjDA,KAAKI,MAAQJ,KAAKI,MAAM0F,KAAK9F,MAE7BA,KAAKyV,KAAO,IAAIsL,GAAUla,EAAQ,CAChCqa,KAAMlhB,KAAK8B,GACXqf,SAAUnhB,OAGZA,KAAKyV,KAAK8L,cAEVvhB,KAAKiR,OAASjR,KAAKyV,KAAKxE,OACxBjR,KAAKojB,OAASpjB,KAAKyV,KAAK2N,MAa1B,CAWOM,QACLnd,GAmBA,MAAM+N,QAAEA,EAAOnE,OAAEA,EAAM3J,OAAEA,EAAMmY,OAAEA,GAAW3e,KAAKuG,gBAEjD,OAAO,IAAI+c,GAAatjB,KAAK6G,OAAQ,CACnCyN,QAAS,IAAKA,KAAY/N,EAAgB+N,SAC1CnE,OAAQ,IAAKA,KAAW5J,EAAgB4J,QACxC3J,OAAQ,IAAKA,KAAWD,EAAgBC,QACxCmY,OAAQ,IAAKA,KAAWpY,EAAgBoY,SAE5C,CAEOgF,aACL9c,GAWA,MAAM+c,GhB2gDRtR,EgB3gD+CtS,KAAKyV,KhB4gDpDvR,EgB5gD0D2C,EAAOlG,MhB+gD1D0R,GAAcC,EAAU,IADTf,GAAiB8D,GAAc/C,EAAUpO,OAJ1D,IACLoO,EACApO,EgB3gDE,MAAMuN,EAAUF,GACd8D,GAAcrV,KAAKyV,KAAMmO,IAG3B,OAAOjG,GACL,CACE7N,OAAQ,IAAI2B,GACZxM,QAAS4B,EAAO5B,SAAY,CAAe,EAC3C+D,SAAU,CAAE,EACZqD,OAAQkG,GAAed,EAASzR,KAAKyV,MACjC,OACA5O,EAAOwF,QAAU,SACrBtK,OAAQ8E,EAAO9E,OACfG,MAAO2E,EAAO3E,MACdgV,aAAcrQ,EAAOqQ,cAEvBlX,KASJ,CASO2N,WACLnD,EAQA/J,EACAmO,GAEA,OAAO8M,GAAUlR,EAAU/J,EAAOmO,GAAYpE,QAChD,CASO+N,UACL/N,EAQA/J,EACAmO,GAIA,OAAO8M,GAAUlR,EAAU/J,EAAOmO,GAC/BgN,WACL,CAEOU,kBACL9R,EAQA/J,GAEA,OAAOsV,GAAe/V,KAAKyV,KAAMjL,EAAS7J,MAAO6J,EAAU/J,IAAU,EACvE,CAMQojB,mBACNjV,EACArB,EACAmL,GAEA,MAAMzT,QAAEA,GAAYjF,KAAK6G,OAEnBid,EAAanG,GACjB,CACE1Y,QACqB,mBAAZA,GAA0BA,EAAUA,EAAW,CAAe,EACvE6K,OAAQ,CAAC9P,KAAKyV,MACdzM,SAAU,CAAE,EACZqD,OAAQ,UAEVrM,MAGF,GAAuB,mBAAZiF,EAAwB,CAGjC,OAAOqU,GACLwK,EACAvW,EACAqB,EACA,CAAC2P,IANgBJ,EAAGF,QAAOxd,QAAOa,UAClC2D,EAAQ,CAAEgZ,QAAO7b,MAAO3B,EAAM2B,MAAOd,YAMrCoX,EAEJ,CAEA,OAAOoL,CACT,CAKOtX,mBACLoC,EAIAxM,GAEA,MAAMmL,EAAYpL,EAAgBC,GAC5BsW,EAAkC,GAClCqL,EAAkB/jB,KAAK6jB,mBAC3BjV,EACArB,EACAmL,GAEIjL,EAAY8K,GAChB,CACE,CACEhT,OAAQ,IAAIoP,GAAqB3U,KAAKyV,OACtCjM,OAAQxJ,KAAKyV,KACb1B,SAAS,EACTO,QAAS,GACTnB,UAAW,KACXlF,OAAQ,OAGZ8V,EACAnV,EACArB,GACA,EACAmL,IAGMlO,SAAUwZ,GAAetI,GAC/BjO,EACAF,EACAqB,EACA8J,GAGF,OAAOsL,CACT,CAEO5jB,MACLoK,GASAnH,OAAO2N,OAAOxG,EAASxB,UAAyCuC,SAC7DS,IACoC,WAA/BA,EAAMN,cAAcW,QACtBL,EAAM5L,OACR,GAGN,CAEOwG,iBAAiBlD,GACtB,MAAMugB,EAAWxgB,EAAYC,GACvBwgB,EAAeD,EAASpa,MAAM,GAC9Bsa,EAAkBtU,GAAUoU,EAAS,IACvCA,EAAS,GAAGpa,MAAMua,GAClBH,EAAS,GAEPnT,EAAY9Q,KAAKqhB,MAAMvW,IAAIqZ,GACjC,IAAKrT,EACH,MAAM,IAAI7F,MACP,sBAAqBkZ,iCAA+CnkB,KAAK8B,OAG9E,OAAOoS,GAAmBpD,EAAWoT,EACvC,CAEWrC,iBACT,OAAO7hB,KAAKyV,KAAKoM,UACnB,CAEO5T,SACL,OAAOjO,KAAK6hB,UACd,CAEO1T,qBACL3D,EAQA7C,GAEA,OfxCG,SAQL6C,EAQA7C,GAEA,MACEmI,OAAQqN,EAAKJ,KACbA,EAAI3W,QACJA,EAAO4C,SACPA,EAAQ/D,QACRA,EAAOoY,IACPA,EAAGC,OACHA,EAAMrN,QACNA,EAAOmN,QACPA,EAAOnP,OACPA,KACGsP,GACD/S,EAEE6Z,EAAwC,CAAA,EAE9C,IAAK,MAAMviB,KAAMkH,EAAU,CACzB,MAAMgD,EAAQhD,EAASlH,GAQvBuiB,EAAaviB,GAAmC,CAC9C0I,SAAUwB,EAAMmC,qBAAqBxG,GACrCtB,IAAK2F,EAAM3F,IACXwC,SAAUmD,EAAM1D,UAChBM,aAAcoD,EAAM7D,cAExB,CAQA,MANkB,IACboV,EACHtY,QAAS2Y,GAAe3Y,GACxB+D,SAAUqb,EAId,CelBWlW,CAAqB3D,EAAU7C,EACxC,CAEO4E,gBACL/B,EACAnC,GAKA,MAAMW,EAAwC,CAAA,EACxCsb,EAQD9Z,EAAiBxB,SAEtB3F,OAAOC,KAAKghB,GAAkB/Y,SAASgZ,IACrC,MAAMC,EACJF,EAAiBC,GACbE,EAAaD,EAAUha,SACvBnE,EAAMme,EAAUne,IAEhBqB,EACW,iBAARrB,EAAmBF,EAAuBnG,KAAMqG,GAAOA,EAEhE,IAAKqB,EACH,OAGF,MAAM9E,EAAWwL,EAAY1G,EAAO,CAClC5F,GAAIyiB,EACJ5b,OAAQN,EAAY/G,KACpBsH,aAAc4b,EAAU5b,aACxB4B,SAAUia,EACVpe,MACAwC,SAAU2b,EAAU3b,WAGtBG,EAASub,GAAW3hB,CAAQ,IAG9B,MAAM8hB,EAAmB/G,GACvB,IACMnT,EACJxB,WACA8G,OAAQ5K,MAAMwS,KACZnG,GAAiB8D,GAAcrV,KAAKyV,KAAOjL,EAAiB7J,UAGhEX,MAUF,IAAI2kB,EAAO,IAAI5c,IAyBf,OAvBA,SAAS6c,EACP/G,EACA7U,GAEA,IAAI2b,EAAK9S,IAAIgM,GAAb,CAGA8G,EAAKxZ,IAAI0S,GACT,IAAK,IAAIra,KAAOqa,EAAa,CAC3B,MAAMld,EAAiBkd,EAAYra,GAEnC,GAAI7C,GAA0B,iBAAVA,EAAoB,CACtC,GAAI,iBAAkBA,GAASA,EAAMuN,eAAiBnH,EAAc,CAClE8W,EAAYra,GAAOwF,EAAUrI,EAAcmB,IAC3C,QACF,CACA8iB,EAAcjkB,EAA6BqI,EAC7C,CACF,CAZA,CAaF,CAEA4b,CAAcF,EAAiBzf,QAAS+D,GAEjC0b,CACT,ECtgBF,MAAMG,GAAwC,CAC5Cza,QAAS0a,KC6FJ,SAASC,GAedle,EA0BAN,GAwCA,OAAO,IAAI+c,GAaTzc,EAAeN,EACnB,4BC7LO,MAA+CzG,cAAAE,KAC5CglB,SAA0C,IAAI/b,IAAKjJ,KACnDilB,KAAe,EAACjlB,KAChBklB,IAAc,EAACllB,KACfmlB,WAAY,EAAKnlB,KACjBolB,sBAAuB,CAAK,CAE7Bnb,MACL,OAAOjK,KAAKilB,IACd,CACQI,QACN,OAAOrlB,KAAKklB,KACd,CACO3iB,WAAW4E,EAA8BiD,GAC9CpK,KAAKolB,qBAAuBplB,KAAKmlB,UACjC,MAAMrjB,EAAK9B,KAAKqlB,QAMhB,OALArlB,KAAKglB,SAASra,IAAI7I,EAAI,CACpB1B,MAAOJ,KAAKiK,MACZG,UACAjD,OAEKrF,CACT,CACOuF,aAAavF,GAClB9B,KAAKolB,qBAAuBplB,KAAKmlB,UACjCnlB,KAAKglB,SAASna,OAAO/I,EACvB,CACO6I,IAAI2a,GACT,GAAItlB,KAAKilB,KAAOK,EACd,MAAM,IAAIra,MAAM,iCAGlBjL,KAAKilB,KAAOK,EACZtlB,KAAKulB,eACP,CACQA,gBACN,GAAIvlB,KAAKmlB,UAEP,YADAnlB,KAAKolB,sBAAuB,GAG9BplB,KAAKmlB,WAAY,EAEjB,MAAMK,EAAS,IAAIxlB,KAAKglB,UAAUlM,MAChC,EAAE2M,EAAMC,IAAYC,EAAMC,MACxB,MAAMC,EAAOH,EAAStlB,MAAQslB,EAAStb,QAEvC,OADawb,EAASxlB,MAAQwlB,EAASxb,QACzByb,GAAQ,EAAI,CAAC,IAI/B,IAAK,MAAO/jB,EAAIsI,KAAYob,EAAQ,CAClC,GAAIxlB,KAAKolB,qBAIP,OAHAplB,KAAKolB,sBAAuB,EAC5BplB,KAAKmlB,WAAY,OACjBnlB,KAAKulB,gBAGHvlB,KAAKiK,MAAQG,EAAQhK,OAASgK,EAAQA,UACxCpK,KAAKglB,SAASna,OAAO/I,GACrBsI,EAAQjD,GAAG2e,KAAK,MAEpB,CAEA9lB,KAAKmlB,WAAY,CACnB,CACOY,UAAU3e,GACfpH,KAAKilB,MAAQ7d,EACbpH,KAAKulB,eACP,6FzB2MK,SAAmC/a,GACxC,MAAO,IAAI,IAAIzC,IAAI,IAAIyC,EAASsF,OAAO+C,SAAS7C,GAAOA,EAAGqT,cAC5D,QKvDO,SAKLlT,GAgBA,SAAS6V,EAAIlX,EAA6CC,GAIxD,OAAO,CACT,CAKA,OAHAiX,EAAIpV,MAAQP,EACZ2V,EAAI7V,OAASA,EAEN6V,CACT,gBqB9OO,SAILvlB,EACAuB,GAEA,MAAMikB,EAAQphB,EAAQ7C,GACtB,IAAKikB,EAAM5G,SAAS5e,EAAMuB,MAAc,CACtC,MAAMkkB,EACa,IAAjBD,EAAMliB,OACD,SAAQkiB,EAAM,MACd,iBAAgBA,EAAM7E,KAAK,WAClC,MAAM,IAAInW,MACP,kBAAiBkb,KAAKC,UAAU3lB,cAAkBylB,IAEvD,CACF,4DPfO,WAIL,OAAO9X,EAAYmS,GACrB,sCN8LO,SASLZ,GAkBA,SAAS0G,EACPvX,EACAC,GAKF,CAMA,OAJAsX,EAAerkB,KAAO,wBACtBqkB,EAAe1G,QAAUA,EACzB0G,EAAerX,QAAU0Q,GAElB2G,CACT,cDoCO,SAOL9gB,EACAoC,GAuBA,OAAO8X,GAOLla,GAAQ,EAAG9E,WAAiBA,GAAOkH,EACvC,iBI5MO,SAIL2e,GAgEA,MA9DkD,CAChDzf,OAAQyf,EACRlmB,MAAOA,CAACgM,EAAOwC,KACb,MAAMtN,KAAEA,EAAIiH,OAAEA,GAAWqG,EAEnB2X,EAA+C,CACnDC,eAAW1hB,EACX2hB,aAAS3hB,GAGXmb,GAAetV,IAAIrJ,EAAMilB,GAEzBA,EAAcE,QAAUH,EAAe,CACrClkB,MAAOgK,EAAMhK,MACbmG,SACAjH,OACAolB,SAAWjmB,IACyB,YAA9Ba,EAAKoK,cAAcW,QAGnB/K,EAAK4G,SACPK,EAAO8B,OAAO/I,EAAMA,EAAK4G,QAASzH,EACpC,EAEFkmB,QAAUC,IACRL,EAAcC,YAAc,IAAIze,IAChCwe,EAAcC,UAAUrb,IAAIyb,EAAS,GAEvC,EAEJjZ,WAAYA,CAACvB,EAAO3L,EAAOmO,KACzB,MAAM2X,EAA+CtG,GAAenV,IAClE8D,EAAWtN,MAGb,OAAIb,EAAMuB,OAASd,GACjBkL,EAAQ,IACHA,EACHC,OAAQ,UACRnK,WAAO4C,GAGTyhB,EAAcE,YACPra,IAGTma,EAAcC,WAAWjb,SAASsb,GAAaA,EAASpmB,KAEjD2L,EAAK,EAEdI,mBAAoBA,CAAC+B,EAAGnM,KACf,CACLiK,OAAQ,SACRtK,YAAQ+C,EACR5C,WAAO4C,EACP1C,UAGJ+L,qBAAuB3D,GAAaA,EACpC+B,gBAAkB/B,GAAkBA,EAIxC,wBCoBO,SAILsc,GAyFA,MA/E+C,CAC7CjgB,OAAQigB,EACRnZ,WAAYA,CAACvB,EAAO3L,KAClB,GAAqB,WAAjB2L,EAAMC,OACR,OAAOD,EAGT,OAAQ3L,EAAMuB,MACZ,KAAKme,GACH,MAAO,IACF/T,EACHC,OAAQ,QACRnK,MAAQzB,EAAc+e,KACtBpd,WAAO0C,EACPiiB,mBAAejiB,GAEnB,KAAKsb,GACH,MAAO,IACFhU,EACHC,OAAQ,OACRjK,WAAO0C,EACPiiB,mBAAejiB,GAEnB,KAAK5D,EAEH,OADAkL,EAAM2a,cAAe1Z,cACd,IACFjB,EACHC,OAAQ,UACRjK,WAAO0C,EACPiiB,mBAAejiB,GAEnB,QACE,OAAOsH,EACX,EAEFI,mBAAoBA,CAAC+B,EAAGnM,KACf,CACLiK,OAAQ,SACRtK,YAAQ+C,EACR5C,WAAO4C,EACPG,aAASH,EACT1C,QACA2kB,mBAAejiB,IAGnB1E,MAAOA,CAACgM,GAAS9K,OAAMiH,aACA,SAAjB6D,EAAMC,SAKVD,EAAM2a,cAAgBD,EAAe,CACnC1kB,MAAOgK,EAAMhK,MACbmG,SACAjH,SACC0L,UAAU,CACXzM,KAAOI,IACDW,EAAK4G,SACPK,EAAO8B,OAAO/I,EAAMA,EAAK4G,QAASvH,EACpC,EAEFuB,MAAQI,IACNiG,EAAO8B,OAAO/I,EAAMA,EAAM,CACxBU,KAAMme,GACNX,KAAMld,GACN,EAEJyD,SAAUA,KACRwC,EAAO8B,OAAO/I,EAAMA,EAAM,CAAEU,KAAMoe,IAA6B,IAEjE,EAEJjS,qBAAsBA,EAAG4Y,mBAAkBvc,KAAeA,EAC1D+B,gBAAkB/B,IAAmB,IAChCA,EACHuc,mBAAejiB,IAKrB,mBA9OO,SACLkiB,GAgGA,MAtFsD,CACpDngB,OAAQmgB,EACRrZ,WAAYA,CAACnD,EAAU/J,GAASa,OAAMQ,KAAIgK,QAAOvD,aAC/C,GAAwB,WAApBiC,EAAS6B,OACX,OAAO7B,EAGT,OAAQ/J,EAAMuB,MACZ,KAAKke,GAKH,MAJoB,IACf1V,EACHvF,QAASxE,EAAM+e,MAInB,KAAKW,GACH,MAAO,IACF3V,EACH6B,OAAQ,QACRnK,MAAQzB,EAAc+e,KACtBpd,WAAO0C,EACPiiB,mBAAejiB,GAEnB,KAAKsb,GACH,MAAO,IACF5V,EACH6B,OAAQ,OACRjK,WAAO0C,EACPiiB,mBAAejiB,GAEnB,KAAK5D,EAEH,OADAsJ,EAASuc,cAAe1Z,cACjB,IACF7C,EACH6B,OAAQ,UACRjK,WAAO0C,EACPiiB,mBAAejiB,GAEnB,QACE,OAAO0F,EACX,EAEFgC,mBAAoBA,CAAC+B,EAAGnM,KACf,CACLiK,OAAQ,SACRtK,YAAQ+C,EACR5C,WAAO4C,EACPG,aAASH,EACT1C,QACA2kB,mBAAejiB,IAGnB1E,MAAOA,CAACgM,GAAS9K,OAAMiH,aACA,SAAjB6D,EAAMC,SAIVD,EAAM2a,cAAgBC,EAAkB,CACtC5kB,MAAOgK,EAAMhK,MACbmG,SACAjH,SACC0L,UAAU,CACXzM,KAAOI,IACL4H,EAAO8B,OAAO/I,EAAMA,EAAM,CACxBU,KAAMke,GACNV,KAAM7e,GACN,EAEJuB,MAAQI,IACNiG,EAAO8B,OAAO/I,EAAMA,EAAM,CACxBU,KAAMme,GACNX,KAAMld,GACN,EAEJyD,SAAUA,KACRwC,EAAO8B,OAAO/I,EAAMA,EAAM,CAAEU,KAAMoe,IAA6B,IAEjE,EAEJjS,qBAAsBA,EAAG4Y,mBAAkB3a,KAAYA,EACvDG,gBAAkBH,IAAW,IACvBA,EACJ2a,mBAAejiB,IAKrB,gBC1GO,SACLmiB,GAgGA,MA9EkD,CAChDpgB,OAAQogB,EACRtZ,WAAYA,CAACvB,EAAO3L,KAClB,GAAqB,WAAjB2L,EAAMC,OACR,OAAOD,EAGT,OAAQ3L,EAAMuB,MACZ,KAAKqe,GAAwB,CAC3B,MAAM6G,EAAiBzmB,EAAc+e,KACrC,MAAO,IACFpT,EACHC,OAAQ,OACRtK,OAAQmlB,EACR9kB,WAAO0C,EAEX,CACA,KAAKwb,GACH,MAAO,IACFlU,EACHC,OAAQ,QACRnK,MAAQzB,EAAc+e,KACtBpd,WAAO0C,GAEX,KAAK5D,EACH,MAAO,IACFkL,EACHC,OAAQ,UACRjK,WAAO0C,GAEX,QACE,OAAOsH,EACX,EAEFhM,MAAOA,CAACgM,GAAS9K,OAAMiH,aAGrB,GAAqB,WAAjB6D,EAAMC,OACR,OAGsB8a,QAAQnY,QAC9BiY,EAAe,CAAE7kB,MAAOgK,EAAMhK,MAAQmG,SAAQjH,UAGhC8lB,MACbC,IACmC,WAA9B/lB,EAAKoK,cAAcW,QAGvB9D,EAAO8B,OAAO/I,EAAMA,EAAM,CACxBU,KAAMqe,GACNb,KAAM6H,GACN,IAEHC,IACmC,WAA9BhmB,EAAKoK,cAAcW,QAGvB9D,EAAO8B,OAAO/I,EAAMA,EAAM,CACxBU,KAAMse,GACNd,KAAM8H,GACN,GAEL,EAEH9a,mBAAoBA,CAAC+B,EAAGnM,KACf,CACLiK,OAAQ,SACRtK,YAAQ+C,EACR5C,WAAO4C,EACP1C,UAGJ+L,qBAAuB3D,GAAaA,EACpC+B,gBAAkB/B,GAAkBA,EAIxC,wCStGO,SACL+c,EACA/c,EACA/J,GAEA,MAAM+mB,EA7DD,SACLD,GAEA,MAAMjmB,EAAO8M,EAAYmZ,GAWzB,MAV6E,CAC3EjmB,OACAwK,MAAOA,OACPhK,GAAI,GACJwF,OAAQA,OACRzE,UAAW,GACXkJ,UAAWA,OACXxD,OAAQjH,EAAKiH,OAIjB,CA8C0Bkf,CAAsBF,GAE9C,OADCC,EAAgBlmB,KAAasG,UAAY4C,EACnC+c,EAAW5Z,WAAWnD,EAAU/J,EAAO+mB,EAChD,gEbNO,SAML7mB,EAAyEA,GACvEsE,UACAxE,YACK,CAAEwE,UAASxE,WAClBof,GAEA,SAASrY,EACPsH,EACAC,GAKF,CASA,OAPAvH,EAAIxF,KAAO,aACXwF,EAAI7G,MAAQA,EACZ6G,EAAIqY,MAAQA,EAEZrY,EAAIwH,QAAU4Q,GACdpY,EAAIyH,QAAU6Q,GAEPtY,CACT,yBToEO,SAKL8I,GAOA,SAASoX,EAAI5Y,EAA6CC,GAIxD,OAAO,CACT,CAKA,OAHA2Y,EAAI9W,MAAQV,EACZwX,EAAIvX,OAAS,CAACG,GAEPoX,CACT,OAkHO,SAKLvX,GAgBA,SAASwX,EAAG7Y,EAA6CC,GAIvD,OAAO,CACT,CAKA,OAHA4Y,EAAG/W,MAAQL,EACXoX,EAAGxX,OAASA,EAELwX,CACT,+COpFO,SAQLlnB,EAGAkH,GAQA,OAAO8X,GAOLV,GAAeI,OAAQ1e,EAAOkH,EAClC,sBgB7KO,UAWL4b,QACAA,EAAO/c,OACPA,EAAM8N,QACNA,EAAOnE,OACPA,EAAMwO,OACNA,IAqFA,MAAO,CACLoG,cAAgBle,GACbke,GACC,IAAKle,EAAQ0c,WACb,CACE/c,SACA8N,UACAnE,SACAwO,WAIV,2BvBlHO,SAKLza,GAOA,SAAS0jB,EACP9Y,EACAC,GAKA,OAAO,CACT,CAKA,OAHA6Y,EAAQhX,MAAQhB,EAChBgY,EAAQ1jB,WAAaA,EAEd0jB,CACT,oDwB1GO,SACLC,GAEA,OAAO,IAAIV,SAAQ,CAACnY,EAAS8Y,KAC3BD,EAAM7a,UAAU,CACdjH,SAAUA,KACRiJ,EAAQ6Y,EAAMnc,cAAc3J,OAAO,EAErCG,MAAO4lB,GACP,GAEN,YNGO,SACLllB,EACAwW,EACAzR,GAEA,MAAMe,EAAkC,IACnCmc,MACAld,GAEL,OAAO,IAAIwf,SAAQ,CAACY,EAAKC,KACvB,IAAIC,GAAO,EAMX,MAAMC,EACJxf,EAAgB0B,UAAY0a,SACxBhgB,EACAvC,YAAW,KACT4lB,EAAK9a,cACL2a,EAAI,IAAI/c,MAAO,cAAavC,EAAgB0B,uBAAuB,GAClE1B,EAAgB0B,SAEnBqc,EAAUA,KACdpf,aAAa6gB,GACbD,GAAO,EACPE,GAAK9a,aAAa,EAGpB,SAAS+a,EAAaC,GAChBjP,EAAUiP,KACZ5B,IACAsB,EAAIM,GAER,CAEA,IAAIF,EAGJC,EAAaxlB,EAAS8I,eAClBuc,IAIJE,EAAMvlB,EAASoK,UAAU,CACvBzM,KAAM6nB,EACNlmB,MAAQI,IACNmkB,IACAuB,EAAI1lB,EAAI,EAEVyD,SAAUA,KACR0gB,IACAuB,EAAI,IAAI/c,MAAO,iDAAgD,IAG/Dgd,GACFE,EAAI9a,cACN,GAEJ"}