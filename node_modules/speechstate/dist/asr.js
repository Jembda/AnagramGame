"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asrMachine = void 0;
const xstate_1 = require("xstate");
const getToken_1 = require("./getToken");
const SpeechToText_1 = require("web-speech-cognitive-services/lib/SpeechServices/SpeechToText");
const REGION = "northeurope";
exports.asrMachine = (0, xstate_1.createMachine)({
    id: "asr",
    types: {},
    context: ({ input }) => ({
        asrDefaultCompleteTimeout: input.asrDefaultCompleteTimeout || 0,
        asrDefaultNoInputTimeout: input.asrDefaultNoInputTimeout || 5000,
        locale: input.locale || "en-US",
        audioContext: input.audioContext,
        azureCredentials: input.azureCredentials,
    }),
    initial: "GetToken",
    on: {
        READY: {
            target: ".Ready",
            actions: [
                (0, xstate_1.assign)({
                    wsaASR: ({ event }) => event.value.wsaASR,
                    wsaGrammarList: ({ event }) => event.value.wsaGrammarList,
                }),
                (0, xstate_1.sendParent)({ type: "ASR_READY" }),
            ],
        },
    },
    states: {
        Fail: {},
        Ready: {
            on: {
                START: {
                    target: "Recognising",
                    actions: (0, xstate_1.assign)({ params: ({ event }) => event.value }),
                },
            },
        },
        Recognising: {
            initial: "WaitForRecogniser",
            invoke: {
                id: "recStart",
                input: ({ context }) => ({
                    wsaASR: context.wsaASR,
                    wsaGrammarList: context.wsaGrammarList,
                    locale: context.locale,
                    phrases: (context.params || {}).hints || [],
                }),
                src: "recStart",
            },
            exit: "recStop",
            on: {
                RESULT: {
                    actions: [
                        (0, xstate_1.assign)({
                            result: ({ event }) => event.value,
                        }),
                        (0, xstate_1.cancel)("completeTimeout"),
                    ],
                    target: ".Match",
                },
                RECOGNISED: {
                    target: "Ready",
                    actions: [
                        (0, xstate_1.sendParent)(({ context }) => ({
                            type: "RECOGNISED",
                            value: context.result,
                        })),
                    ],
                },
                CONTROL: {
                    target: "Pause",
                },
                NOINPUT: {
                    actions: (0, xstate_1.sendParent)({ type: "ASR_NOINPUT" }),
                    target: "Ready",
                },
            },
            states: {
                WaitForRecogniser: {
                    on: {
                        STARTED: {
                            target: "NoInput",
                            actions: [
                                (0, xstate_1.assign)({
                                    wsaASRinstance: ({ event }) => event.value.wsaASRinstance,
                                }),
                                (0, xstate_1.sendParent)({ type: "ASR_STARTED" }),
                            ],
                        },
                    },
                },
                NoInput: {
                    entry: [
                        (0, xstate_1.raise)({ type: "NOINPUT" }, {
                            delay: ({ context }) => (context.params || {}).noInputTimeout ||
                                context.asrDefaultNoInputTimeout,
                            id: "timeout",
                        }),
                    ],
                    on: {
                        STARTSPEECH: {
                            target: "InProgress",
                            actions: (0, xstate_1.cancel)("completeTimeout"),
                        },
                    },
                    exit: [(0, xstate_1.cancel)("timeout")],
                },
                InProgress: {
                    entry: () => console.debug("[ASR] in progress"),
                },
                Match: {
                    entry: [
                        ({ context }) => console.debug("RECOGNISED will be sent in (ms)", (context.params || {}).completeTimeout ||
                            context.asrDefaultCompleteTimeout),
                        (0, xstate_1.raise)({ type: "RECOGNISED" }, {
                            delay: ({ context }) => (context.params || {}).completeTimeout ||
                                context.asrDefaultCompleteTimeout,
                            id: "completeTimeout",
                        }),
                    ],
                },
            },
        },
        Pause: {
            entry: (0, xstate_1.sendParent)({ type: "ASR_PAUSED" }),
            on: {
                CONTROL: {
                    target: "Recognising",
                    //       ///// todo? reset noInputTimeout
                    //       // actions: assign({
                    //       //   params: {
                    //       //     noInputTimeout: ({ context }) =>
                    //       //       context.asrDefaultNoInputTimeout,
                    //       //     completeTimeout: 0,
                    //       //     locale: "0",
                    //       //     hints: [""],
                    //       //   },
                    //       // }),} },
                },
            },
        },
        GetToken: {
            invoke: {
                id: "getAuthorizationToken",
                input: ({ context }) => ({
                    credentials: context.azureCredentials,
                }),
                src: "getToken",
                onDone: {
                    target: "Ponyfill",
                    actions: [
                        (0, xstate_1.assign)(({ event }) => {
                            return { azureAuthorizationToken: event.output };
                        }),
                    ],
                },
                onError: {
                    target: "Fail",
                },
            },
        },
        Ponyfill: {
            invoke: {
                id: "ponyASR",
                src: "ponyfill",
                input: ({ context }) => ({
                    audioContext: context.audioContext,
                    azureAuthorizationToken: context.azureAuthorizationToken,
                    locale: context.locale,
                }),
            },
        },
    },
}, {
    actions: {
        recStop: ({ context }) => {
            context.wsaASRinstance.abort();
            console.debug("[ASR] stopped");
        },
    },
    actors: {
        getToken: getToken_1.getToken,
        ponyfill: (0, xstate_1.fromCallback)(({ sendBack, input }) => {
            const { SpeechGrammarList, SpeechRecognition } = (0, SpeechToText_1.default)({
                audioContext: input.audioContext,
                credentials: {
                    region: REGION,
                    authorizationToken: input.azureAuthorizationToken,
                },
            });
            sendBack({
                type: "READY",
                value: {
                    wsaASR: SpeechRecognition,
                    wsaGrammarList: SpeechGrammarList,
                },
            });
            console.debug("[ASR] READY");
        }),
        recStart: (0, xstate_1.fromCallback)(({ sendBack, input }) => {
            let asr = new input.wsaASR();
            asr.grammars = new input.wsaGrammarList();
            asr.grammars.phrases = input.phrases || [];
            asr.lang = input.locale;
            asr.continuous = true;
            asr.interimResults = true;
            asr.onresult = function (event) {
                if (event.results[event.results.length - 1].isFinal) {
                    const transcript = event.results
                        .map((x) => x[0].transcript.replace(/\.$/, ""))
                        .join(" ");
                    const confidence = event.results
                        .map((x) => x[0].confidence)
                        .reduce((a, b) => a + b) /
                        event.results.length;
                    const res = [
                        {
                            utterance: transcript,
                            confidence: confidence,
                        },
                    ];
                    sendBack({
                        type: "RESULT",
                        value: res,
                    });
                    console.debug("[ASR] RESULT (pre-final)", res);
                }
                else {
                    sendBack({ type: "STARTSPEECH" });
                }
            };
            asr.addEventListener("start", () => {
                sendBack({ type: "STARTED", value: { wsaASRinstance: asr } });
            });
            // receive((event) => {
            //   console.debug("bla");
            //   if (event.type === "STOP") {
            //     asr.abort();
            //   }
            // });
            asr.start();
        }),
    },
});
