import { Settings, Agenda, Hypothesis } from "./types";
interface SSContext {
    settings: Settings;
    audioContext?: AudioContext;
    asrRef?: any;
    ttsRef?: any;
}
type SSEvent = {
    type: "PREPARE";
} | {
    type: "CONTROL";
} | {
    type: "STOP";
} | {
    type: "SPEAK";
    value: Agenda;
} | {
    type: "TTS_READY";
} | {
    type: "TTS_STARTED";
} | {
    type: "TTS_ERROR";
} | {
    type: "SPEAK_COMPLETE";
} | {
    type: "ASR_READY";
} | {
    type: "LISTEN";
} | {
    type: "ASR_STARTED";
} | {
    type: "ASR_NOINPUT";
} | {
    type: "RECOGNISED";
    value: Hypothesis[];
};
declare const speechstate: import("xstate").StateMachine<SSContext, SSEvent, Record<string, import("xstate").AnyActorRef>, import("xstate").ProvidedActor, import("xstate").ParameterizedObject, import("xstate").ParameterizedObject, string, import("xstate").StateValue, string, Settings, {}, import("xstate").ResolveTypegenMeta<import("xstate").TypegenDisabled, SSEvent, import("xstate").ProvidedActor, import("xstate").ParameterizedObject, import("xstate").ParameterizedObject, string, string>>;
export { speechstate };
//# sourceMappingURL=speechstate.d.ts.map