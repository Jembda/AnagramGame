import { AzureCredentials, Agenda } from "./types";
interface MySpeechSynthesisUtterance extends SpeechSynthesisUtterance {
    new (s: string): any;
}
interface TTSInit {
    audioContext: AudioContext;
    azureCredentials: string | AzureCredentials;
    ttsDefaultVoice: string;
}
interface TTSContext extends TTSInit {
    azureAuthorizationToken?: string;
    ttsLexicon?: string;
    wsaTTS?: SpeechSynthesis;
    wsaVoice?: SpeechSynthesisVoice;
    wsaUtt?: MySpeechSynthesisUtterance;
    agenda?: Agenda;
}
type TTSEvent = {
    type: "PREPARE";
} | {
    type: "CONTROL";
} | {
    type: "STOP";
} | {
    type: "READY";
    value: {
        wsaTTS: SpeechSynthesis;
        wsaUtt: MySpeechSynthesisUtterance;
    };
} | {
    type: "ERROR";
} | {
    type: "SPEAK";
    value: Agenda;
} | {
    type: "TTS_STARTED";
} | {
    type: "SPEAK_COMPLETE";
};
export declare const ttsMachine: import("xstate").StateMachine<TTSContext, TTSEvent, Record<string, import("xstate").AnyActorRef>, import("xstate").ProvidedActor, import("xstate").ParameterizedObject, import("xstate").ParameterizedObject, string, import("xstate").StateValue, string, TTSInit, {}, import("xstate").ResolveTypegenMeta<import("xstate").TypegenDisabled, TTSEvent, import("xstate").ProvidedActor, import("xstate").ParameterizedObject, import("xstate").ParameterizedObject, string, string>>;
export {};
//# sourceMappingURL=tts.d.ts.map